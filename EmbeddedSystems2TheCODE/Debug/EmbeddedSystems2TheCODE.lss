
EmbeddedSystems2TheCODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000015d6  0000166a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000419  00800104  00800104  0000166e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000166e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000280  00000000  00000000  000016e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e80  00000000  00000000  00001960  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eea  00000000  00000000  000047e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001560  00000000  00000000  000056ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009c8  00000000  00000000  00006c2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009a5  00000000  00000000  000075f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002dbe  00000000  00000000  00007f99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000ad57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__ctors_end>
       4:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
       8:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
       c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      10:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <__vector_4>
      14:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      18:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      1c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      20:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      24:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      28:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      2c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      30:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      34:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      38:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      3c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      40:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      44:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      48:	0c 94 4c 02 	jmp	0x498	; 0x498 <__vector_18>
      4c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      50:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      54:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      58:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      5c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      60:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      64:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      68:	d9 04       	cpc	r13, r9
      6a:	e3 04       	cpc	r14, r3
      6c:	e3 04       	cpc	r14, r3
      6e:	e3 04       	cpc	r14, r3
      70:	cf 04       	cpc	r12, r15
      72:	e3 04       	cpc	r14, r3
      74:	e3 04       	cpc	r14, r3
      76:	e3 04       	cpc	r14, r3
      78:	e3 04       	cpc	r14, r3
      7a:	e3 04       	cpc	r14, r3
      7c:	bb 04       	cpc	r11, r11
      7e:	e3 04       	cpc	r14, r3
      80:	e3 04       	cpc	r14, r3
      82:	e3 04       	cpc	r14, r3
      84:	e3 04       	cpc	r14, r3
      86:	e3 04       	cpc	r14, r3
      88:	c5 04       	cpc	r12, r5
      8a:	b8 04       	cpc	r11, r8
      8c:	e3 04       	cpc	r14, r3
      8e:	e3 04       	cpc	r14, r3
      90:	e3 04       	cpc	r14, r3
      92:	e3 04       	cpc	r14, r3
      94:	e3 04       	cpc	r14, r3
      96:	e3 04       	cpc	r14, r3
      98:	e3 04       	cpc	r14, r3
      9a:	e3 04       	cpc	r14, r3
      9c:	e3 04       	cpc	r14, r3
      9e:	e3 04       	cpc	r14, r3
      a0:	e3 04       	cpc	r14, r3
      a2:	e3 04       	cpc	r14, r3
      a4:	e3 04       	cpc	r14, r3
      a6:	e3 04       	cpc	r14, r3
      a8:	de 04       	cpc	r13, r14
      aa:	e3 04       	cpc	r14, r3
      ac:	e3 04       	cpc	r14, r3
      ae:	e3 04       	cpc	r14, r3
      b0:	d4 04       	cpc	r13, r4
      b2:	e3 04       	cpc	r14, r3
      b4:	e3 04       	cpc	r14, r3
      b6:	e3 04       	cpc	r14, r3
      b8:	e3 04       	cpc	r14, r3
      ba:	e3 04       	cpc	r14, r3
      bc:	c0 04       	cpc	r12, r0
      be:	e3 04       	cpc	r14, r3
      c0:	e3 04       	cpc	r14, r3
      c2:	e3 04       	cpc	r14, r3
      c4:	e3 04       	cpc	r14, r3
      c6:	e3 04       	cpc	r14, r3
      c8:	ca 04       	cpc	r12, r10

000000ca <__trampolines_end>:
      ca:	00 40       	sbci	r16, 0x00	; 0
      cc:	7a 10       	cpse	r7, r10
      ce:	f3 5a       	subi	r31, 0xA3	; 163
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	72 4e       	sbci	r23, 0xE2	; 226
      d4:	18 09       	sbc	r17, r8
      d6:	00 10       	cpse	r0, r0
      d8:	a5 d4       	rcall	.+2378   	; 0xa24 <mpu6050_readBytes+0x58>
      da:	e8 00       	.word	0x00e8	; ????
      dc:	00 e8       	ldi	r16, 0x80	; 128
      de:	76 48       	sbci	r23, 0x86	; 134
      e0:	17 00       	.word	0x0017	; ????
      e2:	00 e4       	ldi	r16, 0x40	; 64
      e4:	0b 54       	subi	r16, 0x4B	; 75
      e6:	02 00       	.word	0x0002	; ????
      e8:	00 ca       	rjmp	.-3072   	; 0xfffff4ea <__eeprom_end+0xff7ef4ea>
      ea:	9a 3b       	cpi	r25, 0xBA	; 186
      ec:	00 00       	nop
      ee:	00 e1       	ldi	r16, 0x10	; 16
      f0:	f5 05       	cpc	r31, r5
      f2:	00 00       	nop
      f4:	80 96       	adiw	r24, 0x20	; 32
      f6:	98 00       	.word	0x0098	; ????
      f8:	00 00       	nop
      fa:	40 42       	sbci	r20, 0x20	; 32
      fc:	0f 00       	.word	0x000f	; ????
      fe:	00 00       	nop
     100:	a0 86       	std	Z+8, r10	; 0x08
     102:	01 00       	.word	0x0001	; ????
     104:	00 00       	nop
     106:	10 27       	eor	r17, r16
     108:	00 00       	nop
     10a:	00 00       	nop
     10c:	e8 03       	fmulsu	r22, r16
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	64 00       	.word	0x0064	; ????
     114:	00 00       	nop
     116:	00 00       	nop
     118:	0a 00       	.word	0x000a	; ????
     11a:	00 00       	nop
     11c:	00 00       	nop
     11e:	01 00       	.word	0x0001	; ????
     120:	00 00       	nop
     122:	00 00       	nop
     124:	2c 76       	andi	r18, 0x6C	; 108
     126:	d8 88       	ldd	r13, Y+16	; 0x10
     128:	dc 67       	ori	r29, 0x7C	; 124
     12a:	4f 08       	sbc	r4, r15
     12c:	23 df       	rcall	.-442    	; 0xffffff74 <__eeprom_end+0xff7eff74>
     12e:	c1 df       	rcall	.-126    	; 0xb2 <__SREG__+0x73>
     130:	ae 59       	subi	r26, 0x9E	; 158
     132:	e1 b1       	in	r30, 0x01	; 1
     134:	b7 96       	adiw	r30, 0x27	; 39
     136:	e5 e3       	ldi	r30, 0x35	; 53
     138:	e4 53       	subi	r30, 0x34	; 52
     13a:	c6 3a       	cpi	r28, 0xA6	; 166
     13c:	e6 51       	subi	r30, 0x16	; 22
     13e:	99 76       	andi	r25, 0x69	; 105
     140:	96 e8       	ldi	r25, 0x86	; 134
     142:	e6 c2       	rjmp	.+1484   	; 0x710 <main+0xa>
     144:	84 26       	eor	r8, r20
     146:	eb 89       	ldd	r30, Y+19	; 0x13
     148:	8c 9b       	sbis	0x11, 4	; 17
     14a:	62 ed       	ldi	r22, 0xD2	; 210
     14c:	40 7c       	andi	r20, 0xC0	; 192
     14e:	6f fc       	.word	0xfc6f	; ????
     150:	ef bc       	out	0x2f, r14	; 47
     152:	9c 9f       	mul	r25, r28
     154:	40 f2       	brcs	.-112    	; 0xe6 <__trampolines_end+0x1c>
     156:	ba a5       	ldd	r27, Y+42	; 0x2a
     158:	6f a5       	ldd	r22, Y+47	; 0x2f
     15a:	f4 90       	lpm	r15, Z
     15c:	05 5a       	subi	r16, 0xA5	; 165
     15e:	2a f7       	brpl	.-54     	; 0x12a <__trampolines_end+0x60>
     160:	5c 93       	st	X, r21
     162:	6b 6c       	ori	r22, 0xCB	; 203
     164:	f9 67       	ori	r31, 0x79	; 121
     166:	6d c1       	rjmp	.+730    	; 0x442 <lcd_init+0x38>
     168:	1b fc       	.word	0xfc1b	; ????
     16a:	e0 e4       	ldi	r30, 0x40	; 64
     16c:	0d 47       	sbci	r16, 0x7D	; 125
     16e:	fe f5       	brtc	.+126    	; 0x1ee <__do_copy_data+0x2>
     170:	20 e6       	ldi	r18, 0x60	; 96
     172:	b5 00       	.word	0x00b5	; ????
     174:	d0 ed       	ldi	r29, 0xD0	; 208
     176:	90 2e       	mov	r9, r16
     178:	03 00       	.word	0x0003	; ????
     17a:	94 35       	cpi	r25, 0x54	; 84
     17c:	77 05       	cpc	r23, r7
     17e:	00 80       	ld	r0, Z
     180:	84 1e       	adc	r8, r20
     182:	08 00       	.word	0x0008	; ????
     184:	00 20       	and	r0, r0
     186:	4e 0a       	sbc	r4, r30
     188:	00 00       	nop
     18a:	00 c8       	rjmp	.-4096   	; 0xfffff18c <__eeprom_end+0xff7ef18c>
     18c:	0c 33       	cpi	r16, 0x3C	; 60
     18e:	33 33       	cpi	r19, 0x33	; 51
     190:	33 0f       	add	r19, r19
     192:	98 6e       	ori	r25, 0xE8	; 232
     194:	12 83       	std	Z+2, r17	; 0x02
     196:	11 41       	sbci	r17, 0x11	; 17
     198:	ef 8d       	ldd	r30, Y+31	; 0x1f
     19a:	21 14       	cp	r2, r1
     19c:	89 3b       	cpi	r24, 0xB9	; 185
     19e:	e6 55       	subi	r30, 0x56	; 86
     1a0:	16 cf       	rjmp	.-468    	; 0xffffffce <__eeprom_end+0xff7effce>
     1a2:	fe e6       	ldi	r31, 0x6E	; 110
     1a4:	db 18       	sub	r13, r11
     1a6:	d1 84       	ldd	r13, Z+9	; 0x09
     1a8:	4b 38       	cpi	r20, 0x8B	; 139
     1aa:	1b f7       	brvc	.-58     	; 0x172 <__trampolines_end+0xa8>
     1ac:	7c 1d       	adc	r23, r12
     1ae:	90 1d       	adc	r25, r0
     1b0:	a4 bb       	out	0x14, r26	; 20
     1b2:	e4 24       	eor	r14, r4
     1b4:	20 32       	cpi	r18, 0x20	; 32
     1b6:	84 72       	andi	r24, 0x24	; 36
     1b8:	5e 22       	and	r5, r30
     1ba:	81 00       	.word	0x0081	; ????
     1bc:	c9 f1       	breq	.+114    	; 0x230 <i2c_start>
     1be:	24 ec       	ldi	r18, 0xC4	; 196
     1c0:	a1 e5       	ldi	r26, 0x51	; 81
     1c2:	3d 27       	eor	r19, r29

000001c4 <init_sequence>:
     1c4:	ae 20 00 b0 c8 00 10 40 81 3f a1 a6 a8 3f a4 d3     . .....@.?...?..
     1d4:	00 d5 f0 d9 22 da 12 db 20 8d 14 00                 ...."... ...

000001e0 <__ctors_end>:
     1e0:	11 24       	eor	r1, r1
     1e2:	1f be       	out	0x3f, r1	; 63
     1e4:	cf ef       	ldi	r28, 0xFF	; 255
     1e6:	d8 e0       	ldi	r29, 0x08	; 8
     1e8:	de bf       	out	0x3e, r29	; 62
     1ea:	cd bf       	out	0x3d, r28	; 61

000001ec <__do_copy_data>:
     1ec:	11 e0       	ldi	r17, 0x01	; 1
     1ee:	a0 e0       	ldi	r26, 0x00	; 0
     1f0:	b1 e0       	ldi	r27, 0x01	; 1
     1f2:	e6 ed       	ldi	r30, 0xD6	; 214
     1f4:	f5 e1       	ldi	r31, 0x15	; 21
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <__do_copy_data+0x10>
     1f8:	05 90       	lpm	r0, Z+
     1fa:	0d 92       	st	X+, r0
     1fc:	a4 30       	cpi	r26, 0x04	; 4
     1fe:	b1 07       	cpc	r27, r17
     200:	d9 f7       	brne	.-10     	; 0x1f8 <__do_copy_data+0xc>

00000202 <__do_clear_bss>:
     202:	25 e0       	ldi	r18, 0x05	; 5
     204:	a4 e0       	ldi	r26, 0x04	; 4
     206:	b1 e0       	ldi	r27, 0x01	; 1
     208:	01 c0       	rjmp	.+2      	; 0x20c <.do_clear_bss_start>

0000020a <.do_clear_bss_loop>:
     20a:	1d 92       	st	X+, r1

0000020c <.do_clear_bss_start>:
     20c:	ad 31       	cpi	r26, 0x1D	; 29
     20e:	b2 07       	cpc	r27, r18
     210:	e1 f7       	brne	.-8      	; 0x20a <.do_clear_bss_loop>
     212:	0e 94 83 03 	call	0x706	; 0x706 <main>
     216:	0c 94 e9 0a 	jmp	0x15d2	; 0x15d2 <_exit>

0000021a <__bad_interrupt>:
     21a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000021e <i2c_init>:
     21e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     222:	88 e4       	ldi	r24, 0x48	; 72
     224:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     228:	84 e0       	ldi	r24, 0x04	; 4
     22a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     22e:	08 95       	ret

00000230 <i2c_start>:
     230:	94 ea       	ldi	r25, 0xA4	; 164
     232:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     236:	ec eb       	ldi	r30, 0xBC	; 188
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	90 81       	ld	r25, Z
     23c:	99 23       	and	r25, r25
     23e:	ec f7       	brge	.-6      	; 0x23a <i2c_start+0xa>
     240:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     244:	84 e8       	ldi	r24, 0x84	; 132
     246:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     24a:	ec eb       	ldi	r30, 0xBC	; 188
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	80 81       	ld	r24, Z
     250:	88 23       	and	r24, r24
     252:	ec f7       	brge	.-6      	; 0x24e <i2c_start+0x1e>
     254:	08 95       	ret

00000256 <i2c_stop>:
     256:	84 e9       	ldi	r24, 0x94	; 148
     258:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     25c:	08 95       	ret

0000025e <i2c_byte>:
     25e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     262:	84 e8       	ldi	r24, 0x84	; 132
     264:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     268:	ec eb       	ldi	r30, 0xBC	; 188
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	88 23       	and	r24, r24
     270:	ec f7       	brge	.-6      	; 0x26c <i2c_byte+0xe>
     272:	08 95       	ret

00000274 <i2c_readAck>:
     274:	84 ec       	ldi	r24, 0xC4	; 196
     276:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     27a:	80 e4       	ldi	r24, 0x40	; 64
     27c:	91 e0       	ldi	r25, 0x01	; 1
     27e:	ec eb       	ldi	r30, 0xBC	; 188
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	09 c0       	rjmp	.+18     	; 0x296 <i2c_readAck+0x22>
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	39 f4       	brne	.+14     	; 0x296 <i2c_readAck+0x22>
     288:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <I2C_ErrorCode>
     28c:	88 60       	ori	r24, 0x08	; 8
     28e:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <I2C_ErrorCode>
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	08 95       	ret
     296:	20 81       	ld	r18, Z
     298:	22 23       	and	r18, r18
     29a:	a4 f7       	brge	.-24     	; 0x284 <i2c_readAck+0x10>
     29c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     2a0:	08 95       	ret

000002a2 <i2c_readNAck>:
     2a2:	84 e8       	ldi	r24, 0x84	; 132
     2a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     2a8:	ec eb       	ldi	r30, 0xBC	; 188
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	80 81       	ld	r24, Z
     2ae:	88 23       	and	r24, r24
     2b0:	ec f7       	brge	.-6      	; 0x2ac <i2c_readNAck+0xa>
     2b2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     2b6:	08 95       	ret

000002b8 <lcd_command>:
    0x8D, 0x14,        // Set DC-DC enable
    
    
};
#pragma mark LCD COMMUNICATION
void lcd_command(uint8_t cmd[], uint8_t size) {
     2b8:	ef 92       	push	r14
     2ba:	ff 92       	push	r15
     2bc:	0f 93       	push	r16
     2be:	1f 93       	push	r17
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	7c 01       	movw	r14, r24
     2c6:	16 2f       	mov	r17, r22
    i2c_start((LCD_I2C_ADR << 1) | I2C_WRITE);
     2c8:	88 e7       	ldi	r24, 0x78	; 120
     2ca:	0e 94 18 01 	call	0x230	; 0x230 <i2c_start>
    i2c_byte(0x00);    // 0x00 for command, 0x40 for data
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	0e 94 2f 01 	call	0x25e	; 0x25e <i2c_byte>
    for (uint8_t i=0; i<size; i++) {
     2d4:	11 23       	and	r17, r17
     2d6:	71 f0       	breq	.+28     	; 0x2f4 <lcd_command+0x3c>
     2d8:	e7 01       	movw	r28, r14
     2da:	11 50       	subi	r17, 0x01	; 1
     2dc:	01 2f       	mov	r16, r17
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	0f 5f       	subi	r16, 0xFF	; 255
     2e2:	1f 4f       	sbci	r17, 0xFF	; 255
     2e4:	0e 0d       	add	r16, r14
     2e6:	1f 1d       	adc	r17, r15
        i2c_byte(cmd[i]);
     2e8:	89 91       	ld	r24, Y+
     2ea:	0e 94 2f 01 	call	0x25e	; 0x25e <i2c_byte>
};
#pragma mark LCD COMMUNICATION
void lcd_command(uint8_t cmd[], uint8_t size) {
    i2c_start((LCD_I2C_ADR << 1) | I2C_WRITE);
    i2c_byte(0x00);    // 0x00 for command, 0x40 for data
    for (uint8_t i=0; i<size; i++) {
     2ee:	c0 17       	cp	r28, r16
     2f0:	d1 07       	cpc	r29, r17
     2f2:	d1 f7       	brne	.-12     	; 0x2e8 <lcd_command+0x30>
        i2c_byte(cmd[i]);
    }
    i2c_stop();
     2f4:	0e 94 2b 01 	call	0x256	; 0x256 <i2c_stop>
}
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	1f 91       	pop	r17
     2fe:	0f 91       	pop	r16
     300:	ff 90       	pop	r15
     302:	ef 90       	pop	r14
     304:	08 95       	ret

00000306 <lcd_data>:
void lcd_data(uint8_t data[], uint16_t size) {
     306:	ef 92       	push	r14
     308:	ff 92       	push	r15
     30a:	0f 93       	push	r16
     30c:	1f 93       	push	r17
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	7c 01       	movw	r14, r24
     314:	8b 01       	movw	r16, r22
    i2c_start((LCD_I2C_ADR << 1) | I2C_WRITE);
     316:	88 e7       	ldi	r24, 0x78	; 120
     318:	0e 94 18 01 	call	0x230	; 0x230 <i2c_start>
    i2c_byte(0x40);    // 0x00 for command, 0x40 for data
     31c:	80 e4       	ldi	r24, 0x40	; 64
     31e:	0e 94 2f 01 	call	0x25e	; 0x25e <i2c_byte>
    for (uint16_t i = 0; i<size; i++) {
     322:	01 15       	cp	r16, r1
     324:	11 05       	cpc	r17, r1
     326:	49 f0       	breq	.+18     	; 0x33a <lcd_data+0x34>
     328:	e7 01       	movw	r28, r14
     32a:	0e 0d       	add	r16, r14
     32c:	1f 1d       	adc	r17, r15
        i2c_byte(data[i]);
     32e:	89 91       	ld	r24, Y+
     330:	0e 94 2f 01 	call	0x25e	; 0x25e <i2c_byte>
    i2c_stop();
}
void lcd_data(uint8_t data[], uint16_t size) {
    i2c_start((LCD_I2C_ADR << 1) | I2C_WRITE);
    i2c_byte(0x40);    // 0x00 for command, 0x40 for data
    for (uint16_t i = 0; i<size; i++) {
     334:	c0 17       	cp	r28, r16
     336:	d1 07       	cpc	r29, r17
     338:	d1 f7       	brne	.-12     	; 0x32e <lcd_data+0x28>
        i2c_byte(data[i]);
    }
    i2c_stop();
     33a:	0e 94 2b 01 	call	0x256	; 0x256 <i2c_stop>
}
     33e:	df 91       	pop	r29
     340:	cf 91       	pop	r28
     342:	1f 91       	pop	r17
     344:	0f 91       	pop	r16
     346:	ff 90       	pop	r15
     348:	ef 90       	pop	r14
     34a:	08 95       	ret

0000034c <lcd_gotoxy>:
    }
    commandSequence[sizeof(init_sequence)]=(dispAttr);
    lcd_command(commandSequence, sizeof(commandSequence));
    lcd_clrscr();
}
void lcd_gotoxy(uint8_t x, uint8_t y){
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	00 d0       	rcall	.+0      	; 0x352 <lcd_gotoxy+0x6>
     352:	00 d0       	rcall	.+0      	; 0x354 <lcd_gotoxy+0x8>
     354:	1f 92       	push	r1
     356:	cd b7       	in	r28, 0x3d	; 61
     358:	de b7       	in	r29, 0x3e	; 62
    if( x > (DISPLAY_WIDTH/sizeof(FONT[0])) || y > (DISPLAY_HEIGHT/8-1)) return;// out of display
     35a:	86 31       	cpi	r24, 0x16	; 22
     35c:	38 f5       	brcc	.+78     	; 0x3ac <lcd_gotoxy+0x60>
     35e:	68 30       	cpi	r22, 0x08	; 8
     360:	28 f5       	brcc	.+74     	; 0x3ac <lcd_gotoxy+0x60>
    x = x * sizeof(FONT[0]);
     362:	98 2f       	mov	r25, r24
     364:	99 0f       	add	r25, r25
     366:	89 0f       	add	r24, r25
     368:	88 0f       	add	r24, r24
    cursorPosition.x=x;
     36a:	e4 e0       	ldi	r30, 0x04	; 4
     36c:	f5 e0       	ldi	r31, 0x05	; 5
     36e:	80 83       	st	Z, r24
    cursorPosition.y=y;
     370:	61 83       	std	Z+1, r22	; 0x01
#if defined SSD1306
    uint8_t commandSequence[] = {0xb0+y, 0x21, x, 0x7f};
#elif defined SH1106
    uint8_t commandSequence[] = {0xb0+y, 0x21, 0x00+((2+x) & (0x0f)), 0x10+( ((2+x) & (0xf0)) >> 4 ), 0x7f};
     372:	60 55       	subi	r22, 0x50	; 80
     374:	69 83       	std	Y+1, r22	; 0x01
     376:	91 e2       	ldi	r25, 0x21	; 33
     378:	9a 83       	std	Y+2, r25	; 0x02
     37a:	92 e0       	ldi	r25, 0x02	; 2
     37c:	98 0f       	add	r25, r24
     37e:	9f 70       	andi	r25, 0x0F	; 15
     380:	9b 83       	std	Y+3, r25	; 0x03
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	02 96       	adiw	r24, 0x02	; 2
     386:	80 7f       	andi	r24, 0xF0	; 240
     388:	99 27       	eor	r25, r25
     38a:	95 95       	asr	r25
     38c:	87 95       	ror	r24
     38e:	95 95       	asr	r25
     390:	87 95       	ror	r24
     392:	95 95       	asr	r25
     394:	87 95       	ror	r24
     396:	95 95       	asr	r25
     398:	87 95       	ror	r24
     39a:	80 5f       	subi	r24, 0xF0	; 240
     39c:	8c 83       	std	Y+4, r24	; 0x04
     39e:	8f e7       	ldi	r24, 0x7F	; 127
     3a0:	8d 83       	std	Y+5, r24	; 0x05
#endif
    lcd_command(commandSequence, sizeof(commandSequence));
     3a2:	65 e0       	ldi	r22, 0x05	; 5
     3a4:	ce 01       	movw	r24, r28
     3a6:	01 96       	adiw	r24, 0x01	; 1
     3a8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_command>
}
     3ac:	0f 90       	pop	r0
     3ae:	0f 90       	pop	r0
     3b0:	0f 90       	pop	r0
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	08 95       	ret

000003bc <lcd_home>:
    }
#endif
    lcd_home();
}
void lcd_home(void){
    lcd_gotoxy(0, 0);
     3bc:	60 e0       	ldi	r22, 0x00	; 0
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	0e 94 a6 01 	call	0x34c	; 0x34c <lcd_gotoxy>
     3c4:	08 95       	ret

000003c6 <lcd_clrscr>:
#elif defined SH1106
    uint8_t commandSequence[] = {0xb0+y, 0x21, 0x00+((2+x) & (0x0f)), 0x10+( ((2+x) & (0xf0)) >> 4 ), 0x7f};
#endif
    lcd_command(commandSequence, sizeof(commandSequence));
}
void lcd_clrscr(void){
     3c6:	0f 93       	push	r16
     3c8:	1f 93       	push	r17
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	04 e0       	ldi	r16, 0x04	; 4
     3d0:	11 e0       	ldi	r17, 0x01	; 1
#ifdef GRAPHICMODE
    for (uint8_t i = 0; i < DISPLAY_HEIGHT/8; i++){
     3d2:	c0 e0       	ldi	r28, 0x00	; 0
        memset(displayBuffer[i], 0x00, sizeof(displayBuffer[i]));
     3d4:	d0 e8       	ldi	r29, 0x80	; 128
     3d6:	f8 01       	movw	r30, r16
     3d8:	8d 2f       	mov	r24, r29
     3da:	11 92       	st	Z+, r1
     3dc:	8a 95       	dec	r24
     3de:	e9 f7       	brne	.-6      	; 0x3da <lcd_clrscr+0x14>
        lcd_gotoxy(0,i);
     3e0:	6c 2f       	mov	r22, r28
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	0e 94 a6 01 	call	0x34c	; 0x34c <lcd_gotoxy>
        lcd_data(displayBuffer[i], sizeof(displayBuffer[i]));
     3e8:	60 e8       	ldi	r22, 0x80	; 128
     3ea:	70 e0       	ldi	r23, 0x00	; 0
     3ec:	c8 01       	movw	r24, r16
     3ee:	0e 94 83 01 	call	0x306	; 0x306 <lcd_data>
#endif
    lcd_command(commandSequence, sizeof(commandSequence));
}
void lcd_clrscr(void){
#ifdef GRAPHICMODE
    for (uint8_t i = 0; i < DISPLAY_HEIGHT/8; i++){
     3f2:	cf 5f       	subi	r28, 0xFF	; 255
     3f4:	00 58       	subi	r16, 0x80	; 128
     3f6:	1f 4f       	sbci	r17, 0xFF	; 255
     3f8:	c8 30       	cpi	r28, 0x08	; 8
     3fa:	69 f7       	brne	.-38     	; 0x3d6 <lcd_clrscr+0x10>
    for (uint8_t i = 0; i < DISPLAY_HEIGHT/8; i++){
        lcd_gotoxy(0,i);
        lcd_data(displayBuffer, sizeof(displayBuffer));
    }
#endif
    lcd_home();
     3fc:	0e 94 de 01 	call	0x3bc	; 0x3bc <lcd_home>
}
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	1f 91       	pop	r17
     406:	0f 91       	pop	r16
     408:	08 95       	ret

0000040a <lcd_init>:
    }
    i2c_stop();
}
#pragma mark -
#pragma mark GENERAL FUNCTIONS
void lcd_init(uint8_t dispAttr){
     40a:	1f 93       	push	r17
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
     414:	6c 97       	sbiw	r28, 0x1c	; 28
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	f8 94       	cli
     41a:	de bf       	out	0x3e, r29	; 62
     41c:	0f be       	out	0x3f, r0	; 63
     41e:	cd bf       	out	0x3d, r28	; 61
     420:	18 2f       	mov	r17, r24
    i2c_init();
     422:	0e 94 0f 01 	call	0x21e	; 0x21e <i2c_init>
     426:	e4 ec       	ldi	r30, 0xC4	; 196
     428:	f1 e0       	ldi	r31, 0x01	; 1
     42a:	de 01       	movw	r26, r28
     42c:	11 96       	adiw	r26, 0x01	; 1
     42e:	9e 01       	movw	r18, r28
     430:	24 5e       	subi	r18, 0xE4	; 228
     432:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t commandSequence[sizeof(init_sequence)+1];
    for (uint8_t i = 0; i < sizeof (init_sequence); i++) {
        commandSequence[i] = (pgm_read_byte(&init_sequence[i]));
     434:	84 91       	lpm	r24, Z
     436:	8d 93       	st	X+, r24
     438:	31 96       	adiw	r30, 0x01	; 1
#pragma mark -
#pragma mark GENERAL FUNCTIONS
void lcd_init(uint8_t dispAttr){
    i2c_init();
    uint8_t commandSequence[sizeof(init_sequence)+1];
    for (uint8_t i = 0; i < sizeof (init_sequence); i++) {
     43a:	a2 17       	cp	r26, r18
     43c:	b3 07       	cpc	r27, r19
     43e:	d1 f7       	brne	.-12     	; 0x434 <lcd_init+0x2a>
        commandSequence[i] = (pgm_read_byte(&init_sequence[i]));
    }
    commandSequence[sizeof(init_sequence)]=(dispAttr);
     440:	1c 8f       	std	Y+28, r17	; 0x1c
    lcd_command(commandSequence, sizeof(commandSequence));
     442:	6c e1       	ldi	r22, 0x1C	; 28
     444:	ce 01       	movw	r24, r28
     446:	01 96       	adiw	r24, 0x01	; 1
     448:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_command>
    lcd_clrscr();
     44c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <lcd_clrscr>
}
     450:	6c 96       	adiw	r28, 0x1c	; 28
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	f8 94       	cli
     456:	de bf       	out	0x3e, r29	; 62
     458:	0f be       	out	0x3f, r0	; 63
     45a:	cd bf       	out	0x3d, r28	; 61
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	1f 91       	pop	r17
     462:	08 95       	ret

00000464 <initUART0>:
void uart0_puti16B (uint16_t value)
{
	char _buffer[17];
	itoa( value, _buffer, 2 );	//conversion from integer to char
	uart0_puts(_buffer);
}
     464:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     468:	87 e6       	ldi	r24, 0x67	; 103
     46a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     46e:	e0 ec       	ldi	r30, 0xC0	; 192
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	10 82       	st	Z, r1
     474:	88 e9       	ldi	r24, 0x98	; 152
     476:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     47a:	86 e0       	ldi	r24, 0x06	; 6
     47c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     480:	80 81       	ld	r24, Z
     482:	80 64       	ori	r24, 0x40	; 64
     484:	80 83       	st	Z, r24
     486:	08 95       	ret

00000488 <uart0_putc>:
     488:	e0 ec       	ldi	r30, 0xC0	; 192
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	90 81       	ld	r25, Z
     48e:	95 ff       	sbrs	r25, 5
     490:	fd cf       	rjmp	.-6      	; 0x48c <uart0_putc+0x4>
     492:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     496:	08 95       	ret

00000498 <__vector_18>:
double raw;
uint16_t numuS;
uint8_t hit = 0;
uint8_t obstacle = 0;

ISR(USART_RX_vect) {// Connection receiver interrupt
     498:	1f 92       	push	r1
     49a:	0f 92       	push	r0
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	0f 92       	push	r0
     4a0:	11 24       	eor	r1, r1
     4a2:	8f 93       	push	r24
	commandChar = UDR0;
     4a4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     4a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
     4ac:	8f 91       	pop	r24
     4ae:	0f 90       	pop	r0
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	0f 90       	pop	r0
     4b4:	1f 90       	pop	r1
     4b6:	18 95       	reti

000004b8 <__vector_4>:


ISR(PCINT1_vect) {
     4b8:	1f 92       	push	r1
     4ba:	0f 92       	push	r0
     4bc:	0f b6       	in	r0, 0x3f	; 63
     4be:	0f 92       	push	r0
     4c0:	11 24       	eor	r1, r1
     4c2:	2f 93       	push	r18
     4c4:	3f 93       	push	r19
     4c6:	4f 93       	push	r20
     4c8:	5f 93       	push	r21
     4ca:	6f 93       	push	r22
     4cc:	7f 93       	push	r23
     4ce:	8f 93       	push	r24
     4d0:	9f 93       	push	r25
     4d2:	af 93       	push	r26
     4d4:	bf 93       	push	r27
     4d6:	cf 93       	push	r28
     4d8:	ef 93       	push	r30
     4da:	ff 93       	push	r31
	if (bit_is_set(PINC,PORTC3)) {					// Checks if echo is high
     4dc:	33 9b       	sbis	0x06, 3	; 6
     4de:	05 c0       	rjmp	.+10     	; 0x4ea <__vector_4+0x32>
		TCNT1 = 0;								// Reset Timer
     4e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     4e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     4e8:	21 c0       	rjmp	.+66     	; 0x52c <__vector_4+0x74>
		} else {
		numuS = TCNT1;					// Save Timer value
     4ea:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     4ee:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     4f2:	90 93 0e 05 	sts	0x050E, r25	; 0x80050e <numuS+0x1>
     4f6:	80 93 0d 05 	sts	0x050D, r24	; 0x80050d <numuS>
		uint8_t oldSREG = SREG;
     4fa:	cf b7       	in	r28, 0x3f	; 63
		cli();	
     4fc:	f8 94       	cli
			numuS = 27936;
		}	else {}
		
		*/
								// Disable Global interrupts
		raw = numuS * 0.0085910652; // timervalue / (58.2 * 2MHZ)
     4fe:	60 91 0d 05 	lds	r22, 0x050D	; 0x80050d <numuS>
     502:	70 91 0e 05 	lds	r23, 0x050E	; 0x80050e <numuS+0x1>
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	0e 94 36 07 	call	0xe6c	; 0xe6c <__floatunsisf>
     50e:	2a e8       	ldi	r18, 0x8A	; 138
     510:	31 ec       	ldi	r19, 0xC1	; 193
     512:	4c e0       	ldi	r20, 0x0C	; 12
     514:	5c e3       	ldi	r21, 0x3C	; 60
     516:	0e 94 ed 07 	call	0xfda	; 0xfda <__mulsf3>
     51a:	60 93 09 05 	sts	0x0509, r22	; 0x800509 <raw>
     51e:	70 93 0a 05 	sts	0x050A, r23	; 0x80050a <raw+0x1>
     522:	80 93 0b 05 	sts	0x050B, r24	; 0x80050b <raw+0x2>
     526:	90 93 0c 05 	sts	0x050C, r25	; 0x80050c <raw+0x3>

		SREG = oldSREG;							// Enable interrupts
     52a:	cf bf       	out	0x3f, r28	; 63
		// Toggle debugging LED
	}
		
}
     52c:	ff 91       	pop	r31
     52e:	ef 91       	pop	r30
     530:	cf 91       	pop	r28
     532:	bf 91       	pop	r27
     534:	af 91       	pop	r26
     536:	9f 91       	pop	r25
     538:	8f 91       	pop	r24
     53a:	7f 91       	pop	r23
     53c:	6f 91       	pop	r22
     53e:	5f 91       	pop	r21
     540:	4f 91       	pop	r20
     542:	3f 91       	pop	r19
     544:	2f 91       	pop	r18
     546:	0f 90       	pop	r0
     548:	0f be       	out	0x3f, r0	; 63
     54a:	0f 90       	pop	r0
     54c:	1f 90       	pop	r1
     54e:	18 95       	reti

00000550 <initializePWM>:
/* ****************************** End of Main *****************************/

//Changes the contents of the relevant registers to allow for PWM on 2 separate pins that serve as input for the motor-driver module.
void initializePWM(){
		
	DDRD |= (1 << PWM_L) | (1 << PWM_R);
     550:	8a b1       	in	r24, 0x0a	; 10
     552:	80 66       	ori	r24, 0x60	; 96
     554:	8a b9       	out	0x0a, r24	; 10
		
	OCR0A = 0;
     556:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
     558:	18 bc       	out	0x28, r1	; 40

	// set none-inverting mode
	TCCR0A |= (1 << COM0A1);
     55a:	84 b5       	in	r24, 0x24	; 36
     55c:	80 68       	ori	r24, 0x80	; 128
     55e:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0B1);
     560:	84 b5       	in	r24, 0x24	; 36
     562:	80 62       	ori	r24, 0x20	; 32
     564:	84 bd       	out	0x24, r24	; 36

	// set fast PWM Mode
	TCCR0A |= (1 << WGM01) | (1 << WGM00);
     566:	84 b5       	in	r24, 0x24	; 36
     568:	83 60       	ori	r24, 0x03	; 3
     56a:	84 bd       	out	0x24, r24	; 36
		
		
	// set prescaler to 8 and starts PWM
	//Temp disabled prescaler
	TCCR0B |= (1 << CS02) | (1 << CS00);
     56c:	85 b5       	in	r24, 0x25	; 37
     56e:	85 60       	ori	r24, 0x05	; 5
     570:	85 bd       	out	0x25, r24	; 37
     572:	08 95       	ret

00000574 <initializeMotors>:
}

//initializeMotors is a convenient subroutine which can be called in order set the required pins to output and initializes PWM with the expectation
//that the motors should not work if PWM has not been initialized.
void initializeMotors(){
	initializePWM();
     574:	0e 94 a8 02 	call	0x550	; 0x550 <initializePWM>
		
	DDRD |= (1 << L_CTRL_1) | (1 << L_CTRL_2) | (1 << R_CTRL_1);
     578:	8a b1       	in	r24, 0x0a	; 10
     57a:	84 69       	ori	r24, 0x94	; 148
     57c:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1 << R_CTRL_2);
     57e:	20 9a       	sbi	0x04, 0	; 4
     580:	08 95       	ret

00000582 <initializeUltrasonic>:
}
	
//Initialization of pin mask interrupt for the echo to get accurate readings
void initializeUltrasonic() {
		
	DDRC = 0xFF;							// Port C all output. PC0: RW		PC1: RS		PC2: E
     582:	8f ef       	ldi	r24, 0xFF	; 255
     584:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~(1<<DDC3);						// Set Pin C5 as input to read Echo
     586:	3b 98       	cbi	0x07, 3	; 7
	PORTC |= (1<<PORTC3);					// Enable pull up on C5
     588:	43 9a       	sbi	0x08, 3	; 8
	PORTC &= ~(1<<PORTC2);						// Init C4 as low (trigger)
     58a:	42 98       	cbi	0x08, 2	; 8

	PRR &= ~(1<<PRTIM1);					// To activate timer1 module
     58c:	e4 e6       	ldi	r30, 0x64	; 100
     58e:	f0 e0       	ldi	r31, 0x00	; 0
     590:	80 81       	ld	r24, Z
     592:	87 7f       	andi	r24, 0xF7	; 247
     594:	80 83       	st	Z, r24
	TCNT1 = 0;								// Initial timer value
     596:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     59a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TCCR1B |= (1<<CS11);					// Timer with prescaller 8. Since default clock for atmega328p is 1Mhz period is 1uS
     59e:	e1 e8       	ldi	r30, 0x81	; 129
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
     5a2:	80 81       	ld	r24, Z
     5a4:	82 60       	ori	r24, 0x02	; 2
     5a6:	80 83       	st	Z, r24
	TCCR1B |= (1<<ICES1);					// First capture on rising edge
     5a8:	80 81       	ld	r24, Z
     5aa:	80 64       	ori	r24, 0x40	; 64
     5ac:	80 83       	st	Z, r24

	PCICR = (1<<PCIE1);						// Enable PCINT[14:8] we use pin C5 which is PCINT13
     5ae:	82 e0       	ldi	r24, 0x02	; 2
     5b0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK1 = (1<<PCINT11);					// Enable C5 interrupt
     5b4:	88 e0       	ldi	r24, 0x08	; 8
     5b6:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
     5ba:	08 95       	ret

000005bc <leftFwd>:
}

//Rotate the leftMotor CW
void leftFwd(uint8_t spd){
	PORTD |= (1 << L_CTRL_1);
     5bc:	5a 9a       	sbi	0x0b, 2	; 11
	PORTD &= ~(1 << L_CTRL_2);
     5be:	5c 98       	cbi	0x0b, 4	; 11
//This sub-routine defines the dutyCycle of the motors by writing to the respective timer0 registers which will drive the motors.
void analogWrite(uint8_t pin, uint8_t dutyCycle) {
	
	//TODO: Do some checking so that value is between 0-255
	if(pin == PWM_L) {
		OCR0B = dutyCycle;
     5c0:	88 bd       	out	0x28, r24	; 40
     5c2:	08 95       	ret

000005c4 <leftRev>:
		
}

//Rotate the leftMotor CCW
void leftRev(uint8_t spd){
	PORTD &= ~(1 << L_CTRL_1);
     5c4:	5a 98       	cbi	0x0b, 2	; 11
	PORTD |= (1 << L_CTRL_2);
     5c6:	5c 9a       	sbi	0x0b, 4	; 11
//This sub-routine defines the dutyCycle of the motors by writing to the respective timer0 registers which will drive the motors.
void analogWrite(uint8_t pin, uint8_t dutyCycle) {
	
	//TODO: Do some checking so that value is between 0-255
	if(pin == PWM_L) {
		OCR0B = dutyCycle;
     5c8:	88 bd       	out	0x28, r24	; 40
     5ca:	08 95       	ret

000005cc <rightFwd>:
	analogWrite(PWM_L, spd);
}

//Rotate right motor CW
void rightFwd(uint8_t spd){
	PORTD |= (1 << R_CTRL_1);
     5cc:	5f 9a       	sbi	0x0b, 7	; 11
	PORTB &= ~(1 << R_CTRL_2);
     5ce:	28 98       	cbi	0x05, 0	; 5
	
	//TODO: Do some checking so that value is between 0-255
	if(pin == PWM_L) {
		OCR0B = dutyCycle;
	} else if(pin == PWM_R) {
		OCR0A = dutyCycle;
     5d0:	87 bd       	out	0x27, r24	; 39
     5d2:	08 95       	ret

000005d4 <rightRev>:
	analogWrite(PWM_R, spd);
}

//Rotate right motor CCW
void rightRev(uint8_t spd){
	PORTD &= ~(1 << R_CTRL_1);
     5d4:	5f 98       	cbi	0x0b, 7	; 11
	PORTB |= (1 << R_CTRL_2);
     5d6:	28 9a       	sbi	0x05, 0	; 5
	
	//TODO: Do some checking so that value is between 0-255
	if(pin == PWM_L) {
		OCR0B = dutyCycle;
	} else if(pin == PWM_R) {
		OCR0A = dutyCycle;
     5d8:	87 bd       	out	0x27, r24	; 39
     5da:	08 95       	ret

000005dc <leftStop>:
	analogWrite(PWM_R, spd);
}

//Stop left motor
void leftStop(){
	PORTD &= ~(1 << L_CTRL_1);
     5dc:	5a 98       	cbi	0x0b, 2	; 11
	PORTD &= ~(1 << L_CTRL_2);
     5de:	5c 98       	cbi	0x0b, 4	; 11
//This sub-routine defines the dutyCycle of the motors by writing to the respective timer0 registers which will drive the motors.
void analogWrite(uint8_t pin, uint8_t dutyCycle) {
	
	//TODO: Do some checking so that value is between 0-255
	if(pin == PWM_L) {
		OCR0B = dutyCycle;
     5e0:	18 bc       	out	0x28, r1	; 40
     5e2:	08 95       	ret

000005e4 <rightStop>:
	analogWrite(PWM_L, 0);
}

//Stop right motor
void rightStop(){
	PORTD &= ~(1 << R_CTRL_1);
     5e4:	5f 98       	cbi	0x0b, 7	; 11
	PORTB &= ~(1 << R_CTRL_2);
     5e6:	28 98       	cbi	0x05, 0	; 5
	
	//TODO: Do some checking so that value is between 0-255
	if(pin == PWM_L) {
		OCR0B = dutyCycle;
	} else if(pin == PWM_R) {
		OCR0A = dutyCycle;
     5e8:	17 bc       	out	0x27, r1	; 39
     5ea:	08 95       	ret

000005ec <stop>:
	analogWrite(PWM_R, 0);
}

//Stop both motors
void stop(){
	leftStop();
     5ec:	0e 94 ee 02 	call	0x5dc	; 0x5dc <leftStop>
	rightStop();
     5f0:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <rightStop>
     5f4:	08 95       	ret

000005f6 <drive>:
}

//Takes in a value either positive or negative that will drive both motors at the same speed. If the value is negative the car will move CCW or in reverse
void drive(int speed) {
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
	if(speed > 0){
     5fa:	18 16       	cp	r1, r24
     5fc:	19 06       	cpc	r1, r25
     5fe:	74 f4       	brge	.+28     	; 0x61c <drive+0x26>
		leftFwd((uint8_t) abs(speed));
     600:	ec 01       	movw	r28, r24
     602:	99 23       	and	r25, r25
     604:	24 f4       	brge	.+8      	; 0x60e <drive+0x18>
     606:	cc 27       	eor	r28, r28
     608:	dd 27       	eor	r29, r29
     60a:	c8 1b       	sub	r28, r24
     60c:	d9 0b       	sbc	r29, r25
     60e:	8c 2f       	mov	r24, r28
     610:	0e 94 de 02 	call	0x5bc	; 0x5bc <leftFwd>
		rightRev((uint8_t) abs(speed));
     614:	8c 2f       	mov	r24, r28
     616:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <rightRev>
     61a:	0d c0       	rjmp	.+26     	; 0x636 <drive+0x40>
	} else {
		leftRev((uint8_t) abs(speed));
     61c:	ec 01       	movw	r28, r24
     61e:	99 23       	and	r25, r25
     620:	24 f4       	brge	.+8      	; 0x62a <drive+0x34>
     622:	cc 27       	eor	r28, r28
     624:	dd 27       	eor	r29, r29
     626:	c8 1b       	sub	r28, r24
     628:	d9 0b       	sbc	r29, r25
     62a:	8c 2f       	mov	r24, r28
     62c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <leftRev>
		rightFwd((uint8_t) abs(speed));
     630:	8c 2f       	mov	r24, r28
     632:	0e 94 e6 02 	call	0x5cc	; 0x5cc <rightFwd>
	}
}
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	08 95       	ret

0000063c <rightMotor>:
	rightMotor(speed);
	leftMotor(speed/2);
}

void rightMotor(int speed) {
	if(speed > 0) {
     63c:	18 16       	cp	r1, r24
     63e:	19 06       	cpc	r1, r25
     640:	5c f4       	brge	.+22     	; 0x658 <rightMotor+0x1c>
		rightFwd((uint8_t) abs(speed));
     642:	9c 01       	movw	r18, r24
     644:	99 23       	and	r25, r25
     646:	24 f4       	brge	.+8      	; 0x650 <rightMotor+0x14>
     648:	22 27       	eor	r18, r18
     64a:	33 27       	eor	r19, r19
     64c:	28 1b       	sub	r18, r24
     64e:	39 0b       	sbc	r19, r25
     650:	82 2f       	mov	r24, r18
     652:	0e 94 e6 02 	call	0x5cc	; 0x5cc <rightFwd>
     656:	08 95       	ret
	} else {
		rightRev((uint8_t) abs(speed));
     658:	9c 01       	movw	r18, r24
     65a:	99 23       	and	r25, r25
     65c:	24 f4       	brge	.+8      	; 0x666 <rightMotor+0x2a>
     65e:	22 27       	eor	r18, r18
     660:	33 27       	eor	r19, r19
     662:	28 1b       	sub	r18, r24
     664:	39 0b       	sbc	r19, r25
     666:	82 2f       	mov	r24, r18
     668:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <rightRev>
     66c:	08 95       	ret

0000066e <leftMotor>:
	}
}

void leftMotor(int speed) {
	if(speed > 0){
     66e:	18 16       	cp	r1, r24
     670:	19 06       	cpc	r1, r25
     672:	5c f4       	brge	.+22     	; 0x68a <leftMotor+0x1c>
		//leftFwd((uint8_t) abs(speed));
		leftRev((uint8_t) abs(speed));
     674:	9c 01       	movw	r18, r24
     676:	99 23       	and	r25, r25
     678:	24 f4       	brge	.+8      	; 0x682 <leftMotor+0x14>
     67a:	22 27       	eor	r18, r18
     67c:	33 27       	eor	r19, r19
     67e:	28 1b       	sub	r18, r24
     680:	39 0b       	sbc	r19, r25
     682:	82 2f       	mov	r24, r18
     684:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <leftRev>
     688:	08 95       	ret
		} else {
		//leftRev((uint8_t) abs(speed));
		leftFwd((uint8_t) abs(speed));
     68a:	9c 01       	movw	r18, r24
     68c:	99 23       	and	r25, r25
     68e:	24 f4       	brge	.+8      	; 0x698 <leftMotor+0x2a>
     690:	22 27       	eor	r18, r18
     692:	33 27       	eor	r19, r19
     694:	28 1b       	sub	r18, r24
     696:	39 0b       	sbc	r19, r25
     698:	82 2f       	mov	r24, r18
     69a:	0e 94 de 02 	call	0x5bc	; 0x5bc <leftFwd>
     69e:	08 95       	ret

000006a0 <turnRight>:
		leftRev((uint8_t) abs(speed));
		rightFwd((uint8_t) abs(speed));
	}
}

void turnRight(int speed) {
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
	speed = -speed;
     6a4:	cc 27       	eor	r28, r28
     6a6:	dd 27       	eor	r29, r29
     6a8:	c8 1b       	sub	r28, r24
     6aa:	d9 0b       	sbc	r29, r25
	rightMotor(speed/2);
     6ac:	ce 01       	movw	r24, r28
     6ae:	0a f4       	brpl	.+2      	; 0x6b2 <turnRight+0x12>
     6b0:	01 96       	adiw	r24, 0x01	; 1
     6b2:	95 95       	asr	r25
     6b4:	87 95       	ror	r24
     6b6:	0e 94 1e 03 	call	0x63c	; 0x63c <rightMotor>
	leftMotor(speed);
     6ba:	ce 01       	movw	r24, r28
     6bc:	0e 94 37 03 	call	0x66e	; 0x66e <leftMotor>
}
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	08 95       	ret

000006c6 <turnLeft>:

void turnLeft(int speed) {
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
	speed = -speed;
     6ca:	cc 27       	eor	r28, r28
     6cc:	dd 27       	eor	r29, r29
     6ce:	c8 1b       	sub	r28, r24
     6d0:	d9 0b       	sbc	r29, r25
	rightMotor(speed);
     6d2:	ce 01       	movw	r24, r28
     6d4:	0e 94 1e 03 	call	0x63c	; 0x63c <rightMotor>
	leftMotor(speed/2);
     6d8:	ce 01       	movw	r24, r28
     6da:	dd 23       	and	r29, r29
     6dc:	0c f4       	brge	.+2      	; 0x6e0 <turnLeft+0x1a>
     6de:	01 96       	adiw	r24, 0x01	; 1
     6e0:	95 95       	asr	r25
     6e2:	87 95       	ror	r24
     6e4:	0e 94 37 03 	call	0x66e	; 0x66e <leftMotor>
}
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	08 95       	ret

000006ee <sendUltraSonicSignal>:
	}
}
	
void sendUltraSonicSignal(){
	
    PORTC &= ~(1<<PORTC2);	
     6ee:	42 98       	cbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6f0:	8a e0       	ldi	r24, 0x0A	; 10
     6f2:	8a 95       	dec	r24
     6f4:	f1 f7       	brne	.-4      	; 0x6f2 <sendUltraSonicSignal+0x4>
     6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <sendUltraSonicSignal+0xa>
	_delay_us(2);
	PORTC |= (1<<PORTC2);						// Set trigger high
     6f8:	42 9a       	sbi	0x08, 2	; 8
     6fa:	85 e3       	ldi	r24, 0x35	; 53
     6fc:	8a 95       	dec	r24
     6fe:	f1 f7       	brne	.-4      	; 0x6fc <sendUltraSonicSignal+0xe>
     700:	00 00       	nop
	_delay_us(10);							// for 10uS
	PORTC &= ~(1<<PORTC2);						// to trigger the ultrasonic module
     702:	42 98       	cbi	0x08, 2	; 8
     704:	08 95       	ret

00000706 <main>:
	}
		
}

/* ****************************** Start of main *****************************/
int main(void) {
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	cd b7       	in	r28, 0x3d	; 61
     70c:	de b7       	in	r29, 0x3e	; 62
     70e:	c7 57       	subi	r28, 0x77	; 119
     710:	d1 09       	sbc	r29, r1
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	f8 94       	cli
     716:	de bf       	out	0x3e, r29	; 62
     718:	0f be       	out	0x3f, r0	; 63
     71a:	cd bf       	out	0x3d, r28	; 61
	initUART0();
     71c:	0e 94 32 02 	call	0x464	; 0x464 <initUART0>
	initializeMotors();
     720:	0e 94 ba 02 	call	0x574	; 0x574 <initializeMotors>
	initializeUltrasonic();
     724:	0e 94 c1 02 	call	0x582	; 0x582 <initializeUltrasonic>
	sei();
     728:	78 94       	sei
	DDRB =	0xFF;
     72a:	8f ef       	ldi	r24, 0xFF	; 255
     72c:	84 b9       	out	0x04, r24	; 4
	char distance[100];
	char axg_arr[10];
	char ayg_arr[10];
	char azg_arr[10];
		
	lcd_init(0xAF);    // init lcd and turn on
     72e:	8f ea       	ldi	r24, 0xAF	; 175
     730:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_init>
	//init mpu6050
	mpu6050_init();
     734:	0e 94 ed 05 	call	0xbda	; 0xbda <mpu6050_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     738:	2f ef       	ldi	r18, 0xFF	; 255
     73a:	80 e7       	ldi	r24, 0x70	; 112
     73c:	92 e0       	ldi	r25, 0x02	; 2
     73e:	21 50       	subi	r18, 0x01	; 1
     740:	80 40       	sbci	r24, 0x00	; 0
     742:	90 40       	sbci	r25, 0x00	; 0
     744:	e1 f7       	brne	.-8      	; 0x73e <main+0x38>
     746:	00 c0       	rjmp	.+0      	; 0x748 <main+0x42>
     748:	00 00       	nop
	int16_t ay = 0;
	int16_t az = 0;
	int16_t gx = 0;
	int16_t gy = 0;
	int16_t gz = 0;
	double axg = 0;
     74a:	a9 96       	adiw	r28, 0x29	; 41
     74c:	1c ae       	std	Y+60, r1	; 0x3c
     74e:	1d ae       	std	Y+61, r1	; 0x3d
     750:	1e ae       	std	Y+62, r1	; 0x3e
     752:	1f ae       	std	Y+63, r1	; 0x3f
     754:	a9 97       	sbiw	r28, 0x29	; 41
	double ayg = 0;
     756:	ad 96       	adiw	r28, 0x2d	; 45
     758:	1c ae       	std	Y+60, r1	; 0x3c
     75a:	1d ae       	std	Y+61, r1	; 0x3d
     75c:	1e ae       	std	Y+62, r1	; 0x3e
     75e:	1f ae       	std	Y+63, r1	; 0x3f
     760:	ad 97       	sbiw	r28, 0x2d	; 45
	double azg = 0;
     762:	e1 96       	adiw	r28, 0x31	; 49
     764:	1c ae       	std	Y+60, r1	; 0x3c
     766:	1d ae       	std	Y+61, r1	; 0x3d
     768:	1e ae       	std	Y+62, r1	; 0x3e
     76a:	1f ae       	std	Y+63, r1	; 0x3f
     76c:	e1 97       	sbiw	r28, 0x31	; 49
	double gxds = 0;
	double gyds = 0;
	double gzds = 0;
	#endif
	driving= 0;
     76e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <driving>
	while(1) {
		_delay_ms(60);

		#if MPU6050_GETATTITUDE == 0
		mpu6050_getConvAccelData(&axg, &ayg, &azg);
     772:	5e 01       	movw	r10, r28
     774:	ed e6       	ldi	r30, 0x6D	; 109
     776:	ae 0e       	add	r10, r30
     778:	b1 1c       	adc	r11, r1
     77a:	ce 01       	movw	r24, r28
     77c:	87 59       	subi	r24, 0x97	; 151
     77e:	9f 4f       	sbci	r25, 0xFF	; 255
     780:	e3 96       	adiw	r28, 0x33	; 51
     782:	9f af       	std	Y+63, r25	; 0x3f
     784:	8e af       	std	Y+62, r24	; 0x3e
     786:	e3 97       	sbiw	r28, 0x33	; 51
     788:	fe 01       	movw	r30, r28
     78a:	eb 59       	subi	r30, 0x9B	; 155
     78c:	ff 4f       	sbci	r31, 0xFF	; 255
     78e:	e5 96       	adiw	r28, 0x35	; 53
     790:	ff af       	std	Y+63, r31	; 0x3f
     792:	ee af       	std	Y+62, r30	; 0x3e
     794:	e5 97       	sbiw	r28, 0x35	; 53
     796:	8a 2c       	mov	r8, r10
     798:	3b 2c       	mov	r3, r11
     79a:	e2 96       	adiw	r28, 0x32	; 50
     79c:	2f ac       	ldd	r2, Y+63	; 0x3f
     79e:	e2 97       	sbiw	r28, 0x32	; 50
     7a0:	e3 96       	adiw	r28, 0x33	; 51
     7a2:	ff ad       	ldd	r31, Y+63	; 0x3f
     7a4:	e3 97       	sbiw	r28, 0x33	; 51
     7a6:	e6 96       	adiw	r28, 0x36	; 54
     7a8:	ff af       	std	Y+63, r31	; 0x3f
     7aa:	e6 97       	sbiw	r28, 0x36	; 54
     7ac:	e4 96       	adiw	r28, 0x34	; 52
     7ae:	2f ad       	ldd	r18, Y+63	; 0x3f
     7b0:	e4 97       	sbiw	r28, 0x34	; 52
     7b2:	e7 96       	adiw	r28, 0x37	; 55
     7b4:	2f af       	std	Y+63, r18	; 0x3f
     7b6:	e7 97       	sbiw	r28, 0x37	; 55
     7b8:	e5 96       	adiw	r28, 0x35	; 53
     7ba:	8f ad       	ldd	r24, Y+63	; 0x3f
     7bc:	e5 97       	sbiw	r28, 0x35	; 53
     7be:	e8 96       	adiw	r28, 0x38	; 56
     7c0:	8f af       	std	Y+63, r24	; 0x3f
     7c2:	e8 97       	sbiw	r28, 0x38	; 56
		axg = axg + MPU_AXOFFSET;
		ayg = ayg + MPU_AYOFFSET;
		azg = azg + MPU_AZOFFSET;
		
		if((axg > HIT_THRESHHOLD_LR || axg < -HIT_THRESHHOLD_LR) || (ayg > HIT_THRESHHOLD_FB || ayg < -HIT_THRESHHOLD_FB)){
			hit = 1;
     7c4:	99 24       	eor	r9, r9
     7c6:	93 94       	inc	r9
     7c8:	9f ef       	ldi	r25, 0xFF	; 255
     7ca:	ed ee       	ldi	r30, 0xED	; 237
     7cc:	f2 e0       	ldi	r31, 0x02	; 2
     7ce:	91 50       	subi	r25, 0x01	; 1
     7d0:	e0 40       	sbci	r30, 0x00	; 0
     7d2:	f0 40       	sbci	r31, 0x00	; 0
     7d4:	e1 f7       	brne	.-8      	; 0x7ce <main+0xc8>
     7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <main+0xd2>
     7d8:	00 00       	nop
	driving= 0;
	while(1) {
		_delay_ms(60);

		#if MPU6050_GETATTITUDE == 0
		mpu6050_getConvAccelData(&axg, &ayg, &azg);
     7da:	48 2d       	mov	r20, r8
     7dc:	53 2d       	mov	r21, r3
     7de:	62 2d       	mov	r22, r2
     7e0:	e6 96       	adiw	r28, 0x36	; 54
     7e2:	7f ad       	ldd	r23, Y+63	; 0x3f
     7e4:	e6 97       	sbiw	r28, 0x36	; 54
     7e6:	e7 96       	adiw	r28, 0x37	; 55
     7e8:	8f ad       	ldd	r24, Y+63	; 0x3f
     7ea:	e7 97       	sbiw	r28, 0x37	; 55
     7ec:	e8 96       	adiw	r28, 0x38	; 56
     7ee:	9f ad       	ldd	r25, Y+63	; 0x3f
     7f0:	e8 97       	sbiw	r28, 0x38	; 56
     7f2:	0e 94 4a 06 	call	0xc94	; 0xc94 <mpu6050_getConvAccelData>
		axg = axg + MPU_AXOFFSET;
     7f6:	2a e0       	ldi	r18, 0x0A	; 10
     7f8:	37 ed       	ldi	r19, 0xD7	; 215
     7fa:	43 ea       	ldi	r20, 0xA3	; 163
     7fc:	5c e3       	ldi	r21, 0x3C	; 60
     7fe:	a9 96       	adiw	r28, 0x29	; 41
     800:	6c ad       	ldd	r22, Y+60	; 0x3c
     802:	7d ad       	ldd	r23, Y+61	; 0x3d
     804:	8e ad       	ldd	r24, Y+62	; 0x3e
     806:	9f ad       	ldd	r25, Y+63	; 0x3f
     808:	a9 97       	sbiw	r28, 0x29	; 41
     80a:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__addsf3>
     80e:	2b 01       	movw	r4, r22
     810:	3c 01       	movw	r6, r24
     812:	a9 96       	adiw	r28, 0x29	; 41
     814:	6c af       	std	Y+60, r22	; 0x3c
     816:	7d af       	std	Y+61, r23	; 0x3d
     818:	8e af       	std	Y+62, r24	; 0x3e
     81a:	9f af       	std	Y+63, r25	; 0x3f
     81c:	a9 97       	sbiw	r28, 0x29	; 41
		ayg = ayg + MPU_AYOFFSET;
     81e:	2d ec       	ldi	r18, 0xCD	; 205
     820:	3c ec       	ldi	r19, 0xCC	; 204
     822:	4c e4       	ldi	r20, 0x4C	; 76
     824:	5d e3       	ldi	r21, 0x3D	; 61
     826:	ad 96       	adiw	r28, 0x2d	; 45
     828:	6c ad       	ldd	r22, Y+60	; 0x3c
     82a:	7d ad       	ldd	r23, Y+61	; 0x3d
     82c:	8e ad       	ldd	r24, Y+62	; 0x3e
     82e:	9f ad       	ldd	r25, Y+63	; 0x3f
     830:	ad 97       	sbiw	r28, 0x2d	; 45
     832:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__addsf3>
     836:	6b 01       	movw	r12, r22
     838:	7c 01       	movw	r14, r24
     83a:	ad 96       	adiw	r28, 0x2d	; 45
     83c:	6c af       	std	Y+60, r22	; 0x3c
     83e:	7d af       	std	Y+61, r23	; 0x3d
     840:	8e af       	std	Y+62, r24	; 0x3e
     842:	9f af       	std	Y+63, r25	; 0x3f
     844:	ad 97       	sbiw	r28, 0x2d	; 45
		azg = azg + MPU_AZOFFSET;
     846:	2d ec       	ldi	r18, 0xCD	; 205
     848:	3c ec       	ldi	r19, 0xCC	; 204
     84a:	4c e4       	ldi	r20, 0x4C	; 76
     84c:	5e e3       	ldi	r21, 0x3E	; 62
     84e:	f5 01       	movw	r30, r10
     850:	60 81       	ld	r22, Z
     852:	71 81       	ldd	r23, Z+1	; 0x01
     854:	82 81       	ldd	r24, Z+2	; 0x02
     856:	93 81       	ldd	r25, Z+3	; 0x03
     858:	0e 94 c4 06 	call	0xd88	; 0xd88 <__subsf3>
     85c:	f5 01       	movw	r30, r10
     85e:	60 83       	st	Z, r22
     860:	71 83       	std	Z+1, r23	; 0x01
     862:	82 83       	std	Z+2, r24	; 0x02
     864:	93 83       	std	Z+3, r25	; 0x03
		
		if((axg > HIT_THRESHHOLD_LR || axg < -HIT_THRESHHOLD_LR) || (ayg > HIT_THRESHHOLD_FB || ayg < -HIT_THRESHHOLD_FB)){
     866:	2d ec       	ldi	r18, 0xCD	; 205
     868:	3c ec       	ldi	r19, 0xCC	; 204
     86a:	4c e4       	ldi	r20, 0x4C	; 76
     86c:	5e e3       	ldi	r21, 0x3E	; 62
     86e:	c3 01       	movw	r24, r6
     870:	b2 01       	movw	r22, r4
     872:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__gesf2>
     876:	18 16       	cp	r1, r24
     878:	f4 f0       	brlt	.+60     	; 0x8b6 <main+0x1b0>
     87a:	2d ec       	ldi	r18, 0xCD	; 205
     87c:	3c ec       	ldi	r19, 0xCC	; 204
     87e:	4c e4       	ldi	r20, 0x4C	; 76
     880:	5e eb       	ldi	r21, 0xBE	; 190
     882:	c3 01       	movw	r24, r6
     884:	b2 01       	movw	r22, r4
     886:	0e 94 31 07 	call	0xe62	; 0xe62 <__cmpsf2>
     88a:	88 23       	and	r24, r24
     88c:	a4 f0       	brlt	.+40     	; 0x8b6 <main+0x1b0>
     88e:	2a e9       	ldi	r18, 0x9A	; 154
     890:	39 e9       	ldi	r19, 0x99	; 153
     892:	49 e1       	ldi	r20, 0x19	; 25
     894:	5f e3       	ldi	r21, 0x3F	; 63
     896:	c7 01       	movw	r24, r14
     898:	b6 01       	movw	r22, r12
     89a:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__gesf2>
     89e:	18 16       	cp	r1, r24
     8a0:	54 f0       	brlt	.+20     	; 0x8b6 <main+0x1b0>
     8a2:	2a e9       	ldi	r18, 0x9A	; 154
     8a4:	39 e9       	ldi	r19, 0x99	; 153
     8a6:	49 e1       	ldi	r20, 0x19	; 25
     8a8:	5f eb       	ldi	r21, 0xBF	; 191
     8aa:	c7 01       	movw	r24, r14
     8ac:	b6 01       	movw	r22, r12
     8ae:	0e 94 31 07 	call	0xe62	; 0xe62 <__cmpsf2>
     8b2:	88 23       	and	r24, r24
     8b4:	14 f4       	brge	.+4      	; 0x8ba <main+0x1b4>
			hit = 1;
     8b6:	90 92 07 05 	sts	0x0507, r9	; 0x800507 <hit>
		}
		#endif
		
		sendUltraSonicSignal();
     8ba:	0e 94 77 03 	call	0x6ee	; 0x6ee <sendUltraSonicSignal>
		dtostrf(raw, 3, 1, distance);
     8be:	60 91 09 05 	lds	r22, 0x0509	; 0x800509 <raw>
     8c2:	70 91 0a 05 	lds	r23, 0x050A	; 0x80050a <raw+0x1>
     8c6:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <raw+0x2>
     8ca:	90 91 0c 05 	lds	r25, 0x050C	; 0x80050c <raw+0x3>
     8ce:	8e 01       	movw	r16, r28
     8d0:	0f 5f       	subi	r16, 0xFF	; 255
     8d2:	1f 4f       	sbci	r17, 0xFF	; 255
     8d4:	29 2d       	mov	r18, r9
     8d6:	43 e0       	ldi	r20, 0x03	; 3
     8d8:	0e 94 60 08 	call	0x10c0	; 0x10c0 <dtostrf>
		*/
		
		//uart0_puts(distance);
		//uart0_puts("\n");
		
		if(raw < 15){
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	40 e7       	ldi	r20, 0x70	; 112
     8e2:	51 e4       	ldi	r21, 0x41	; 65
     8e4:	60 91 09 05 	lds	r22, 0x0509	; 0x800509 <raw>
     8e8:	70 91 0a 05 	lds	r23, 0x050A	; 0x80050a <raw+0x1>
     8ec:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <raw+0x2>
     8f0:	90 91 0c 05 	lds	r25, 0x050C	; 0x80050c <raw+0x3>
     8f4:	0e 94 31 07 	call	0xe62	; 0xe62 <__cmpsf2>
     8f8:	88 23       	and	r24, r24
     8fa:	64 f4       	brge	.+24     	; 0x914 <__stack+0x15>
			obstacle = 1;
     8fc:	90 92 06 05 	sts	0x0506, r9	; 0x800506 <obstacle>
			obstacle = 0;
		}
		
		
		if(obstacle){
			run = 0;
     900:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <run>
			//Let the car back up
			drive(-HALF_SPEED);
     904:	81 e8       	ldi	r24, 0x81	; 129
     906:	9f ef       	ldi	r25, 0xFF	; 255
     908:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <drive>
			uart0_putc('O');
     90c:	8f e4       	ldi	r24, 0x4F	; 79
     90e:	0e 94 44 02 	call	0x488	; 0x488 <uart0_putc>
     912:	04 c0       	rjmp	.+8      	; 0x91c <__stack+0x1d>
		//uart0_puts("\n");
		
		if(raw < 15){
			obstacle = 1;
		} else {
			obstacle = 0;
     914:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <obstacle>
			//uart0_puts(distance);
			//uart0_puts("\n\r");
			//stop();
			
		} else{
			run = 1;
     918:	90 92 02 01 	sts	0x0102, r9	; 0x800102 <run>
		}
		
		if(hit){
     91c:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <hit>
     920:	88 23       	and	r24, r24
     922:	81 f0       	breq	.+32     	; 0x944 <__stack+0x45>
			uart0_putc('H');
     924:	88 e4       	ldi	r24, 0x48	; 72
     926:	0e 94 44 02 	call	0x488	; 0x488 <uart0_putc>
			stop();
     92a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <stop>
     92e:	ff ef       	ldi	r31, 0xFF	; 255
     930:	23 ed       	ldi	r18, 0xD3	; 211
     932:	80 e3       	ldi	r24, 0x30	; 48
     934:	f1 50       	subi	r31, 0x01	; 1
     936:	20 40       	sbci	r18, 0x00	; 0
     938:	80 40       	sbci	r24, 0x00	; 0
     93a:	e1 f7       	brne	.-8      	; 0x934 <__stack+0x35>
     93c:	00 c0       	rjmp	.+0      	; 0x93e <__stack+0x3f>
     93e:	00 00       	nop
			_delay_ms(1000);
			hit=0;
     940:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <hit>
		
		}else{}
			
		if(run){
     944:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <run>
     948:	88 23       	and	r24, r24
     94a:	09 f4       	brne	.+2      	; 0x94e <__stack+0x4f>
     94c:	3d cf       	rjmp	.-390    	; 0x7c8 <main+0xc2>
			uart0_putc('D');
     94e:	84 e4       	ldi	r24, 0x44	; 68
     950:	0e 94 44 02 	call	0x488	; 0x488 <uart0_putc>
			//uart0_puts("\n\r");
			switch(commandChar) {
     954:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     958:	8e 2f       	mov	r24, r30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	fc 01       	movw	r30, r24
     95e:	e2 54       	subi	r30, 0x42	; 66
     960:	f1 09       	sbc	r31, r1
     962:	e1 33       	cpi	r30, 0x31	; 49
     964:	f1 05       	cpc	r31, r1
     966:	78 f5       	brcc	.+94     	; 0x9c6 <__stack+0xc7>
     968:	ec 5c       	subi	r30, 0xCC	; 204
     96a:	ff 4f       	sbci	r31, 0xFF	; 255
     96c:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__tablejump2__>
				case 'S':
				stop();
     970:	0e 94 f6 02 	call	0x5ec	; 0x5ec <stop>
				break;
     974:	29 cf       	rjmp	.-430    	; 0x7c8 <main+0xc2>
				case 'L':
				turnLeft(FULL_SPEED);
     976:	8f ef       	ldi	r24, 0xFF	; 255
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <turnLeft>
				break;
     97e:	24 cf       	rjmp	.-440    	; 0x7c8 <main+0xc2>
				case 'l':
				turnLeft(HALF_SPEED);
     980:	8f e7       	ldi	r24, 0x7F	; 127
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	0e 94 63 03 	call	0x6c6	; 0x6c6 <turnLeft>
				break;
     988:	1f cf       	rjmp	.-450    	; 0x7c8 <main+0xc2>
				case 'R':
				turnRight(FULL_SPEED);
     98a:	8f ef       	ldi	r24, 0xFF	; 255
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <turnRight>
				break;
     992:	1a cf       	rjmp	.-460    	; 0x7c8 <main+0xc2>
				case 'r':
				turnRight(HALF_SPEED);
     994:	8f e7       	ldi	r24, 0x7F	; 127
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	0e 94 50 03 	call	0x6a0	; 0x6a0 <turnRight>
				break;
     99c:	15 cf       	rjmp	.-470    	; 0x7c8 <main+0xc2>
				case 'F':
				drive(FULL_SPEED);
     99e:	8f ef       	ldi	r24, 0xFF	; 255
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <drive>
				break;
     9a6:	10 cf       	rjmp	.-480    	; 0x7c8 <main+0xc2>
				case 'f':
				drive(HALF_SPEED);
     9a8:	8f e7       	ldi	r24, 0x7F	; 127
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <drive>
				break;
     9b0:	0b cf       	rjmp	.-490    	; 0x7c8 <main+0xc2>
				case 'B':
				drive(-FULL_SPEED);
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	9f ef       	ldi	r25, 0xFF	; 255
     9b6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <drive>
				break;
     9ba:	06 cf       	rjmp	.-500    	; 0x7c8 <main+0xc2>
				case 'b':
				drive(-HALF_SPEED);
     9bc:	81 e8       	ldi	r24, 0x81	; 129
     9be:	9f ef       	ldi	r25, 0xFF	; 255
     9c0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <drive>
				break;
     9c4:	01 cf       	rjmp	.-510    	; 0x7c8 <main+0xc2>
				default:
				stop();
     9c6:	0e 94 f6 02 	call	0x5ec	; 0x5ec <stop>
				break;
     9ca:	fe ce       	rjmp	.-516    	; 0x7c8 <main+0xc2>

000009cc <mpu6050_readBytes>:
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
}
     9cc:	af 92       	push	r10
     9ce:	bf 92       	push	r11
     9d0:	cf 92       	push	r12
     9d2:	df 92       	push	r13
     9d4:	ff 92       	push	r15
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	66 23       	and	r22, r22
     9e0:	b9 f1       	breq	.+110    	; 0xa50 <mpu6050_readBytes+0x84>
     9e2:	c5 2f       	mov	r28, r21
     9e4:	d4 2f       	mov	r29, r20
     9e6:	f6 2e       	mov	r15, r22
     9e8:	18 2f       	mov	r17, r24
     9ea:	80 ed       	ldi	r24, 0xD0	; 208
     9ec:	0e 94 18 01 	call	0x230	; 0x230 <i2c_start>
     9f0:	81 2f       	mov	r24, r17
     9f2:	0e 94 2f 01 	call	0x25e	; 0x25e <i2c_byte>
     9f6:	83 e0       	ldi	r24, 0x03	; 3
     9f8:	8a 95       	dec	r24
     9fa:	f1 f7       	brne	.-4      	; 0x9f8 <mpu6050_readBytes+0x2c>
     9fc:	00 00       	nop
     9fe:	81 ed       	ldi	r24, 0xD1	; 209
     a00:	0e 94 18 01 	call	0x230	; 0x230 <i2c_start>
     a04:	0d 2f       	mov	r16, r29
     a06:	1c 2f       	mov	r17, r28
     a08:	cc 24       	eor	r12, r12
     a0a:	ca 94       	dec	r12
     a0c:	cf 0c       	add	r12, r15
     a0e:	d1 2c       	mov	r13, r1
     a10:	ef ef       	ldi	r30, 0xFF	; 255
     a12:	ce 1a       	sub	r12, r30
     a14:	de 0a       	sbc	r13, r30
     a16:	c0 e0       	ldi	r28, 0x00	; 0
     a18:	d0 e0       	ldi	r29, 0x00	; 0
     a1a:	af 2c       	mov	r10, r15
     a1c:	b1 2c       	mov	r11, r1
     a1e:	f1 e0       	ldi	r31, 0x01	; 1
     a20:	af 1a       	sub	r10, r31
     a22:	b1 08       	sbc	r11, r1
     a24:	ac 16       	cp	r10, r28
     a26:	bd 06       	cpc	r11, r29
     a28:	29 f4       	brne	.+10     	; 0xa34 <mpu6050_readBytes+0x68>
     a2a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <i2c_readNAck>
     a2e:	f8 01       	movw	r30, r16
     a30:	80 83       	st	Z, r24
     a32:	04 c0       	rjmp	.+8      	; 0xa3c <mpu6050_readBytes+0x70>
     a34:	0e 94 3a 01 	call	0x274	; 0x274 <i2c_readAck>
     a38:	f8 01       	movw	r30, r16
     a3a:	80 83       	st	Z, r24
     a3c:	21 96       	adiw	r28, 0x01	; 1
     a3e:	0f 5f       	subi	r16, 0xFF	; 255
     a40:	1f 4f       	sbci	r17, 0xFF	; 255
     a42:	cc 15       	cp	r28, r12
     a44:	dd 05       	cpc	r29, r13
     a46:	71 f7       	brne	.-36     	; 0xa24 <mpu6050_readBytes+0x58>
     a48:	cf 2d       	mov	r28, r15
     a4a:	0e 94 2b 01 	call	0x256	; 0x256 <i2c_stop>
     a4e:	01 c0       	rjmp	.+2      	; 0xa52 <mpu6050_readBytes+0x86>
     a50:	c0 e0       	ldi	r28, 0x00	; 0
     a52:	8c 2f       	mov	r24, r28
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	1f 91       	pop	r17
     a5a:	0f 91       	pop	r16
     a5c:	ff 90       	pop	r15
     a5e:	df 90       	pop	r13
     a60:	cf 90       	pop	r12
     a62:	bf 90       	pop	r11
     a64:	af 90       	pop	r10
     a66:	08 95       	ret

00000a68 <mpu6050_readByte>:
     a68:	ab 01       	movw	r20, r22
     a6a:	61 e0       	ldi	r22, 0x01	; 1
     a6c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <mpu6050_readBytes>
     a70:	08 95       	ret

00000a72 <mpu6050_writeBytes>:
     a72:	ef 92       	push	r14
     a74:	ff 92       	push	r15
     a76:	0f 93       	push	r16
     a78:	1f 93       	push	r17
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	66 23       	and	r22, r22
     a80:	d1 f0       	breq	.+52     	; 0xab6 <mpu6050_writeBytes+0x44>
     a82:	7a 01       	movw	r14, r20
     a84:	16 2f       	mov	r17, r22
     a86:	c8 2f       	mov	r28, r24
     a88:	80 ed       	ldi	r24, 0xD0	; 208
     a8a:	0e 94 18 01 	call	0x230	; 0x230 <i2c_start>
     a8e:	8c 2f       	mov	r24, r28
     a90:	0e 94 2f 01 	call	0x25e	; 0x25e <i2c_byte>
     a94:	e7 01       	movw	r28, r14
     a96:	6f ef       	ldi	r22, 0xFF	; 255
     a98:	61 0f       	add	r22, r17
     a9a:	06 2f       	mov	r16, r22
     a9c:	10 e0       	ldi	r17, 0x00	; 0
     a9e:	0f 5f       	subi	r16, 0xFF	; 255
     aa0:	1f 4f       	sbci	r17, 0xFF	; 255
     aa2:	0e 0d       	add	r16, r14
     aa4:	1f 1d       	adc	r17, r15
     aa6:	89 91       	ld	r24, Y+
     aa8:	0e 94 2f 01 	call	0x25e	; 0x25e <i2c_byte>
     aac:	c0 17       	cp	r28, r16
     aae:	d1 07       	cpc	r29, r17
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <mpu6050_writeBytes+0x34>
     ab2:	0e 94 2b 01 	call	0x256	; 0x256 <i2c_stop>
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	ff 90       	pop	r15
     ac0:	ef 90       	pop	r14
     ac2:	08 95       	ret

00000ac4 <mpu6050_writeByte>:
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
     ac8:	1f 92       	push	r1
     aca:	cd b7       	in	r28, 0x3d	; 61
     acc:	de b7       	in	r29, 0x3e	; 62
     ace:	69 83       	std	Y+1, r22	; 0x01
     ad0:	ae 01       	movw	r20, r28
     ad2:	4f 5f       	subi	r20, 0xFF	; 255
     ad4:	5f 4f       	sbci	r21, 0xFF	; 255
     ad6:	61 e0       	ldi	r22, 0x01	; 1
     ad8:	0e 94 39 05 	call	0xa72	; 0xa72 <mpu6050_writeBytes>
     adc:	0f 90       	pop	r0
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	08 95       	ret

00000ae4 <mpu6050_writeBits>:
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
     af0:	1f 92       	push	r1
     af2:	cd b7       	in	r28, 0x3d	; 61
     af4:	de b7       	in	r29, 0x3e	; 62
     af6:	44 23       	and	r20, r20
     af8:	89 f1       	breq	.+98     	; 0xb5c <mpu6050_writeBits+0x78>
     afa:	f2 2e       	mov	r15, r18
     afc:	14 2f       	mov	r17, r20
     afe:	06 2f       	mov	r16, r22
     b00:	e8 2e       	mov	r14, r24
     b02:	19 82       	std	Y+1, r1	; 0x01
     b04:	be 01       	movw	r22, r28
     b06:	6f 5f       	subi	r22, 0xFF	; 255
     b08:	7f 4f       	sbci	r23, 0xFF	; 255
     b0a:	0e 94 34 05 	call	0xa68	; 0xa68 <mpu6050_readByte>
     b0e:	88 23       	and	r24, r24
     b10:	29 f1       	breq	.+74     	; 0xb5c <mpu6050_writeBits+0x78>
     b12:	40 2f       	mov	r20, r16
     b14:	50 e0       	ldi	r21, 0x00	; 0
     b16:	41 1b       	sub	r20, r17
     b18:	51 09       	sbc	r21, r1
     b1a:	4f 5f       	subi	r20, 0xFF	; 255
     b1c:	5f 4f       	sbci	r21, 0xFF	; 255
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	02 c0       	rjmp	.+4      	; 0xb28 <mpu6050_writeBits+0x44>
     b24:	88 0f       	add	r24, r24
     b26:	99 1f       	adc	r25, r25
     b28:	1a 95       	dec	r17
     b2a:	e2 f7       	brpl	.-8      	; 0xb24 <mpu6050_writeBits+0x40>
     b2c:	01 97       	sbiw	r24, 0x01	; 1
     b2e:	04 2e       	mov	r0, r20
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <mpu6050_writeBits+0x52>
     b32:	88 0f       	add	r24, r24
     b34:	99 1f       	adc	r25, r25
     b36:	0a 94       	dec	r0
     b38:	e2 f7       	brpl	.-8      	; 0xb32 <mpu6050_writeBits+0x4e>
     b3a:	2f 2d       	mov	r18, r15
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <mpu6050_writeBits+0x60>
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	4a 95       	dec	r20
     b46:	e2 f7       	brpl	.-8      	; 0xb40 <mpu6050_writeBits+0x5c>
     b48:	68 2f       	mov	r22, r24
     b4a:	60 95       	com	r22
     b4c:	99 81       	ldd	r25, Y+1	; 0x01
     b4e:	69 23       	and	r22, r25
     b50:	82 23       	and	r24, r18
     b52:	68 2b       	or	r22, r24
     b54:	69 83       	std	Y+1, r22	; 0x01
     b56:	8e 2d       	mov	r24, r14
     b58:	0e 94 62 05 	call	0xac4	; 0xac4 <mpu6050_writeByte>
     b5c:	0f 90       	pop	r0
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	ff 90       	pop	r15
     b68:	ef 90       	pop	r14
     b6a:	08 95       	ret

00000b6c <mpu6050_writeBit>:
     b6c:	ff 92       	push	r15
     b6e:	0f 93       	push	r16
     b70:	1f 93       	push	r17
     b72:	cf 93       	push	r28
     b74:	df 93       	push	r29
     b76:	1f 92       	push	r1
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
     b7c:	18 2f       	mov	r17, r24
     b7e:	06 2f       	mov	r16, r22
     b80:	f4 2e       	mov	r15, r20
     b82:	be 01       	movw	r22, r28
     b84:	6f 5f       	subi	r22, 0xFF	; 255
     b86:	7f 4f       	sbci	r23, 0xFF	; 255
     b88:	0e 94 34 05 	call	0xa68	; 0xa68 <mpu6050_readByte>
     b8c:	ff 20       	and	r15, r15
     b8e:	51 f0       	breq	.+20     	; 0xba4 <mpu6050_writeBit+0x38>
     b90:	61 e0       	ldi	r22, 0x01	; 1
     b92:	70 e0       	ldi	r23, 0x00	; 0
     b94:	02 c0       	rjmp	.+4      	; 0xb9a <mpu6050_writeBit+0x2e>
     b96:	66 0f       	add	r22, r22
     b98:	77 1f       	adc	r23, r23
     b9a:	0a 95       	dec	r16
     b9c:	e2 f7       	brpl	.-8      	; 0xb96 <mpu6050_writeBit+0x2a>
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	68 2b       	or	r22, r24
     ba2:	0a c0       	rjmp	.+20     	; 0xbb8 <mpu6050_writeBit+0x4c>
     ba4:	61 e0       	ldi	r22, 0x01	; 1
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	02 c0       	rjmp	.+4      	; 0xbae <mpu6050_writeBit+0x42>
     baa:	66 0f       	add	r22, r22
     bac:	77 1f       	adc	r23, r23
     bae:	0a 95       	dec	r16
     bb0:	e2 f7       	brpl	.-8      	; 0xbaa <mpu6050_writeBit+0x3e>
     bb2:	60 95       	com	r22
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
     bb6:	68 23       	and	r22, r24
     bb8:	69 83       	std	Y+1, r22	; 0x01
     bba:	81 2f       	mov	r24, r17
     bbc:	0e 94 62 05 	call	0xac4	; 0xac4 <mpu6050_writeByte>
     bc0:	0f 90       	pop	r0
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	1f 91       	pop	r17
     bc8:	0f 91       	pop	r16
     bca:	ff 90       	pop	r15
     bcc:	08 95       	ret

00000bce <mpu6050_setSleepDisabled>:
     bce:	40 e0       	ldi	r20, 0x00	; 0
     bd0:	66 e0       	ldi	r22, 0x06	; 6
     bd2:	8b e6       	ldi	r24, 0x6B	; 107
     bd4:	0e 94 b6 05 	call	0xb6c	; 0xb6c <mpu6050_writeBit>
     bd8:	08 95       	ret

00000bda <mpu6050_init>:
     bda:	0e 94 0f 01 	call	0x21e	; 0x21e <i2c_init>
     bde:	83 e0       	ldi	r24, 0x03	; 3
     be0:	8a 95       	dec	r24
     be2:	f1 f7       	brne	.-4      	; 0xbe0 <mpu6050_init+0x6>
     be4:	00 00       	nop
     be6:	87 ea       	ldi	r24, 0xA7	; 167
     be8:	91 e6       	ldi	r25, 0x61	; 97
     bea:	01 97       	sbiw	r24, 0x01	; 1
     bec:	f1 f7       	brne	.-4      	; 0xbea <mpu6050_init+0x10>
     bee:	00 c0       	rjmp	.+0      	; 0xbf0 <mpu6050_init+0x16>
     bf0:	00 00       	nop
     bf2:	0e 94 e7 05 	call	0xbce	; 0xbce <mpu6050_setSleepDisabled>
     bf6:	83 ec       	ldi	r24, 0xC3	; 195
     bf8:	99 e0       	ldi	r25, 0x09	; 9
     bfa:	01 97       	sbiw	r24, 0x01	; 1
     bfc:	f1 f7       	brne	.-4      	; 0xbfa <mpu6050_init+0x20>
     bfe:	00 c0       	rjmp	.+0      	; 0xc00 <mpu6050_init+0x26>
     c00:	00 00       	nop
     c02:	21 e0       	ldi	r18, 0x01	; 1
     c04:	43 e0       	ldi	r20, 0x03	; 3
     c06:	62 e0       	ldi	r22, 0x02	; 2
     c08:	8b e6       	ldi	r24, 0x6B	; 107
     c0a:	0e 94 72 05 	call	0xae4	; 0xae4 <mpu6050_writeBits>
     c0e:	23 e0       	ldi	r18, 0x03	; 3
     c10:	43 e0       	ldi	r20, 0x03	; 3
     c12:	62 e0       	ldi	r22, 0x02	; 2
     c14:	8a e1       	ldi	r24, 0x1A	; 26
     c16:	0e 94 72 05 	call	0xae4	; 0xae4 <mpu6050_writeBits>
     c1a:	64 e0       	ldi	r22, 0x04	; 4
     c1c:	89 e1       	ldi	r24, 0x19	; 25
     c1e:	0e 94 62 05 	call	0xac4	; 0xac4 <mpu6050_writeByte>
     c22:	23 e0       	ldi	r18, 0x03	; 3
     c24:	42 e0       	ldi	r20, 0x02	; 2
     c26:	64 e0       	ldi	r22, 0x04	; 4
     c28:	8b e1       	ldi	r24, 0x1B	; 27
     c2a:	0e 94 72 05 	call	0xae4	; 0xae4 <mpu6050_writeBits>
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	42 e0       	ldi	r20, 0x02	; 2
     c32:	64 e0       	ldi	r22, 0x04	; 4
     c34:	8c e1       	ldi	r24, 0x1C	; 28
     c36:	0e 94 72 05 	call	0xae4	; 0xae4 <mpu6050_writeBits>
     c3a:	08 95       	ret

00000c3c <mpu6050_getRawAccelData>:

//can not accept many request if we alreay have getattitude requests
/*
 * get raw accel data including the x y and z axis
 */
void mpu6050_getRawAccelData(int16_t* ax, int16_t* ay, int16_t* az) {
     c3c:	ef 92       	push	r14
     c3e:	ff 92       	push	r15
     c40:	0f 93       	push	r16
     c42:	1f 93       	push	r17
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	7c 01       	movw	r14, r24
     c4a:	8b 01       	movw	r16, r22
     c4c:	ea 01       	movw	r28, r20
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 6, (uint8_t *)buffer);
     c4e:	4f e0       	ldi	r20, 0x0F	; 15
     c50:	55 e0       	ldi	r21, 0x05	; 5
     c52:	66 e0       	ldi	r22, 0x06	; 6
     c54:	8b e3       	ldi	r24, 0x3B	; 59
     c56:	0e 94 e6 04 	call	0x9cc	; 0x9cc <mpu6050_readBytes>

    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
     c5a:	ef e0       	ldi	r30, 0x0F	; 15
     c5c:	f5 e0       	ldi	r31, 0x05	; 5
     c5e:	20 81       	ld	r18, Z
     c60:	81 81       	ldd	r24, Z+1	; 0x01
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	92 2b       	or	r25, r18
     c66:	d7 01       	movw	r26, r14
     c68:	8d 93       	st	X+, r24
     c6a:	9c 93       	st	X, r25
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
     c6c:	22 81       	ldd	r18, Z+2	; 0x02
     c6e:	83 81       	ldd	r24, Z+3	; 0x03
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	92 2b       	or	r25, r18
     c74:	d8 01       	movw	r26, r16
     c76:	8d 93       	st	X+, r24
     c78:	9c 93       	st	X, r25
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
     c7a:	24 81       	ldd	r18, Z+4	; 0x04
     c7c:	85 81       	ldd	r24, Z+5	; 0x05
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	92 2b       	or	r25, r18
     c82:	99 83       	std	Y+1, r25	; 0x01
     c84:	88 83       	st	Y, r24
}
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	1f 91       	pop	r17
     c8c:	0f 91       	pop	r16
     c8e:	ff 90       	pop	r15
     c90:	ef 90       	pop	r14
     c92:	08 95       	ret

00000c94 <mpu6050_getConvAccelData>:

/*
 * get raw accel data  converted to g and deg/sec values
 */
void mpu6050_getConvAccelData(double* axg, double* ayg, double* azg) {
     c94:	cf 92       	push	r12
     c96:	df 92       	push	r13
     c98:	ef 92       	push	r14
     c9a:	ff 92       	push	r15
     c9c:	0f 93       	push	r16
     c9e:	1f 93       	push	r17
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <mpu6050_getConvAccelData+0x12>
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <mpu6050_getConvAccelData+0x14>
     ca8:	00 d0       	rcall	.+0      	; 0xcaa <mpu6050_getConvAccelData+0x16>
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
     cae:	6c 01       	movw	r12, r24
     cb0:	7b 01       	movw	r14, r22
     cb2:	8a 01       	movw	r16, r20
	int16_t ax = 0;
     cb4:	1a 82       	std	Y+2, r1	; 0x02
     cb6:	19 82       	std	Y+1, r1	; 0x01
	int16_t ay = 0;
     cb8:	1c 82       	std	Y+4, r1	; 0x04
     cba:	1b 82       	std	Y+3, r1	; 0x03
	int16_t az = 0;
     cbc:	1e 82       	std	Y+6, r1	; 0x06
     cbe:	1d 82       	std	Y+5, r1	; 0x05
	
	mpu6050_getRawAccelData(&ax, &ay, &az);
     cc0:	ae 01       	movw	r20, r28
     cc2:	4b 5f       	subi	r20, 0xFB	; 251
     cc4:	5f 4f       	sbci	r21, 0xFF	; 255
     cc6:	be 01       	movw	r22, r28
     cc8:	6d 5f       	subi	r22, 0xFD	; 253
     cca:	7f 4f       	sbci	r23, 0xFF	; 255
     ccc:	ce 01       	movw	r24, r28
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	0e 94 1e 06 	call	0xc3c	; 0xc3c <mpu6050_getRawAccelData>

	#if MPU6050_CALIBRATEDACCGYRO == 1
    *axg = (double)(ax-MPU6050_AXOFFSET)/MPU6050_AXGAIN;
     cd4:	69 81       	ldd	r22, Y+1	; 0x01
     cd6:	7a 81       	ldd	r23, Y+2	; 0x02
     cd8:	07 2e       	mov	r0, r23
     cda:	00 0c       	add	r0, r0
     cdc:	88 0b       	sbc	r24, r24
     cde:	99 0b       	sbc	r25, r25
     ce0:	0e 94 38 07 	call	0xe70	; 0xe70 <__floatsisf>
     ce4:	2a e0       	ldi	r18, 0x0A	; 10
     ce6:	37 ed       	ldi	r19, 0xD7	; 215
     ce8:	43 ea       	ldi	r20, 0xA3	; 163
     cea:	5c e3       	ldi	r21, 0x3C	; 60
     cec:	0e 94 c4 06 	call	0xd88	; 0xd88 <__subsf3>
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	40 e8       	ldi	r20, 0x80	; 128
     cf6:	58 e3       	ldi	r21, 0x38	; 56
     cf8:	0e 94 ed 07 	call	0xfda	; 0xfda <__mulsf3>
     cfc:	f6 01       	movw	r30, r12
     cfe:	60 83       	st	Z, r22
     d00:	71 83       	std	Z+1, r23	; 0x01
     d02:	82 83       	std	Z+2, r24	; 0x02
     d04:	93 83       	std	Z+3, r25	; 0x03
    *ayg = (double)(ay-MPU6050_AYOFFSET)/MPU6050_AYGAIN;
     d06:	6b 81       	ldd	r22, Y+3	; 0x03
     d08:	7c 81       	ldd	r23, Y+4	; 0x04
     d0a:	07 2e       	mov	r0, r23
     d0c:	00 0c       	add	r0, r0
     d0e:	88 0b       	sbc	r24, r24
     d10:	99 0b       	sbc	r25, r25
     d12:	0e 94 38 07 	call	0xe70	; 0xe70 <__floatsisf>
     d16:	2d ec       	ldi	r18, 0xCD	; 205
     d18:	3c ec       	ldi	r19, 0xCC	; 204
     d1a:	4c e4       	ldi	r20, 0x4C	; 76
     d1c:	5d e3       	ldi	r21, 0x3D	; 61
     d1e:	0e 94 c4 06 	call	0xd88	; 0xd88 <__subsf3>
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	40 e8       	ldi	r20, 0x80	; 128
     d28:	58 e3       	ldi	r21, 0x38	; 56
     d2a:	0e 94 ed 07 	call	0xfda	; 0xfda <__mulsf3>
     d2e:	f7 01       	movw	r30, r14
     d30:	60 83       	st	Z, r22
     d32:	71 83       	std	Z+1, r23	; 0x01
     d34:	82 83       	std	Z+2, r24	; 0x02
     d36:	93 83       	std	Z+3, r25	; 0x03
    *azg = (double)(az-MPU6050_AZOFFSET)/MPU6050_AZGAIN;
     d38:	6d 81       	ldd	r22, Y+5	; 0x05
     d3a:	7e 81       	ldd	r23, Y+6	; 0x06
     d3c:	07 2e       	mov	r0, r23
     d3e:	00 0c       	add	r0, r0
     d40:	88 0b       	sbc	r24, r24
     d42:	99 0b       	sbc	r25, r25
     d44:	0e 94 38 07 	call	0xe70	; 0xe70 <__floatsisf>
     d48:	2d ec       	ldi	r18, 0xCD	; 205
     d4a:	3c ec       	ldi	r19, 0xCC	; 204
     d4c:	4c e4       	ldi	r20, 0x4C	; 76
     d4e:	5e e3       	ldi	r21, 0x3E	; 62
     d50:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__addsf3>
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	40 e8       	ldi	r20, 0x80	; 128
     d5a:	58 e3       	ldi	r21, 0x38	; 56
     d5c:	0e 94 ed 07 	call	0xfda	; 0xfda <__mulsf3>
     d60:	f8 01       	movw	r30, r16
     d62:	60 83       	st	Z, r22
     d64:	71 83       	std	Z+1, r23	; 0x01
     d66:	82 83       	std	Z+2, r24	; 0x02
     d68:	93 83       	std	Z+3, r25	; 0x03
	#else
    *axg = (double)(ax)/MPU6050_AGAIN;
    *ayg = (double)(ay)/MPU6050_AGAIN;
    *azg = (double)(az)/MPU6050_AGAIN;
 	#endif
}
     d6a:	26 96       	adiw	r28, 0x06	; 6
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	f8 94       	cli
     d70:	de bf       	out	0x3e, r29	; 62
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	cd bf       	out	0x3d, r28	; 61
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	ff 90       	pop	r15
     d80:	ef 90       	pop	r14
     d82:	df 90       	pop	r13
     d84:	cf 90       	pop	r12
     d86:	08 95       	ret

00000d88 <__subsf3>:
     d88:	50 58       	subi	r21, 0x80	; 128

00000d8a <__addsf3>:
     d8a:	bb 27       	eor	r27, r27
     d8c:	aa 27       	eor	r26, r26
     d8e:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__addsf3x>
     d92:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <__fp_round>
     d96:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fp_pscA>
     d9a:	38 f0       	brcs	.+14     	; 0xdaa <__addsf3+0x20>
     d9c:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fp_pscB>
     da0:	20 f0       	brcs	.+8      	; 0xdaa <__addsf3+0x20>
     da2:	39 f4       	brne	.+14     	; 0xdb2 <__addsf3+0x28>
     da4:	9f 3f       	cpi	r25, 0xFF	; 255
     da6:	19 f4       	brne	.+6      	; 0xdae <__addsf3+0x24>
     da8:	26 f4       	brtc	.+8      	; 0xdb2 <__addsf3+0x28>
     daa:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__fp_nan>
     dae:	0e f4       	brtc	.+2      	; 0xdb2 <__addsf3+0x28>
     db0:	e0 95       	com	r30
     db2:	e7 fb       	bst	r30, 7
     db4:	0c 94 97 07 	jmp	0xf2e	; 0xf2e <__fp_inf>

00000db8 <__addsf3x>:
     db8:	e9 2f       	mov	r30, r25
     dba:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__fp_split3>
     dbe:	58 f3       	brcs	.-42     	; 0xd96 <__addsf3+0xc>
     dc0:	ba 17       	cp	r27, r26
     dc2:	62 07       	cpc	r22, r18
     dc4:	73 07       	cpc	r23, r19
     dc6:	84 07       	cpc	r24, r20
     dc8:	95 07       	cpc	r25, r21
     dca:	20 f0       	brcs	.+8      	; 0xdd4 <__addsf3x+0x1c>
     dcc:	79 f4       	brne	.+30     	; 0xdec <__addsf3x+0x34>
     dce:	a6 f5       	brtc	.+104    	; 0xe38 <__addsf3x+0x80>
     dd0:	0c 94 e1 07 	jmp	0xfc2	; 0xfc2 <__fp_zero>
     dd4:	0e f4       	brtc	.+2      	; 0xdd8 <__addsf3x+0x20>
     dd6:	e0 95       	com	r30
     dd8:	0b 2e       	mov	r0, r27
     dda:	ba 2f       	mov	r27, r26
     ddc:	a0 2d       	mov	r26, r0
     dde:	0b 01       	movw	r0, r22
     de0:	b9 01       	movw	r22, r18
     de2:	90 01       	movw	r18, r0
     de4:	0c 01       	movw	r0, r24
     de6:	ca 01       	movw	r24, r20
     de8:	a0 01       	movw	r20, r0
     dea:	11 24       	eor	r1, r1
     dec:	ff 27       	eor	r31, r31
     dee:	59 1b       	sub	r21, r25
     df0:	99 f0       	breq	.+38     	; 0xe18 <__addsf3x+0x60>
     df2:	59 3f       	cpi	r21, 0xF9	; 249
     df4:	50 f4       	brcc	.+20     	; 0xe0a <__addsf3x+0x52>
     df6:	50 3e       	cpi	r21, 0xE0	; 224
     df8:	68 f1       	brcs	.+90     	; 0xe54 <__addsf3x+0x9c>
     dfa:	1a 16       	cp	r1, r26
     dfc:	f0 40       	sbci	r31, 0x00	; 0
     dfe:	a2 2f       	mov	r26, r18
     e00:	23 2f       	mov	r18, r19
     e02:	34 2f       	mov	r19, r20
     e04:	44 27       	eor	r20, r20
     e06:	58 5f       	subi	r21, 0xF8	; 248
     e08:	f3 cf       	rjmp	.-26     	; 0xdf0 <__addsf3x+0x38>
     e0a:	46 95       	lsr	r20
     e0c:	37 95       	ror	r19
     e0e:	27 95       	ror	r18
     e10:	a7 95       	ror	r26
     e12:	f0 40       	sbci	r31, 0x00	; 0
     e14:	53 95       	inc	r21
     e16:	c9 f7       	brne	.-14     	; 0xe0a <__addsf3x+0x52>
     e18:	7e f4       	brtc	.+30     	; 0xe38 <__addsf3x+0x80>
     e1a:	1f 16       	cp	r1, r31
     e1c:	ba 0b       	sbc	r27, r26
     e1e:	62 0b       	sbc	r22, r18
     e20:	73 0b       	sbc	r23, r19
     e22:	84 0b       	sbc	r24, r20
     e24:	ba f0       	brmi	.+46     	; 0xe54 <__addsf3x+0x9c>
     e26:	91 50       	subi	r25, 0x01	; 1
     e28:	a1 f0       	breq	.+40     	; 0xe52 <__addsf3x+0x9a>
     e2a:	ff 0f       	add	r31, r31
     e2c:	bb 1f       	adc	r27, r27
     e2e:	66 1f       	adc	r22, r22
     e30:	77 1f       	adc	r23, r23
     e32:	88 1f       	adc	r24, r24
     e34:	c2 f7       	brpl	.-16     	; 0xe26 <__addsf3x+0x6e>
     e36:	0e c0       	rjmp	.+28     	; 0xe54 <__addsf3x+0x9c>
     e38:	ba 0f       	add	r27, r26
     e3a:	62 1f       	adc	r22, r18
     e3c:	73 1f       	adc	r23, r19
     e3e:	84 1f       	adc	r24, r20
     e40:	48 f4       	brcc	.+18     	; 0xe54 <__addsf3x+0x9c>
     e42:	87 95       	ror	r24
     e44:	77 95       	ror	r23
     e46:	67 95       	ror	r22
     e48:	b7 95       	ror	r27
     e4a:	f7 95       	ror	r31
     e4c:	9e 3f       	cpi	r25, 0xFE	; 254
     e4e:	08 f0       	brcs	.+2      	; 0xe52 <__addsf3x+0x9a>
     e50:	b0 cf       	rjmp	.-160    	; 0xdb2 <__addsf3+0x28>
     e52:	93 95       	inc	r25
     e54:	88 0f       	add	r24, r24
     e56:	08 f0       	brcs	.+2      	; 0xe5a <__addsf3x+0xa2>
     e58:	99 27       	eor	r25, r25
     e5a:	ee 0f       	add	r30, r30
     e5c:	97 95       	ror	r25
     e5e:	87 95       	ror	r24
     e60:	08 95       	ret

00000e62 <__cmpsf2>:
     e62:	0e 94 73 07 	call	0xee6	; 0xee6 <__fp_cmp>
     e66:	08 f4       	brcc	.+2      	; 0xe6a <__cmpsf2+0x8>
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	08 95       	ret

00000e6c <__floatunsisf>:
     e6c:	e8 94       	clt
     e6e:	09 c0       	rjmp	.+18     	; 0xe82 <__floatsisf+0x12>

00000e70 <__floatsisf>:
     e70:	97 fb       	bst	r25, 7
     e72:	3e f4       	brtc	.+14     	; 0xe82 <__floatsisf+0x12>
     e74:	90 95       	com	r25
     e76:	80 95       	com	r24
     e78:	70 95       	com	r23
     e7a:	61 95       	neg	r22
     e7c:	7f 4f       	sbci	r23, 0xFF	; 255
     e7e:	8f 4f       	sbci	r24, 0xFF	; 255
     e80:	9f 4f       	sbci	r25, 0xFF	; 255
     e82:	99 23       	and	r25, r25
     e84:	a9 f0       	breq	.+42     	; 0xeb0 <__floatsisf+0x40>
     e86:	f9 2f       	mov	r31, r25
     e88:	96 e9       	ldi	r25, 0x96	; 150
     e8a:	bb 27       	eor	r27, r27
     e8c:	93 95       	inc	r25
     e8e:	f6 95       	lsr	r31
     e90:	87 95       	ror	r24
     e92:	77 95       	ror	r23
     e94:	67 95       	ror	r22
     e96:	b7 95       	ror	r27
     e98:	f1 11       	cpse	r31, r1
     e9a:	f8 cf       	rjmp	.-16     	; 0xe8c <__floatsisf+0x1c>
     e9c:	fa f4       	brpl	.+62     	; 0xedc <__floatsisf+0x6c>
     e9e:	bb 0f       	add	r27, r27
     ea0:	11 f4       	brne	.+4      	; 0xea6 <__floatsisf+0x36>
     ea2:	60 ff       	sbrs	r22, 0
     ea4:	1b c0       	rjmp	.+54     	; 0xedc <__floatsisf+0x6c>
     ea6:	6f 5f       	subi	r22, 0xFF	; 255
     ea8:	7f 4f       	sbci	r23, 0xFF	; 255
     eaa:	8f 4f       	sbci	r24, 0xFF	; 255
     eac:	9f 4f       	sbci	r25, 0xFF	; 255
     eae:	16 c0       	rjmp	.+44     	; 0xedc <__floatsisf+0x6c>
     eb0:	88 23       	and	r24, r24
     eb2:	11 f0       	breq	.+4      	; 0xeb8 <__floatsisf+0x48>
     eb4:	96 e9       	ldi	r25, 0x96	; 150
     eb6:	11 c0       	rjmp	.+34     	; 0xeda <__floatsisf+0x6a>
     eb8:	77 23       	and	r23, r23
     eba:	21 f0       	breq	.+8      	; 0xec4 <__floatsisf+0x54>
     ebc:	9e e8       	ldi	r25, 0x8E	; 142
     ebe:	87 2f       	mov	r24, r23
     ec0:	76 2f       	mov	r23, r22
     ec2:	05 c0       	rjmp	.+10     	; 0xece <__floatsisf+0x5e>
     ec4:	66 23       	and	r22, r22
     ec6:	71 f0       	breq	.+28     	; 0xee4 <__floatsisf+0x74>
     ec8:	96 e8       	ldi	r25, 0x86	; 134
     eca:	86 2f       	mov	r24, r22
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	60 e0       	ldi	r22, 0x00	; 0
     ed0:	2a f0       	brmi	.+10     	; 0xedc <__floatsisf+0x6c>
     ed2:	9a 95       	dec	r25
     ed4:	66 0f       	add	r22, r22
     ed6:	77 1f       	adc	r23, r23
     ed8:	88 1f       	adc	r24, r24
     eda:	da f7       	brpl	.-10     	; 0xed2 <__floatsisf+0x62>
     edc:	88 0f       	add	r24, r24
     ede:	96 95       	lsr	r25
     ee0:	87 95       	ror	r24
     ee2:	97 f9       	bld	r25, 7
     ee4:	08 95       	ret

00000ee6 <__fp_cmp>:
     ee6:	99 0f       	add	r25, r25
     ee8:	00 08       	sbc	r0, r0
     eea:	55 0f       	add	r21, r21
     eec:	aa 0b       	sbc	r26, r26
     eee:	e0 e8       	ldi	r30, 0x80	; 128
     ef0:	fe ef       	ldi	r31, 0xFE	; 254
     ef2:	16 16       	cp	r1, r22
     ef4:	17 06       	cpc	r1, r23
     ef6:	e8 07       	cpc	r30, r24
     ef8:	f9 07       	cpc	r31, r25
     efa:	c0 f0       	brcs	.+48     	; 0xf2c <__fp_cmp+0x46>
     efc:	12 16       	cp	r1, r18
     efe:	13 06       	cpc	r1, r19
     f00:	e4 07       	cpc	r30, r20
     f02:	f5 07       	cpc	r31, r21
     f04:	98 f0       	brcs	.+38     	; 0xf2c <__fp_cmp+0x46>
     f06:	62 1b       	sub	r22, r18
     f08:	73 0b       	sbc	r23, r19
     f0a:	84 0b       	sbc	r24, r20
     f0c:	95 0b       	sbc	r25, r21
     f0e:	39 f4       	brne	.+14     	; 0xf1e <__fp_cmp+0x38>
     f10:	0a 26       	eor	r0, r26
     f12:	61 f0       	breq	.+24     	; 0xf2c <__fp_cmp+0x46>
     f14:	23 2b       	or	r18, r19
     f16:	24 2b       	or	r18, r20
     f18:	25 2b       	or	r18, r21
     f1a:	21 f4       	brne	.+8      	; 0xf24 <__fp_cmp+0x3e>
     f1c:	08 95       	ret
     f1e:	0a 26       	eor	r0, r26
     f20:	09 f4       	brne	.+2      	; 0xf24 <__fp_cmp+0x3e>
     f22:	a1 40       	sbci	r26, 0x01	; 1
     f24:	a6 95       	lsr	r26
     f26:	8f ef       	ldi	r24, 0xFF	; 255
     f28:	81 1d       	adc	r24, r1
     f2a:	81 1d       	adc	r24, r1
     f2c:	08 95       	ret

00000f2e <__fp_inf>:
     f2e:	97 f9       	bld	r25, 7
     f30:	9f 67       	ori	r25, 0x7F	; 127
     f32:	80 e8       	ldi	r24, 0x80	; 128
     f34:	70 e0       	ldi	r23, 0x00	; 0
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	08 95       	ret

00000f3a <__fp_nan>:
     f3a:	9f ef       	ldi	r25, 0xFF	; 255
     f3c:	80 ec       	ldi	r24, 0xC0	; 192
     f3e:	08 95       	ret

00000f40 <__fp_pscA>:
     f40:	00 24       	eor	r0, r0
     f42:	0a 94       	dec	r0
     f44:	16 16       	cp	r1, r22
     f46:	17 06       	cpc	r1, r23
     f48:	18 06       	cpc	r1, r24
     f4a:	09 06       	cpc	r0, r25
     f4c:	08 95       	ret

00000f4e <__fp_pscB>:
     f4e:	00 24       	eor	r0, r0
     f50:	0a 94       	dec	r0
     f52:	12 16       	cp	r1, r18
     f54:	13 06       	cpc	r1, r19
     f56:	14 06       	cpc	r1, r20
     f58:	05 06       	cpc	r0, r21
     f5a:	08 95       	ret

00000f5c <__fp_round>:
     f5c:	09 2e       	mov	r0, r25
     f5e:	03 94       	inc	r0
     f60:	00 0c       	add	r0, r0
     f62:	11 f4       	brne	.+4      	; 0xf68 <__fp_round+0xc>
     f64:	88 23       	and	r24, r24
     f66:	52 f0       	brmi	.+20     	; 0xf7c <__fp_round+0x20>
     f68:	bb 0f       	add	r27, r27
     f6a:	40 f4       	brcc	.+16     	; 0xf7c <__fp_round+0x20>
     f6c:	bf 2b       	or	r27, r31
     f6e:	11 f4       	brne	.+4      	; 0xf74 <__fp_round+0x18>
     f70:	60 ff       	sbrs	r22, 0
     f72:	04 c0       	rjmp	.+8      	; 0xf7c <__fp_round+0x20>
     f74:	6f 5f       	subi	r22, 0xFF	; 255
     f76:	7f 4f       	sbci	r23, 0xFF	; 255
     f78:	8f 4f       	sbci	r24, 0xFF	; 255
     f7a:	9f 4f       	sbci	r25, 0xFF	; 255
     f7c:	08 95       	ret

00000f7e <__fp_split3>:
     f7e:	57 fd       	sbrc	r21, 7
     f80:	90 58       	subi	r25, 0x80	; 128
     f82:	44 0f       	add	r20, r20
     f84:	55 1f       	adc	r21, r21
     f86:	59 f0       	breq	.+22     	; 0xf9e <__fp_splitA+0x10>
     f88:	5f 3f       	cpi	r21, 0xFF	; 255
     f8a:	71 f0       	breq	.+28     	; 0xfa8 <__fp_splitA+0x1a>
     f8c:	47 95       	ror	r20

00000f8e <__fp_splitA>:
     f8e:	88 0f       	add	r24, r24
     f90:	97 fb       	bst	r25, 7
     f92:	99 1f       	adc	r25, r25
     f94:	61 f0       	breq	.+24     	; 0xfae <__fp_splitA+0x20>
     f96:	9f 3f       	cpi	r25, 0xFF	; 255
     f98:	79 f0       	breq	.+30     	; 0xfb8 <__fp_splitA+0x2a>
     f9a:	87 95       	ror	r24
     f9c:	08 95       	ret
     f9e:	12 16       	cp	r1, r18
     fa0:	13 06       	cpc	r1, r19
     fa2:	14 06       	cpc	r1, r20
     fa4:	55 1f       	adc	r21, r21
     fa6:	f2 cf       	rjmp	.-28     	; 0xf8c <__fp_split3+0xe>
     fa8:	46 95       	lsr	r20
     faa:	f1 df       	rcall	.-30     	; 0xf8e <__fp_splitA>
     fac:	08 c0       	rjmp	.+16     	; 0xfbe <__fp_splitA+0x30>
     fae:	16 16       	cp	r1, r22
     fb0:	17 06       	cpc	r1, r23
     fb2:	18 06       	cpc	r1, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	f1 cf       	rjmp	.-30     	; 0xf9a <__fp_splitA+0xc>
     fb8:	86 95       	lsr	r24
     fba:	71 05       	cpc	r23, r1
     fbc:	61 05       	cpc	r22, r1
     fbe:	08 94       	sec
     fc0:	08 95       	ret

00000fc2 <__fp_zero>:
     fc2:	e8 94       	clt

00000fc4 <__fp_szero>:
     fc4:	bb 27       	eor	r27, r27
     fc6:	66 27       	eor	r22, r22
     fc8:	77 27       	eor	r23, r23
     fca:	cb 01       	movw	r24, r22
     fcc:	97 f9       	bld	r25, 7
     fce:	08 95       	ret

00000fd0 <__gesf2>:
     fd0:	0e 94 73 07 	call	0xee6	; 0xee6 <__fp_cmp>
     fd4:	08 f4       	brcc	.+2      	; 0xfd8 <__gesf2+0x8>
     fd6:	8f ef       	ldi	r24, 0xFF	; 255
     fd8:	08 95       	ret

00000fda <__mulsf3>:
     fda:	0e 94 00 08 	call	0x1000	; 0x1000 <__mulsf3x>
     fde:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <__fp_round>
     fe2:	0e 94 a0 07 	call	0xf40	; 0xf40 <__fp_pscA>
     fe6:	38 f0       	brcs	.+14     	; 0xff6 <__mulsf3+0x1c>
     fe8:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fp_pscB>
     fec:	20 f0       	brcs	.+8      	; 0xff6 <__mulsf3+0x1c>
     fee:	95 23       	and	r25, r21
     ff0:	11 f0       	breq	.+4      	; 0xff6 <__mulsf3+0x1c>
     ff2:	0c 94 97 07 	jmp	0xf2e	; 0xf2e <__fp_inf>
     ff6:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__fp_nan>
     ffa:	11 24       	eor	r1, r1
     ffc:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <__fp_szero>

00001000 <__mulsf3x>:
    1000:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__fp_split3>
    1004:	70 f3       	brcs	.-36     	; 0xfe2 <__mulsf3+0x8>

00001006 <__mulsf3_pse>:
    1006:	95 9f       	mul	r25, r21
    1008:	c1 f3       	breq	.-16     	; 0xffa <__mulsf3+0x20>
    100a:	95 0f       	add	r25, r21
    100c:	50 e0       	ldi	r21, 0x00	; 0
    100e:	55 1f       	adc	r21, r21
    1010:	62 9f       	mul	r22, r18
    1012:	f0 01       	movw	r30, r0
    1014:	72 9f       	mul	r23, r18
    1016:	bb 27       	eor	r27, r27
    1018:	f0 0d       	add	r31, r0
    101a:	b1 1d       	adc	r27, r1
    101c:	63 9f       	mul	r22, r19
    101e:	aa 27       	eor	r26, r26
    1020:	f0 0d       	add	r31, r0
    1022:	b1 1d       	adc	r27, r1
    1024:	aa 1f       	adc	r26, r26
    1026:	64 9f       	mul	r22, r20
    1028:	66 27       	eor	r22, r22
    102a:	b0 0d       	add	r27, r0
    102c:	a1 1d       	adc	r26, r1
    102e:	66 1f       	adc	r22, r22
    1030:	82 9f       	mul	r24, r18
    1032:	22 27       	eor	r18, r18
    1034:	b0 0d       	add	r27, r0
    1036:	a1 1d       	adc	r26, r1
    1038:	62 1f       	adc	r22, r18
    103a:	73 9f       	mul	r23, r19
    103c:	b0 0d       	add	r27, r0
    103e:	a1 1d       	adc	r26, r1
    1040:	62 1f       	adc	r22, r18
    1042:	83 9f       	mul	r24, r19
    1044:	a0 0d       	add	r26, r0
    1046:	61 1d       	adc	r22, r1
    1048:	22 1f       	adc	r18, r18
    104a:	74 9f       	mul	r23, r20
    104c:	33 27       	eor	r19, r19
    104e:	a0 0d       	add	r26, r0
    1050:	61 1d       	adc	r22, r1
    1052:	23 1f       	adc	r18, r19
    1054:	84 9f       	mul	r24, r20
    1056:	60 0d       	add	r22, r0
    1058:	21 1d       	adc	r18, r1
    105a:	82 2f       	mov	r24, r18
    105c:	76 2f       	mov	r23, r22
    105e:	6a 2f       	mov	r22, r26
    1060:	11 24       	eor	r1, r1
    1062:	9f 57       	subi	r25, 0x7F	; 127
    1064:	50 40       	sbci	r21, 0x00	; 0
    1066:	9a f0       	brmi	.+38     	; 0x108e <__mulsf3_pse+0x88>
    1068:	f1 f0       	breq	.+60     	; 0x10a6 <__mulsf3_pse+0xa0>
    106a:	88 23       	and	r24, r24
    106c:	4a f0       	brmi	.+18     	; 0x1080 <__mulsf3_pse+0x7a>
    106e:	ee 0f       	add	r30, r30
    1070:	ff 1f       	adc	r31, r31
    1072:	bb 1f       	adc	r27, r27
    1074:	66 1f       	adc	r22, r22
    1076:	77 1f       	adc	r23, r23
    1078:	88 1f       	adc	r24, r24
    107a:	91 50       	subi	r25, 0x01	; 1
    107c:	50 40       	sbci	r21, 0x00	; 0
    107e:	a9 f7       	brne	.-22     	; 0x106a <__mulsf3_pse+0x64>
    1080:	9e 3f       	cpi	r25, 0xFE	; 254
    1082:	51 05       	cpc	r21, r1
    1084:	80 f0       	brcs	.+32     	; 0x10a6 <__mulsf3_pse+0xa0>
    1086:	0c 94 97 07 	jmp	0xf2e	; 0xf2e <__fp_inf>
    108a:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <__fp_szero>
    108e:	5f 3f       	cpi	r21, 0xFF	; 255
    1090:	e4 f3       	brlt	.-8      	; 0x108a <__mulsf3_pse+0x84>
    1092:	98 3e       	cpi	r25, 0xE8	; 232
    1094:	d4 f3       	brlt	.-12     	; 0x108a <__mulsf3_pse+0x84>
    1096:	86 95       	lsr	r24
    1098:	77 95       	ror	r23
    109a:	67 95       	ror	r22
    109c:	b7 95       	ror	r27
    109e:	f7 95       	ror	r31
    10a0:	e7 95       	ror	r30
    10a2:	9f 5f       	subi	r25, 0xFF	; 255
    10a4:	c1 f7       	brne	.-16     	; 0x1096 <__mulsf3_pse+0x90>
    10a6:	fe 2b       	or	r31, r30
    10a8:	88 0f       	add	r24, r24
    10aa:	91 1d       	adc	r25, r1
    10ac:	96 95       	lsr	r25
    10ae:	87 95       	ror	r24
    10b0:	97 f9       	bld	r25, 7
    10b2:	08 95       	ret

000010b4 <__tablejump2__>:
    10b4:	ee 0f       	add	r30, r30
    10b6:	ff 1f       	adc	r31, r31
    10b8:	05 90       	lpm	r0, Z+
    10ba:	f4 91       	lpm	r31, Z
    10bc:	e0 2d       	mov	r30, r0
    10be:	09 94       	ijmp

000010c0 <dtostrf>:
    10c0:	ef 92       	push	r14
    10c2:	0f 93       	push	r16
    10c4:	1f 93       	push	r17
    10c6:	cf 93       	push	r28
    10c8:	df 93       	push	r29
    10ca:	e8 01       	movw	r28, r16
    10cc:	47 fd       	sbrc	r20, 7
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <dtostrf+0x14>
    10d0:	34 e0       	ldi	r19, 0x04	; 4
    10d2:	01 c0       	rjmp	.+2      	; 0x10d6 <dtostrf+0x16>
    10d4:	34 e1       	ldi	r19, 0x14	; 20
    10d6:	04 2e       	mov	r0, r20
    10d8:	00 0c       	add	r0, r0
    10da:	55 0b       	sbc	r21, r21
    10dc:	57 ff       	sbrs	r21, 7
    10de:	03 c0       	rjmp	.+6      	; 0x10e6 <dtostrf+0x26>
    10e0:	51 95       	neg	r21
    10e2:	41 95       	neg	r20
    10e4:	51 09       	sbc	r21, r1
    10e6:	e3 2e       	mov	r14, r19
    10e8:	02 2f       	mov	r16, r18
    10ea:	24 2f       	mov	r18, r20
    10ec:	ae 01       	movw	r20, r28
    10ee:	0e 94 80 08 	call	0x1100	; 0x1100 <dtoa_prf>
    10f2:	ce 01       	movw	r24, r28
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	1f 91       	pop	r17
    10fa:	0f 91       	pop	r16
    10fc:	ef 90       	pop	r14
    10fe:	08 95       	ret

00001100 <dtoa_prf>:
    1100:	a9 e0       	ldi	r26, 0x09	; 9
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e6 e8       	ldi	r30, 0x86	; 134
    1106:	f8 e0       	ldi	r31, 0x08	; 8
    1108:	0c 94 b8 0a 	jmp	0x1570	; 0x1570 <__prologue_saves__+0xc>
    110c:	6a 01       	movw	r12, r20
    110e:	12 2f       	mov	r17, r18
    1110:	b0 2e       	mov	r11, r16
    1112:	2b e3       	ldi	r18, 0x3B	; 59
    1114:	20 17       	cp	r18, r16
    1116:	20 f0       	brcs	.+8      	; 0x1120 <dtoa_prf+0x20>
    1118:	ff 24       	eor	r15, r15
    111a:	f3 94       	inc	r15
    111c:	f0 0e       	add	r15, r16
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <dtoa_prf+0x24>
    1120:	2c e3       	ldi	r18, 0x3C	; 60
    1122:	f2 2e       	mov	r15, r18
    1124:	0f 2d       	mov	r16, r15
    1126:	27 e0       	ldi	r18, 0x07	; 7
    1128:	ae 01       	movw	r20, r28
    112a:	4f 5f       	subi	r20, 0xFF	; 255
    112c:	5f 4f       	sbci	r21, 0xFF	; 255
    112e:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__ftoa_engine>
    1132:	bc 01       	movw	r22, r24
    1134:	49 81       	ldd	r20, Y+1	; 0x01
    1136:	84 2f       	mov	r24, r20
    1138:	89 70       	andi	r24, 0x09	; 9
    113a:	81 30       	cpi	r24, 0x01	; 1
    113c:	31 f0       	breq	.+12     	; 0x114a <dtoa_prf+0x4a>
    113e:	e1 fc       	sbrc	r14, 1
    1140:	06 c0       	rjmp	.+12     	; 0x114e <dtoa_prf+0x4e>
    1142:	e0 fe       	sbrs	r14, 0
    1144:	06 c0       	rjmp	.+12     	; 0x1152 <dtoa_prf+0x52>
    1146:	90 e2       	ldi	r25, 0x20	; 32
    1148:	05 c0       	rjmp	.+10     	; 0x1154 <dtoa_prf+0x54>
    114a:	9d e2       	ldi	r25, 0x2D	; 45
    114c:	03 c0       	rjmp	.+6      	; 0x1154 <dtoa_prf+0x54>
    114e:	9b e2       	ldi	r25, 0x2B	; 43
    1150:	01 c0       	rjmp	.+2      	; 0x1154 <dtoa_prf+0x54>
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	5e 2d       	mov	r21, r14
    1156:	50 71       	andi	r21, 0x10	; 16
    1158:	43 ff       	sbrs	r20, 3
    115a:	3c c0       	rjmp	.+120    	; 0x11d4 <dtoa_prf+0xd4>
    115c:	91 11       	cpse	r25, r1
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <dtoa_prf+0x64>
    1160:	83 e0       	ldi	r24, 0x03	; 3
    1162:	01 c0       	rjmp	.+2      	; 0x1166 <dtoa_prf+0x66>
    1164:	84 e0       	ldi	r24, 0x04	; 4
    1166:	81 17       	cp	r24, r17
    1168:	18 f4       	brcc	.+6      	; 0x1170 <dtoa_prf+0x70>
    116a:	21 2f       	mov	r18, r17
    116c:	28 1b       	sub	r18, r24
    116e:	01 c0       	rjmp	.+2      	; 0x1172 <dtoa_prf+0x72>
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	51 11       	cpse	r21, r1
    1174:	0b c0       	rjmp	.+22     	; 0x118c <dtoa_prf+0x8c>
    1176:	f6 01       	movw	r30, r12
    1178:	82 2f       	mov	r24, r18
    117a:	30 e2       	ldi	r19, 0x20	; 32
    117c:	88 23       	and	r24, r24
    117e:	19 f0       	breq	.+6      	; 0x1186 <dtoa_prf+0x86>
    1180:	31 93       	st	Z+, r19
    1182:	81 50       	subi	r24, 0x01	; 1
    1184:	fb cf       	rjmp	.-10     	; 0x117c <dtoa_prf+0x7c>
    1186:	c2 0e       	add	r12, r18
    1188:	d1 1c       	adc	r13, r1
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	99 23       	and	r25, r25
    118e:	29 f0       	breq	.+10     	; 0x119a <dtoa_prf+0x9a>
    1190:	d6 01       	movw	r26, r12
    1192:	9c 93       	st	X, r25
    1194:	f6 01       	movw	r30, r12
    1196:	31 96       	adiw	r30, 0x01	; 1
    1198:	6f 01       	movw	r12, r30
    119a:	c6 01       	movw	r24, r12
    119c:	03 96       	adiw	r24, 0x03	; 3
    119e:	e2 fe       	sbrs	r14, 2
    11a0:	0a c0       	rjmp	.+20     	; 0x11b6 <dtoa_prf+0xb6>
    11a2:	3e e4       	ldi	r19, 0x4E	; 78
    11a4:	d6 01       	movw	r26, r12
    11a6:	3c 93       	st	X, r19
    11a8:	41 e4       	ldi	r20, 0x41	; 65
    11aa:	11 96       	adiw	r26, 0x01	; 1
    11ac:	4c 93       	st	X, r20
    11ae:	11 97       	sbiw	r26, 0x01	; 1
    11b0:	12 96       	adiw	r26, 0x02	; 2
    11b2:	3c 93       	st	X, r19
    11b4:	06 c0       	rjmp	.+12     	; 0x11c2 <dtoa_prf+0xc2>
    11b6:	3e e6       	ldi	r19, 0x6E	; 110
    11b8:	f6 01       	movw	r30, r12
    11ba:	30 83       	st	Z, r19
    11bc:	41 e6       	ldi	r20, 0x61	; 97
    11be:	41 83       	std	Z+1, r20	; 0x01
    11c0:	32 83       	std	Z+2, r19	; 0x02
    11c2:	fc 01       	movw	r30, r24
    11c4:	32 2f       	mov	r19, r18
    11c6:	40 e2       	ldi	r20, 0x20	; 32
    11c8:	33 23       	and	r19, r19
    11ca:	09 f4       	brne	.+2      	; 0x11ce <dtoa_prf+0xce>
    11cc:	42 c0       	rjmp	.+132    	; 0x1252 <dtoa_prf+0x152>
    11ce:	41 93       	st	Z+, r20
    11d0:	31 50       	subi	r19, 0x01	; 1
    11d2:	fa cf       	rjmp	.-12     	; 0x11c8 <dtoa_prf+0xc8>
    11d4:	42 ff       	sbrs	r20, 2
    11d6:	44 c0       	rjmp	.+136    	; 0x1260 <dtoa_prf+0x160>
    11d8:	91 11       	cpse	r25, r1
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <dtoa_prf+0xe0>
    11dc:	83 e0       	ldi	r24, 0x03	; 3
    11de:	01 c0       	rjmp	.+2      	; 0x11e2 <dtoa_prf+0xe2>
    11e0:	84 e0       	ldi	r24, 0x04	; 4
    11e2:	81 17       	cp	r24, r17
    11e4:	18 f4       	brcc	.+6      	; 0x11ec <dtoa_prf+0xec>
    11e6:	21 2f       	mov	r18, r17
    11e8:	28 1b       	sub	r18, r24
    11ea:	01 c0       	rjmp	.+2      	; 0x11ee <dtoa_prf+0xee>
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	51 11       	cpse	r21, r1
    11f0:	0b c0       	rjmp	.+22     	; 0x1208 <dtoa_prf+0x108>
    11f2:	f6 01       	movw	r30, r12
    11f4:	82 2f       	mov	r24, r18
    11f6:	30 e2       	ldi	r19, 0x20	; 32
    11f8:	88 23       	and	r24, r24
    11fa:	19 f0       	breq	.+6      	; 0x1202 <dtoa_prf+0x102>
    11fc:	31 93       	st	Z+, r19
    11fe:	81 50       	subi	r24, 0x01	; 1
    1200:	fb cf       	rjmp	.-10     	; 0x11f8 <dtoa_prf+0xf8>
    1202:	c2 0e       	add	r12, r18
    1204:	d1 1c       	adc	r13, r1
    1206:	20 e0       	ldi	r18, 0x00	; 0
    1208:	99 23       	and	r25, r25
    120a:	29 f0       	breq	.+10     	; 0x1216 <dtoa_prf+0x116>
    120c:	d6 01       	movw	r26, r12
    120e:	9c 93       	st	X, r25
    1210:	f6 01       	movw	r30, r12
    1212:	31 96       	adiw	r30, 0x01	; 1
    1214:	6f 01       	movw	r12, r30
    1216:	c6 01       	movw	r24, r12
    1218:	03 96       	adiw	r24, 0x03	; 3
    121a:	e2 fe       	sbrs	r14, 2
    121c:	0b c0       	rjmp	.+22     	; 0x1234 <dtoa_prf+0x134>
    121e:	39 e4       	ldi	r19, 0x49	; 73
    1220:	d6 01       	movw	r26, r12
    1222:	3c 93       	st	X, r19
    1224:	3e e4       	ldi	r19, 0x4E	; 78
    1226:	11 96       	adiw	r26, 0x01	; 1
    1228:	3c 93       	st	X, r19
    122a:	11 97       	sbiw	r26, 0x01	; 1
    122c:	36 e4       	ldi	r19, 0x46	; 70
    122e:	12 96       	adiw	r26, 0x02	; 2
    1230:	3c 93       	st	X, r19
    1232:	07 c0       	rjmp	.+14     	; 0x1242 <dtoa_prf+0x142>
    1234:	39 e6       	ldi	r19, 0x69	; 105
    1236:	f6 01       	movw	r30, r12
    1238:	30 83       	st	Z, r19
    123a:	3e e6       	ldi	r19, 0x6E	; 110
    123c:	31 83       	std	Z+1, r19	; 0x01
    123e:	36 e6       	ldi	r19, 0x66	; 102
    1240:	32 83       	std	Z+2, r19	; 0x02
    1242:	fc 01       	movw	r30, r24
    1244:	32 2f       	mov	r19, r18
    1246:	40 e2       	ldi	r20, 0x20	; 32
    1248:	33 23       	and	r19, r19
    124a:	19 f0       	breq	.+6      	; 0x1252 <dtoa_prf+0x152>
    124c:	41 93       	st	Z+, r20
    124e:	31 50       	subi	r19, 0x01	; 1
    1250:	fb cf       	rjmp	.-10     	; 0x1248 <dtoa_prf+0x148>
    1252:	fc 01       	movw	r30, r24
    1254:	e2 0f       	add	r30, r18
    1256:	f1 1d       	adc	r31, r1
    1258:	10 82       	st	Z, r1
    125a:	8e ef       	ldi	r24, 0xFE	; 254
    125c:	9f ef       	ldi	r25, 0xFF	; 255
    125e:	a6 c0       	rjmp	.+332    	; 0x13ac <dtoa_prf+0x2ac>
    1260:	21 e0       	ldi	r18, 0x01	; 1
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	91 11       	cpse	r25, r1
    1266:	02 c0       	rjmp	.+4      	; 0x126c <dtoa_prf+0x16c>
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	16 16       	cp	r1, r22
    126e:	17 06       	cpc	r1, r23
    1270:	1c f4       	brge	.+6      	; 0x1278 <dtoa_prf+0x178>
    1272:	fb 01       	movw	r30, r22
    1274:	31 96       	adiw	r30, 0x01	; 1
    1276:	02 c0       	rjmp	.+4      	; 0x127c <dtoa_prf+0x17c>
    1278:	e1 e0       	ldi	r30, 0x01	; 1
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	2e 0f       	add	r18, r30
    127e:	3f 1f       	adc	r19, r31
    1280:	bb 20       	and	r11, r11
    1282:	21 f0       	breq	.+8      	; 0x128c <dtoa_prf+0x18c>
    1284:	eb 2d       	mov	r30, r11
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	31 96       	adiw	r30, 0x01	; 1
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <dtoa_prf+0x190>
    128c:	e0 e0       	ldi	r30, 0x00	; 0
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	2e 0f       	add	r18, r30
    1292:	3f 1f       	adc	r19, r31
    1294:	e1 2f       	mov	r30, r17
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	2e 17       	cp	r18, r30
    129a:	3f 07       	cpc	r19, r31
    129c:	1c f4       	brge	.+6      	; 0x12a4 <dtoa_prf+0x1a4>
    129e:	12 1b       	sub	r17, r18
    12a0:	21 2f       	mov	r18, r17
    12a2:	01 c0       	rjmp	.+2      	; 0x12a6 <dtoa_prf+0x1a6>
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	8e 2d       	mov	r24, r14
    12a8:	88 71       	andi	r24, 0x18	; 24
    12aa:	59 f4       	brne	.+22     	; 0x12c2 <dtoa_prf+0x1c2>
    12ac:	f6 01       	movw	r30, r12
    12ae:	82 2f       	mov	r24, r18
    12b0:	30 e2       	ldi	r19, 0x20	; 32
    12b2:	88 23       	and	r24, r24
    12b4:	19 f0       	breq	.+6      	; 0x12bc <dtoa_prf+0x1bc>
    12b6:	31 93       	st	Z+, r19
    12b8:	81 50       	subi	r24, 0x01	; 1
    12ba:	fb cf       	rjmp	.-10     	; 0x12b2 <dtoa_prf+0x1b2>
    12bc:	c2 0e       	add	r12, r18
    12be:	d1 1c       	adc	r13, r1
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	99 23       	and	r25, r25
    12c4:	29 f0       	breq	.+10     	; 0x12d0 <dtoa_prf+0x1d0>
    12c6:	d6 01       	movw	r26, r12
    12c8:	9c 93       	st	X, r25
    12ca:	f6 01       	movw	r30, r12
    12cc:	31 96       	adiw	r30, 0x01	; 1
    12ce:	6f 01       	movw	r12, r30
    12d0:	51 11       	cpse	r21, r1
    12d2:	0b c0       	rjmp	.+22     	; 0x12ea <dtoa_prf+0x1ea>
    12d4:	f6 01       	movw	r30, r12
    12d6:	82 2f       	mov	r24, r18
    12d8:	90 e3       	ldi	r25, 0x30	; 48
    12da:	88 23       	and	r24, r24
    12dc:	19 f0       	breq	.+6      	; 0x12e4 <dtoa_prf+0x1e4>
    12de:	91 93       	st	Z+, r25
    12e0:	81 50       	subi	r24, 0x01	; 1
    12e2:	fb cf       	rjmp	.-10     	; 0x12da <dtoa_prf+0x1da>
    12e4:	c2 0e       	add	r12, r18
    12e6:	d1 1c       	adc	r13, r1
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	0f 2d       	mov	r16, r15
    12ec:	06 0f       	add	r16, r22
    12ee:	9a 81       	ldd	r25, Y+2	; 0x02
    12f0:	34 2f       	mov	r19, r20
    12f2:	30 71       	andi	r19, 0x10	; 16
    12f4:	44 ff       	sbrs	r20, 4
    12f6:	03 c0       	rjmp	.+6      	; 0x12fe <dtoa_prf+0x1fe>
    12f8:	91 33       	cpi	r25, 0x31	; 49
    12fa:	09 f4       	brne	.+2      	; 0x12fe <dtoa_prf+0x1fe>
    12fc:	01 50       	subi	r16, 0x01	; 1
    12fe:	10 16       	cp	r1, r16
    1300:	24 f4       	brge	.+8      	; 0x130a <dtoa_prf+0x20a>
    1302:	09 30       	cpi	r16, 0x09	; 9
    1304:	18 f0       	brcs	.+6      	; 0x130c <dtoa_prf+0x20c>
    1306:	08 e0       	ldi	r16, 0x08	; 8
    1308:	01 c0       	rjmp	.+2      	; 0x130c <dtoa_prf+0x20c>
    130a:	01 e0       	ldi	r16, 0x01	; 1
    130c:	ab 01       	movw	r20, r22
    130e:	77 ff       	sbrs	r23, 7
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <dtoa_prf+0x216>
    1312:	40 e0       	ldi	r20, 0x00	; 0
    1314:	50 e0       	ldi	r21, 0x00	; 0
    1316:	fb 01       	movw	r30, r22
    1318:	e4 1b       	sub	r30, r20
    131a:	f5 0b       	sbc	r31, r21
    131c:	a1 e0       	ldi	r26, 0x01	; 1
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	ac 0f       	add	r26, r28
    1322:	bd 1f       	adc	r27, r29
    1324:	ea 0f       	add	r30, r26
    1326:	fb 1f       	adc	r31, r27
    1328:	8e e2       	ldi	r24, 0x2E	; 46
    132a:	a8 2e       	mov	r10, r24
    132c:	4b 01       	movw	r8, r22
    132e:	80 1a       	sub	r8, r16
    1330:	91 08       	sbc	r9, r1
    1332:	0b 2d       	mov	r16, r11
    1334:	10 e0       	ldi	r17, 0x00	; 0
    1336:	11 95       	neg	r17
    1338:	01 95       	neg	r16
    133a:	11 09       	sbc	r17, r1
    133c:	4f 3f       	cpi	r20, 0xFF	; 255
    133e:	bf ef       	ldi	r27, 0xFF	; 255
    1340:	5b 07       	cpc	r21, r27
    1342:	21 f4       	brne	.+8      	; 0x134c <dtoa_prf+0x24c>
    1344:	d6 01       	movw	r26, r12
    1346:	ac 92       	st	X, r10
    1348:	11 96       	adiw	r26, 0x01	; 1
    134a:	6d 01       	movw	r12, r26
    134c:	64 17       	cp	r22, r20
    134e:	75 07       	cpc	r23, r21
    1350:	2c f0       	brlt	.+10     	; 0x135c <dtoa_prf+0x25c>
    1352:	84 16       	cp	r8, r20
    1354:	95 06       	cpc	r9, r21
    1356:	14 f4       	brge	.+4      	; 0x135c <dtoa_prf+0x25c>
    1358:	81 81       	ldd	r24, Z+1	; 0x01
    135a:	01 c0       	rjmp	.+2      	; 0x135e <dtoa_prf+0x25e>
    135c:	80 e3       	ldi	r24, 0x30	; 48
    135e:	41 50       	subi	r20, 0x01	; 1
    1360:	51 09       	sbc	r21, r1
    1362:	31 96       	adiw	r30, 0x01	; 1
    1364:	d6 01       	movw	r26, r12
    1366:	11 96       	adiw	r26, 0x01	; 1
    1368:	7d 01       	movw	r14, r26
    136a:	40 17       	cp	r20, r16
    136c:	51 07       	cpc	r21, r17
    136e:	24 f0       	brlt	.+8      	; 0x1378 <dtoa_prf+0x278>
    1370:	d6 01       	movw	r26, r12
    1372:	8c 93       	st	X, r24
    1374:	67 01       	movw	r12, r14
    1376:	e2 cf       	rjmp	.-60     	; 0x133c <dtoa_prf+0x23c>
    1378:	64 17       	cp	r22, r20
    137a:	75 07       	cpc	r23, r21
    137c:	39 f4       	brne	.+14     	; 0x138c <dtoa_prf+0x28c>
    137e:	96 33       	cpi	r25, 0x36	; 54
    1380:	20 f4       	brcc	.+8      	; 0x138a <dtoa_prf+0x28a>
    1382:	95 33       	cpi	r25, 0x35	; 53
    1384:	19 f4       	brne	.+6      	; 0x138c <dtoa_prf+0x28c>
    1386:	31 11       	cpse	r19, r1
    1388:	01 c0       	rjmp	.+2      	; 0x138c <dtoa_prf+0x28c>
    138a:	81 e3       	ldi	r24, 0x31	; 49
    138c:	f6 01       	movw	r30, r12
    138e:	80 83       	st	Z, r24
    1390:	f7 01       	movw	r30, r14
    1392:	82 2f       	mov	r24, r18
    1394:	90 e2       	ldi	r25, 0x20	; 32
    1396:	88 23       	and	r24, r24
    1398:	19 f0       	breq	.+6      	; 0x13a0 <dtoa_prf+0x2a0>
    139a:	91 93       	st	Z+, r25
    139c:	81 50       	subi	r24, 0x01	; 1
    139e:	fb cf       	rjmp	.-10     	; 0x1396 <dtoa_prf+0x296>
    13a0:	f7 01       	movw	r30, r14
    13a2:	e2 0f       	add	r30, r18
    13a4:	f1 1d       	adc	r31, r1
    13a6:	10 82       	st	Z, r1
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	29 96       	adiw	r28, 0x09	; 9
    13ae:	ec e0       	ldi	r30, 0x0C	; 12
    13b0:	0c 94 d4 0a 	jmp	0x15a8	; 0x15a8 <__epilogue_restores__+0xc>

000013b4 <__ftoa_engine>:
    13b4:	28 30       	cpi	r18, 0x08	; 8
    13b6:	08 f0       	brcs	.+2      	; 0x13ba <__ftoa_engine+0x6>
    13b8:	27 e0       	ldi	r18, 0x07	; 7
    13ba:	33 27       	eor	r19, r19
    13bc:	da 01       	movw	r26, r20
    13be:	99 0f       	add	r25, r25
    13c0:	31 1d       	adc	r19, r1
    13c2:	87 fd       	sbrc	r24, 7
    13c4:	91 60       	ori	r25, 0x01	; 1
    13c6:	00 96       	adiw	r24, 0x00	; 0
    13c8:	61 05       	cpc	r22, r1
    13ca:	71 05       	cpc	r23, r1
    13cc:	39 f4       	brne	.+14     	; 0x13dc <__ftoa_engine+0x28>
    13ce:	32 60       	ori	r19, 0x02	; 2
    13d0:	2e 5f       	subi	r18, 0xFE	; 254
    13d2:	3d 93       	st	X+, r19
    13d4:	30 e3       	ldi	r19, 0x30	; 48
    13d6:	2a 95       	dec	r18
    13d8:	e1 f7       	brne	.-8      	; 0x13d2 <__ftoa_engine+0x1e>
    13da:	08 95       	ret
    13dc:	9f 3f       	cpi	r25, 0xFF	; 255
    13de:	30 f0       	brcs	.+12     	; 0x13ec <__ftoa_engine+0x38>
    13e0:	80 38       	cpi	r24, 0x80	; 128
    13e2:	71 05       	cpc	r23, r1
    13e4:	61 05       	cpc	r22, r1
    13e6:	09 f0       	breq	.+2      	; 0x13ea <__ftoa_engine+0x36>
    13e8:	3c 5f       	subi	r19, 0xFC	; 252
    13ea:	3c 5f       	subi	r19, 0xFC	; 252
    13ec:	3d 93       	st	X+, r19
    13ee:	91 30       	cpi	r25, 0x01	; 1
    13f0:	08 f0       	brcs	.+2      	; 0x13f4 <__ftoa_engine+0x40>
    13f2:	80 68       	ori	r24, 0x80	; 128
    13f4:	91 1d       	adc	r25, r1
    13f6:	df 93       	push	r29
    13f8:	cf 93       	push	r28
    13fa:	1f 93       	push	r17
    13fc:	0f 93       	push	r16
    13fe:	ff 92       	push	r15
    1400:	ef 92       	push	r14
    1402:	19 2f       	mov	r17, r25
    1404:	98 7f       	andi	r25, 0xF8	; 248
    1406:	96 95       	lsr	r25
    1408:	e9 2f       	mov	r30, r25
    140a:	96 95       	lsr	r25
    140c:	96 95       	lsr	r25
    140e:	e9 0f       	add	r30, r25
    1410:	ff 27       	eor	r31, r31
    1412:	ec 5d       	subi	r30, 0xDC	; 220
    1414:	fe 4f       	sbci	r31, 0xFE	; 254
    1416:	99 27       	eor	r25, r25
    1418:	33 27       	eor	r19, r19
    141a:	ee 24       	eor	r14, r14
    141c:	ff 24       	eor	r15, r15
    141e:	a7 01       	movw	r20, r14
    1420:	e7 01       	movw	r28, r14
    1422:	05 90       	lpm	r0, Z+
    1424:	08 94       	sec
    1426:	07 94       	ror	r0
    1428:	28 f4       	brcc	.+10     	; 0x1434 <__ftoa_engine+0x80>
    142a:	36 0f       	add	r19, r22
    142c:	e7 1e       	adc	r14, r23
    142e:	f8 1e       	adc	r15, r24
    1430:	49 1f       	adc	r20, r25
    1432:	51 1d       	adc	r21, r1
    1434:	66 0f       	add	r22, r22
    1436:	77 1f       	adc	r23, r23
    1438:	88 1f       	adc	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	06 94       	lsr	r0
    143e:	a1 f7       	brne	.-24     	; 0x1428 <__ftoa_engine+0x74>
    1440:	05 90       	lpm	r0, Z+
    1442:	07 94       	ror	r0
    1444:	28 f4       	brcc	.+10     	; 0x1450 <__ftoa_engine+0x9c>
    1446:	e7 0e       	add	r14, r23
    1448:	f8 1e       	adc	r15, r24
    144a:	49 1f       	adc	r20, r25
    144c:	56 1f       	adc	r21, r22
    144e:	c1 1d       	adc	r28, r1
    1450:	77 0f       	add	r23, r23
    1452:	88 1f       	adc	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	66 1f       	adc	r22, r22
    1458:	06 94       	lsr	r0
    145a:	a1 f7       	brne	.-24     	; 0x1444 <__ftoa_engine+0x90>
    145c:	05 90       	lpm	r0, Z+
    145e:	07 94       	ror	r0
    1460:	28 f4       	brcc	.+10     	; 0x146c <__ftoa_engine+0xb8>
    1462:	f8 0e       	add	r15, r24
    1464:	49 1f       	adc	r20, r25
    1466:	56 1f       	adc	r21, r22
    1468:	c7 1f       	adc	r28, r23
    146a:	d1 1d       	adc	r29, r1
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	66 1f       	adc	r22, r22
    1472:	77 1f       	adc	r23, r23
    1474:	06 94       	lsr	r0
    1476:	a1 f7       	brne	.-24     	; 0x1460 <__ftoa_engine+0xac>
    1478:	05 90       	lpm	r0, Z+
    147a:	07 94       	ror	r0
    147c:	20 f4       	brcc	.+8      	; 0x1486 <__ftoa_engine+0xd2>
    147e:	49 0f       	add	r20, r25
    1480:	56 1f       	adc	r21, r22
    1482:	c7 1f       	adc	r28, r23
    1484:	d8 1f       	adc	r29, r24
    1486:	99 0f       	add	r25, r25
    1488:	66 1f       	adc	r22, r22
    148a:	77 1f       	adc	r23, r23
    148c:	88 1f       	adc	r24, r24
    148e:	06 94       	lsr	r0
    1490:	a9 f7       	brne	.-22     	; 0x147c <__ftoa_engine+0xc8>
    1492:	84 91       	lpm	r24, Z
    1494:	10 95       	com	r17
    1496:	17 70       	andi	r17, 0x07	; 7
    1498:	41 f0       	breq	.+16     	; 0x14aa <__ftoa_engine+0xf6>
    149a:	d6 95       	lsr	r29
    149c:	c7 95       	ror	r28
    149e:	57 95       	ror	r21
    14a0:	47 95       	ror	r20
    14a2:	f7 94       	ror	r15
    14a4:	e7 94       	ror	r14
    14a6:	1a 95       	dec	r17
    14a8:	c1 f7       	brne	.-16     	; 0x149a <__ftoa_engine+0xe6>
    14aa:	ea ec       	ldi	r30, 0xCA	; 202
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	68 94       	set
    14b0:	15 90       	lpm	r1, Z+
    14b2:	15 91       	lpm	r17, Z+
    14b4:	35 91       	lpm	r19, Z+
    14b6:	65 91       	lpm	r22, Z+
    14b8:	95 91       	lpm	r25, Z+
    14ba:	05 90       	lpm	r0, Z+
    14bc:	7f e2       	ldi	r23, 0x2F	; 47
    14be:	73 95       	inc	r23
    14c0:	e1 18       	sub	r14, r1
    14c2:	f1 0a       	sbc	r15, r17
    14c4:	43 0b       	sbc	r20, r19
    14c6:	56 0b       	sbc	r21, r22
    14c8:	c9 0b       	sbc	r28, r25
    14ca:	d0 09       	sbc	r29, r0
    14cc:	c0 f7       	brcc	.-16     	; 0x14be <__ftoa_engine+0x10a>
    14ce:	e1 0c       	add	r14, r1
    14d0:	f1 1e       	adc	r15, r17
    14d2:	43 1f       	adc	r20, r19
    14d4:	56 1f       	adc	r21, r22
    14d6:	c9 1f       	adc	r28, r25
    14d8:	d0 1d       	adc	r29, r0
    14da:	7e f4       	brtc	.+30     	; 0x14fa <__ftoa_engine+0x146>
    14dc:	70 33       	cpi	r23, 0x30	; 48
    14de:	11 f4       	brne	.+4      	; 0x14e4 <__ftoa_engine+0x130>
    14e0:	8a 95       	dec	r24
    14e2:	e6 cf       	rjmp	.-52     	; 0x14b0 <__ftoa_engine+0xfc>
    14e4:	e8 94       	clt
    14e6:	01 50       	subi	r16, 0x01	; 1
    14e8:	30 f0       	brcs	.+12     	; 0x14f6 <__ftoa_engine+0x142>
    14ea:	08 0f       	add	r16, r24
    14ec:	0a f4       	brpl	.+2      	; 0x14f0 <__ftoa_engine+0x13c>
    14ee:	00 27       	eor	r16, r16
    14f0:	02 17       	cp	r16, r18
    14f2:	08 f4       	brcc	.+2      	; 0x14f6 <__ftoa_engine+0x142>
    14f4:	20 2f       	mov	r18, r16
    14f6:	23 95       	inc	r18
    14f8:	02 2f       	mov	r16, r18
    14fa:	7a 33       	cpi	r23, 0x3A	; 58
    14fc:	28 f0       	brcs	.+10     	; 0x1508 <__ftoa_engine+0x154>
    14fe:	79 e3       	ldi	r23, 0x39	; 57
    1500:	7d 93       	st	X+, r23
    1502:	2a 95       	dec	r18
    1504:	e9 f7       	brne	.-6      	; 0x1500 <__ftoa_engine+0x14c>
    1506:	10 c0       	rjmp	.+32     	; 0x1528 <__ftoa_engine+0x174>
    1508:	7d 93       	st	X+, r23
    150a:	2a 95       	dec	r18
    150c:	89 f6       	brne	.-94     	; 0x14b0 <__ftoa_engine+0xfc>
    150e:	06 94       	lsr	r0
    1510:	97 95       	ror	r25
    1512:	67 95       	ror	r22
    1514:	37 95       	ror	r19
    1516:	17 95       	ror	r17
    1518:	17 94       	ror	r1
    151a:	e1 18       	sub	r14, r1
    151c:	f1 0a       	sbc	r15, r17
    151e:	43 0b       	sbc	r20, r19
    1520:	56 0b       	sbc	r21, r22
    1522:	c9 0b       	sbc	r28, r25
    1524:	d0 09       	sbc	r29, r0
    1526:	98 f0       	brcs	.+38     	; 0x154e <__ftoa_engine+0x19a>
    1528:	23 95       	inc	r18
    152a:	7e 91       	ld	r23, -X
    152c:	73 95       	inc	r23
    152e:	7a 33       	cpi	r23, 0x3A	; 58
    1530:	08 f0       	brcs	.+2      	; 0x1534 <__ftoa_engine+0x180>
    1532:	70 e3       	ldi	r23, 0x30	; 48
    1534:	7c 93       	st	X, r23
    1536:	20 13       	cpse	r18, r16
    1538:	b8 f7       	brcc	.-18     	; 0x1528 <__ftoa_engine+0x174>
    153a:	7e 91       	ld	r23, -X
    153c:	70 61       	ori	r23, 0x10	; 16
    153e:	7d 93       	st	X+, r23
    1540:	30 f0       	brcs	.+12     	; 0x154e <__ftoa_engine+0x19a>
    1542:	83 95       	inc	r24
    1544:	71 e3       	ldi	r23, 0x31	; 49
    1546:	7d 93       	st	X+, r23
    1548:	70 e3       	ldi	r23, 0x30	; 48
    154a:	2a 95       	dec	r18
    154c:	e1 f7       	brne	.-8      	; 0x1546 <__ftoa_engine+0x192>
    154e:	11 24       	eor	r1, r1
    1550:	ef 90       	pop	r14
    1552:	ff 90       	pop	r15
    1554:	0f 91       	pop	r16
    1556:	1f 91       	pop	r17
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	99 27       	eor	r25, r25
    155e:	87 fd       	sbrc	r24, 7
    1560:	90 95       	com	r25
    1562:	08 95       	ret

00001564 <__prologue_saves__>:
    1564:	2f 92       	push	r2
    1566:	3f 92       	push	r3
    1568:	4f 92       	push	r4
    156a:	5f 92       	push	r5
    156c:	6f 92       	push	r6
    156e:	7f 92       	push	r7
    1570:	8f 92       	push	r8
    1572:	9f 92       	push	r9
    1574:	af 92       	push	r10
    1576:	bf 92       	push	r11
    1578:	cf 92       	push	r12
    157a:	df 92       	push	r13
    157c:	ef 92       	push	r14
    157e:	ff 92       	push	r15
    1580:	0f 93       	push	r16
    1582:	1f 93       	push	r17
    1584:	cf 93       	push	r28
    1586:	df 93       	push	r29
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
    158c:	ca 1b       	sub	r28, r26
    158e:	db 0b       	sbc	r29, r27
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	f8 94       	cli
    1594:	de bf       	out	0x3e, r29	; 62
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	cd bf       	out	0x3d, r28	; 61
    159a:	09 94       	ijmp

0000159c <__epilogue_restores__>:
    159c:	2a 88       	ldd	r2, Y+18	; 0x12
    159e:	39 88       	ldd	r3, Y+17	; 0x11
    15a0:	48 88       	ldd	r4, Y+16	; 0x10
    15a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    15a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    15a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    15a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    15aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    15ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    15ae:	b9 84       	ldd	r11, Y+9	; 0x09
    15b0:	c8 84       	ldd	r12, Y+8	; 0x08
    15b2:	df 80       	ldd	r13, Y+7	; 0x07
    15b4:	ee 80       	ldd	r14, Y+6	; 0x06
    15b6:	fd 80       	ldd	r15, Y+5	; 0x05
    15b8:	0c 81       	ldd	r16, Y+4	; 0x04
    15ba:	1b 81       	ldd	r17, Y+3	; 0x03
    15bc:	aa 81       	ldd	r26, Y+2	; 0x02
    15be:	b9 81       	ldd	r27, Y+1	; 0x01
    15c0:	ce 0f       	add	r28, r30
    15c2:	d1 1d       	adc	r29, r1
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	f8 94       	cli
    15c8:	de bf       	out	0x3e, r29	; 62
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	cd bf       	out	0x3d, r28	; 61
    15ce:	ed 01       	movw	r28, r26
    15d0:	08 95       	ret

000015d2 <_exit>:
    15d2:	f8 94       	cli

000015d4 <__stop_program>:
    15d4:	ff cf       	rjmp	.-2      	; 0x15d4 <__stop_program>
