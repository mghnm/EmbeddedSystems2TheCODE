
EmbeddedSystems2TheCODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000015aa  0000163e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000419  00800102  00800102  00001640  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001640  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001670  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000280  00000000  00000000  000016b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e54  00000000  00000000  00001930  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000edb  00000000  00000000  00004784  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001553  00000000  00000000  0000565f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009c8  00000000  00000000  00006bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000099d  00000000  00000000  0000757c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d79  00000000  00000000  00007f19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000ac92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__ctors_end>
       4:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
       8:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
       c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      10:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <__vector_4>
      14:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      18:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      1c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      20:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      24:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      28:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      2c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      30:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      34:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      38:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      3c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      40:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      44:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      48:	0c 94 4c 02 	jmp	0x498	; 0x498 <__vector_18>
      4c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      50:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      54:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      58:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      5c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      60:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      64:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      68:	c6 04       	cpc	r12, r6
      6a:	cc 03       	fmulsu	r20, r20
      6c:	cc 03       	fmulsu	r20, r20
      6e:	cc 03       	fmulsu	r20, r20
      70:	bc 04       	cpc	r11, r12
      72:	cc 03       	fmulsu	r20, r20
      74:	cc 03       	fmulsu	r20, r20
      76:	cc 03       	fmulsu	r20, r20
      78:	cc 03       	fmulsu	r20, r20
      7a:	cc 03       	fmulsu	r20, r20
      7c:	a8 04       	cpc	r10, r8
      7e:	cc 03       	fmulsu	r20, r20
      80:	cc 03       	fmulsu	r20, r20
      82:	cc 03       	fmulsu	r20, r20
      84:	cc 03       	fmulsu	r20, r20
      86:	cc 03       	fmulsu	r20, r20
      88:	b2 04       	cpc	r11, r2
      8a:	a5 04       	cpc	r10, r5
      8c:	cc 03       	fmulsu	r20, r20
      8e:	cc 03       	fmulsu	r20, r20
      90:	cc 03       	fmulsu	r20, r20
      92:	cc 03       	fmulsu	r20, r20
      94:	cc 03       	fmulsu	r20, r20
      96:	cc 03       	fmulsu	r20, r20
      98:	cc 03       	fmulsu	r20, r20
      9a:	cc 03       	fmulsu	r20, r20
      9c:	cc 03       	fmulsu	r20, r20
      9e:	cc 03       	fmulsu	r20, r20
      a0:	cc 03       	fmulsu	r20, r20
      a2:	cc 03       	fmulsu	r20, r20
      a4:	cc 03       	fmulsu	r20, r20
      a6:	cc 03       	fmulsu	r20, r20
      a8:	cb 04       	cpc	r12, r11
      aa:	cc 03       	fmulsu	r20, r20
      ac:	cc 03       	fmulsu	r20, r20
      ae:	cc 03       	fmulsu	r20, r20
      b0:	c1 04       	cpc	r12, r1
      b2:	cc 03       	fmulsu	r20, r20
      b4:	cc 03       	fmulsu	r20, r20
      b6:	cc 03       	fmulsu	r20, r20
      b8:	cc 03       	fmulsu	r20, r20
      ba:	cc 03       	fmulsu	r20, r20
      bc:	ad 04       	cpc	r10, r13
      be:	cc 03       	fmulsu	r20, r20
      c0:	cc 03       	fmulsu	r20, r20
      c2:	cc 03       	fmulsu	r20, r20
      c4:	cc 03       	fmulsu	r20, r20
      c6:	cc 03       	fmulsu	r20, r20
      c8:	b7 04       	cpc	r11, r7

000000ca <__trampolines_end>:
      ca:	00 40       	sbci	r16, 0x00	; 0
      cc:	7a 10       	cpse	r7, r10
      ce:	f3 5a       	subi	r31, 0xA3	; 163
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	72 4e       	sbci	r23, 0xE2	; 226
      d4:	18 09       	sbc	r17, r8
      d6:	00 10       	cpse	r0, r0
      d8:	a5 d4       	rcall	.+2378   	; 0xa24 <mpu6050_readBytes+0x84>
      da:	e8 00       	.word	0x00e8	; ????
      dc:	00 e8       	ldi	r16, 0x80	; 128
      de:	76 48       	sbci	r23, 0x86	; 134
      e0:	17 00       	.word	0x0017	; ????
      e2:	00 e4       	ldi	r16, 0x40	; 64
      e4:	0b 54       	subi	r16, 0x4B	; 75
      e6:	02 00       	.word	0x0002	; ????
      e8:	00 ca       	rjmp	.-3072   	; 0xfffff4ea <__eeprom_end+0xff7ef4ea>
      ea:	9a 3b       	cpi	r25, 0xBA	; 186
      ec:	00 00       	nop
      ee:	00 e1       	ldi	r16, 0x10	; 16
      f0:	f5 05       	cpc	r31, r5
      f2:	00 00       	nop
      f4:	80 96       	adiw	r24, 0x20	; 32
      f6:	98 00       	.word	0x0098	; ????
      f8:	00 00       	nop
      fa:	40 42       	sbci	r20, 0x20	; 32
      fc:	0f 00       	.word	0x000f	; ????
      fe:	00 00       	nop
     100:	a0 86       	std	Z+8, r10	; 0x08
     102:	01 00       	.word	0x0001	; ????
     104:	00 00       	nop
     106:	10 27       	eor	r17, r16
     108:	00 00       	nop
     10a:	00 00       	nop
     10c:	e8 03       	fmulsu	r22, r16
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	64 00       	.word	0x0064	; ????
     114:	00 00       	nop
     116:	00 00       	nop
     118:	0a 00       	.word	0x000a	; ????
     11a:	00 00       	nop
     11c:	00 00       	nop
     11e:	01 00       	.word	0x0001	; ????
     120:	00 00       	nop
     122:	00 00       	nop
     124:	2c 76       	andi	r18, 0x6C	; 108
     126:	d8 88       	ldd	r13, Y+16	; 0x10
     128:	dc 67       	ori	r29, 0x7C	; 124
     12a:	4f 08       	sbc	r4, r15
     12c:	23 df       	rcall	.-442    	; 0xffffff74 <__eeprom_end+0xff7eff74>
     12e:	c1 df       	rcall	.-126    	; 0xb2 <__SREG__+0x73>
     130:	ae 59       	subi	r26, 0x9E	; 158
     132:	e1 b1       	in	r30, 0x01	; 1
     134:	b7 96       	adiw	r30, 0x27	; 39
     136:	e5 e3       	ldi	r30, 0x35	; 53
     138:	e4 53       	subi	r30, 0x34	; 52
     13a:	c6 3a       	cpi	r28, 0xA6	; 166
     13c:	e6 51       	subi	r30, 0x16	; 22
     13e:	99 76       	andi	r25, 0x69	; 105
     140:	96 e8       	ldi	r25, 0x86	; 134
     142:	e6 c2       	rjmp	.+1484   	; 0x710 <turnLeft+0x1a>
     144:	84 26       	eor	r8, r20
     146:	eb 89       	ldd	r30, Y+19	; 0x13
     148:	8c 9b       	sbis	0x11, 4	; 17
     14a:	62 ed       	ldi	r22, 0xD2	; 210
     14c:	40 7c       	andi	r20, 0xC0	; 192
     14e:	6f fc       	.word	0xfc6f	; ????
     150:	ef bc       	out	0x2f, r14	; 47
     152:	9c 9f       	mul	r25, r28
     154:	40 f2       	brcs	.-112    	; 0xe6 <__trampolines_end+0x1c>
     156:	ba a5       	ldd	r27, Y+42	; 0x2a
     158:	6f a5       	ldd	r22, Y+47	; 0x2f
     15a:	f4 90       	lpm	r15, Z
     15c:	05 5a       	subi	r16, 0xA5	; 165
     15e:	2a f7       	brpl	.-54     	; 0x12a <__trampolines_end+0x60>
     160:	5c 93       	st	X, r21
     162:	6b 6c       	ori	r22, 0xCB	; 203
     164:	f9 67       	ori	r31, 0x79	; 121
     166:	6d c1       	rjmp	.+730    	; 0x442 <lcd_init+0x38>
     168:	1b fc       	.word	0xfc1b	; ????
     16a:	e0 e4       	ldi	r30, 0x40	; 64
     16c:	0d 47       	sbci	r16, 0x7D	; 125
     16e:	fe f5       	brtc	.+126    	; 0x1ee <__do_copy_data+0x2>
     170:	20 e6       	ldi	r18, 0x60	; 96
     172:	b5 00       	.word	0x00b5	; ????
     174:	d0 ed       	ldi	r29, 0xD0	; 208
     176:	90 2e       	mov	r9, r16
     178:	03 00       	.word	0x0003	; ????
     17a:	94 35       	cpi	r25, 0x54	; 84
     17c:	77 05       	cpc	r23, r7
     17e:	00 80       	ld	r0, Z
     180:	84 1e       	adc	r8, r20
     182:	08 00       	.word	0x0008	; ????
     184:	00 20       	and	r0, r0
     186:	4e 0a       	sbc	r4, r30
     188:	00 00       	nop
     18a:	00 c8       	rjmp	.-4096   	; 0xfffff18c <__eeprom_end+0xff7ef18c>
     18c:	0c 33       	cpi	r16, 0x3C	; 60
     18e:	33 33       	cpi	r19, 0x33	; 51
     190:	33 0f       	add	r19, r19
     192:	98 6e       	ori	r25, 0xE8	; 232
     194:	12 83       	std	Z+2, r17	; 0x02
     196:	11 41       	sbci	r17, 0x11	; 17
     198:	ef 8d       	ldd	r30, Y+31	; 0x1f
     19a:	21 14       	cp	r2, r1
     19c:	89 3b       	cpi	r24, 0xB9	; 185
     19e:	e6 55       	subi	r30, 0x56	; 86
     1a0:	16 cf       	rjmp	.-468    	; 0xffffffce <__eeprom_end+0xff7effce>
     1a2:	fe e6       	ldi	r31, 0x6E	; 110
     1a4:	db 18       	sub	r13, r11
     1a6:	d1 84       	ldd	r13, Z+9	; 0x09
     1a8:	4b 38       	cpi	r20, 0x8B	; 139
     1aa:	1b f7       	brvc	.-58     	; 0x172 <__trampolines_end+0xa8>
     1ac:	7c 1d       	adc	r23, r12
     1ae:	90 1d       	adc	r25, r0
     1b0:	a4 bb       	out	0x14, r26	; 20
     1b2:	e4 24       	eor	r14, r4
     1b4:	20 32       	cpi	r18, 0x20	; 32
     1b6:	84 72       	andi	r24, 0x24	; 36
     1b8:	5e 22       	and	r5, r30
     1ba:	81 00       	.word	0x0081	; ????
     1bc:	c9 f1       	breq	.+114    	; 0x230 <i2c_start>
     1be:	24 ec       	ldi	r18, 0xC4	; 196
     1c0:	a1 e5       	ldi	r26, 0x51	; 81
     1c2:	3d 27       	eor	r19, r29

000001c4 <init_sequence>:
     1c4:	ae 20 00 b0 c8 00 10 40 81 3f a1 a6 a8 3f a4 d3     . .....@.?...?..
     1d4:	00 d5 f0 d9 22 da 12 db 20 8d 14 00                 ...."... ...

000001e0 <__ctors_end>:
     1e0:	11 24       	eor	r1, r1
     1e2:	1f be       	out	0x3f, r1	; 63
     1e4:	cf ef       	ldi	r28, 0xFF	; 255
     1e6:	d8 e0       	ldi	r29, 0x08	; 8
     1e8:	de bf       	out	0x3e, r29	; 62
     1ea:	cd bf       	out	0x3d, r28	; 61

000001ec <__do_copy_data>:
     1ec:	11 e0       	ldi	r17, 0x01	; 1
     1ee:	a0 e0       	ldi	r26, 0x00	; 0
     1f0:	b1 e0       	ldi	r27, 0x01	; 1
     1f2:	ea ea       	ldi	r30, 0xAA	; 170
     1f4:	f5 e1       	ldi	r31, 0x15	; 21
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <__do_copy_data+0x10>
     1f8:	05 90       	lpm	r0, Z+
     1fa:	0d 92       	st	X+, r0
     1fc:	a2 30       	cpi	r26, 0x02	; 2
     1fe:	b1 07       	cpc	r27, r17
     200:	d9 f7       	brne	.-10     	; 0x1f8 <__do_copy_data+0xc>

00000202 <__do_clear_bss>:
     202:	25 e0       	ldi	r18, 0x05	; 5
     204:	a2 e0       	ldi	r26, 0x02	; 2
     206:	b1 e0       	ldi	r27, 0x01	; 1
     208:	01 c0       	rjmp	.+2      	; 0x20c <.do_clear_bss_start>

0000020a <.do_clear_bss_loop>:
     20a:	1d 92       	st	X+, r1

0000020c <.do_clear_bss_start>:
     20c:	ab 31       	cpi	r26, 0x1B	; 27
     20e:	b2 07       	cpc	r27, r18
     210:	e1 f7       	brne	.-8      	; 0x20a <.do_clear_bss_loop>
     212:	0e 94 96 03 	call	0x72c	; 0x72c <main>
     216:	0c 94 d3 0a 	jmp	0x15a6	; 0x15a6 <_exit>

0000021a <__bad_interrupt>:
     21a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000021e <i2c_init>:
     21e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     222:	88 e4       	ldi	r24, 0x48	; 72
     224:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     228:	84 e0       	ldi	r24, 0x04	; 4
     22a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     22e:	08 95       	ret

00000230 <i2c_start>:
     230:	94 ea       	ldi	r25, 0xA4	; 164
     232:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     236:	ec eb       	ldi	r30, 0xBC	; 188
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	90 81       	ld	r25, Z
     23c:	99 23       	and	r25, r25
     23e:	ec f7       	brge	.-6      	; 0x23a <i2c_start+0xa>
     240:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     244:	84 e8       	ldi	r24, 0x84	; 132
     246:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     24a:	ec eb       	ldi	r30, 0xBC	; 188
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	80 81       	ld	r24, Z
     250:	88 23       	and	r24, r24
     252:	ec f7       	brge	.-6      	; 0x24e <i2c_start+0x1e>
     254:	08 95       	ret

00000256 <i2c_stop>:
     256:	84 e9       	ldi	r24, 0x94	; 148
     258:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     25c:	08 95       	ret

0000025e <i2c_byte>:
     25e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     262:	84 e8       	ldi	r24, 0x84	; 132
     264:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     268:	ec eb       	ldi	r30, 0xBC	; 188
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	88 23       	and	r24, r24
     270:	ec f7       	brge	.-6      	; 0x26c <i2c_byte+0xe>
     272:	08 95       	ret

00000274 <i2c_readAck>:
     274:	84 ec       	ldi	r24, 0xC4	; 196
     276:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     27a:	80 e4       	ldi	r24, 0x40	; 64
     27c:	91 e0       	ldi	r25, 0x01	; 1
     27e:	ec eb       	ldi	r30, 0xBC	; 188
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	09 c0       	rjmp	.+18     	; 0x296 <i2c_readAck+0x22>
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	39 f4       	brne	.+14     	; 0x296 <i2c_readAck+0x22>
     288:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <I2C_ErrorCode>
     28c:	88 60       	ori	r24, 0x08	; 8
     28e:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <I2C_ErrorCode>
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	08 95       	ret
     296:	20 81       	ld	r18, Z
     298:	22 23       	and	r18, r18
     29a:	a4 f7       	brge	.-24     	; 0x284 <i2c_readAck+0x10>
     29c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     2a0:	08 95       	ret

000002a2 <i2c_readNAck>:
     2a2:	84 e8       	ldi	r24, 0x84	; 132
     2a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     2a8:	ec eb       	ldi	r30, 0xBC	; 188
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	80 81       	ld	r24, Z
     2ae:	88 23       	and	r24, r24
     2b0:	ec f7       	brge	.-6      	; 0x2ac <i2c_readNAck+0xa>
     2b2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     2b6:	08 95       	ret

000002b8 <lcd_command>:
    0x8D, 0x14,        // Set DC-DC enable
    
    
};
#pragma mark LCD COMMUNICATION
void lcd_command(uint8_t cmd[], uint8_t size) {
     2b8:	ef 92       	push	r14
     2ba:	ff 92       	push	r15
     2bc:	0f 93       	push	r16
     2be:	1f 93       	push	r17
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	7c 01       	movw	r14, r24
     2c6:	16 2f       	mov	r17, r22
    i2c_start((LCD_I2C_ADR << 1) | I2C_WRITE);
     2c8:	88 e7       	ldi	r24, 0x78	; 120
     2ca:	0e 94 18 01 	call	0x230	; 0x230 <i2c_start>
    i2c_byte(0x00);    // 0x00 for command, 0x40 for data
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	0e 94 2f 01 	call	0x25e	; 0x25e <i2c_byte>
    for (uint8_t i=0; i<size; i++) {
     2d4:	11 23       	and	r17, r17
     2d6:	71 f0       	breq	.+28     	; 0x2f4 <lcd_command+0x3c>
     2d8:	e7 01       	movw	r28, r14
     2da:	11 50       	subi	r17, 0x01	; 1
     2dc:	01 2f       	mov	r16, r17
     2de:	10 e0       	ldi	r17, 0x00	; 0
     2e0:	0f 5f       	subi	r16, 0xFF	; 255
     2e2:	1f 4f       	sbci	r17, 0xFF	; 255
     2e4:	0e 0d       	add	r16, r14
     2e6:	1f 1d       	adc	r17, r15
        i2c_byte(cmd[i]);
     2e8:	89 91       	ld	r24, Y+
     2ea:	0e 94 2f 01 	call	0x25e	; 0x25e <i2c_byte>
};
#pragma mark LCD COMMUNICATION
void lcd_command(uint8_t cmd[], uint8_t size) {
    i2c_start((LCD_I2C_ADR << 1) | I2C_WRITE);
    i2c_byte(0x00);    // 0x00 for command, 0x40 for data
    for (uint8_t i=0; i<size; i++) {
     2ee:	c0 17       	cp	r28, r16
     2f0:	d1 07       	cpc	r29, r17
     2f2:	d1 f7       	brne	.-12     	; 0x2e8 <lcd_command+0x30>
        i2c_byte(cmd[i]);
    }
    i2c_stop();
     2f4:	0e 94 2b 01 	call	0x256	; 0x256 <i2c_stop>
}
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	1f 91       	pop	r17
     2fe:	0f 91       	pop	r16
     300:	ff 90       	pop	r15
     302:	ef 90       	pop	r14
     304:	08 95       	ret

00000306 <lcd_data>:
void lcd_data(uint8_t data[], uint16_t size) {
     306:	ef 92       	push	r14
     308:	ff 92       	push	r15
     30a:	0f 93       	push	r16
     30c:	1f 93       	push	r17
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	7c 01       	movw	r14, r24
     314:	8b 01       	movw	r16, r22
    i2c_start((LCD_I2C_ADR << 1) | I2C_WRITE);
     316:	88 e7       	ldi	r24, 0x78	; 120
     318:	0e 94 18 01 	call	0x230	; 0x230 <i2c_start>
    i2c_byte(0x40);    // 0x00 for command, 0x40 for data
     31c:	80 e4       	ldi	r24, 0x40	; 64
     31e:	0e 94 2f 01 	call	0x25e	; 0x25e <i2c_byte>
    for (uint16_t i = 0; i<size; i++) {
     322:	01 15       	cp	r16, r1
     324:	11 05       	cpc	r17, r1
     326:	49 f0       	breq	.+18     	; 0x33a <lcd_data+0x34>
     328:	e7 01       	movw	r28, r14
     32a:	0e 0d       	add	r16, r14
     32c:	1f 1d       	adc	r17, r15
        i2c_byte(data[i]);
     32e:	89 91       	ld	r24, Y+
     330:	0e 94 2f 01 	call	0x25e	; 0x25e <i2c_byte>
    i2c_stop();
}
void lcd_data(uint8_t data[], uint16_t size) {
    i2c_start((LCD_I2C_ADR << 1) | I2C_WRITE);
    i2c_byte(0x40);    // 0x00 for command, 0x40 for data
    for (uint16_t i = 0; i<size; i++) {
     334:	c0 17       	cp	r28, r16
     336:	d1 07       	cpc	r29, r17
     338:	d1 f7       	brne	.-12     	; 0x32e <lcd_data+0x28>
        i2c_byte(data[i]);
    }
    i2c_stop();
     33a:	0e 94 2b 01 	call	0x256	; 0x256 <i2c_stop>
}
     33e:	df 91       	pop	r29
     340:	cf 91       	pop	r28
     342:	1f 91       	pop	r17
     344:	0f 91       	pop	r16
     346:	ff 90       	pop	r15
     348:	ef 90       	pop	r14
     34a:	08 95       	ret

0000034c <lcd_gotoxy>:
    }
    commandSequence[sizeof(init_sequence)]=(dispAttr);
    lcd_command(commandSequence, sizeof(commandSequence));
    lcd_clrscr();
}
void lcd_gotoxy(uint8_t x, uint8_t y){
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	00 d0       	rcall	.+0      	; 0x352 <lcd_gotoxy+0x6>
     352:	00 d0       	rcall	.+0      	; 0x354 <lcd_gotoxy+0x8>
     354:	1f 92       	push	r1
     356:	cd b7       	in	r28, 0x3d	; 61
     358:	de b7       	in	r29, 0x3e	; 62
    if( x > (DISPLAY_WIDTH/sizeof(FONT[0])) || y > (DISPLAY_HEIGHT/8-1)) return;// out of display
     35a:	86 31       	cpi	r24, 0x16	; 22
     35c:	38 f5       	brcc	.+78     	; 0x3ac <lcd_gotoxy+0x60>
     35e:	68 30       	cpi	r22, 0x08	; 8
     360:	28 f5       	brcc	.+74     	; 0x3ac <lcd_gotoxy+0x60>
    x = x * sizeof(FONT[0]);
     362:	98 2f       	mov	r25, r24
     364:	99 0f       	add	r25, r25
     366:	89 0f       	add	r24, r25
     368:	88 0f       	add	r24, r24
    cursorPosition.x=x;
     36a:	e2 e0       	ldi	r30, 0x02	; 2
     36c:	f5 e0       	ldi	r31, 0x05	; 5
     36e:	80 83       	st	Z, r24
    cursorPosition.y=y;
     370:	61 83       	std	Z+1, r22	; 0x01
#if defined SSD1306
    uint8_t commandSequence[] = {0xb0+y, 0x21, x, 0x7f};
#elif defined SH1106
    uint8_t commandSequence[] = {0xb0+y, 0x21, 0x00+((2+x) & (0x0f)), 0x10+( ((2+x) & (0xf0)) >> 4 ), 0x7f};
     372:	60 55       	subi	r22, 0x50	; 80
     374:	69 83       	std	Y+1, r22	; 0x01
     376:	91 e2       	ldi	r25, 0x21	; 33
     378:	9a 83       	std	Y+2, r25	; 0x02
     37a:	92 e0       	ldi	r25, 0x02	; 2
     37c:	98 0f       	add	r25, r24
     37e:	9f 70       	andi	r25, 0x0F	; 15
     380:	9b 83       	std	Y+3, r25	; 0x03
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	02 96       	adiw	r24, 0x02	; 2
     386:	80 7f       	andi	r24, 0xF0	; 240
     388:	99 27       	eor	r25, r25
     38a:	95 95       	asr	r25
     38c:	87 95       	ror	r24
     38e:	95 95       	asr	r25
     390:	87 95       	ror	r24
     392:	95 95       	asr	r25
     394:	87 95       	ror	r24
     396:	95 95       	asr	r25
     398:	87 95       	ror	r24
     39a:	80 5f       	subi	r24, 0xF0	; 240
     39c:	8c 83       	std	Y+4, r24	; 0x04
     39e:	8f e7       	ldi	r24, 0x7F	; 127
     3a0:	8d 83       	std	Y+5, r24	; 0x05
#endif
    lcd_command(commandSequence, sizeof(commandSequence));
     3a2:	65 e0       	ldi	r22, 0x05	; 5
     3a4:	ce 01       	movw	r24, r28
     3a6:	01 96       	adiw	r24, 0x01	; 1
     3a8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_command>
}
     3ac:	0f 90       	pop	r0
     3ae:	0f 90       	pop	r0
     3b0:	0f 90       	pop	r0
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	08 95       	ret

000003bc <lcd_home>:
    }
#endif
    lcd_home();
}
void lcd_home(void){
    lcd_gotoxy(0, 0);
     3bc:	60 e0       	ldi	r22, 0x00	; 0
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	0e 94 a6 01 	call	0x34c	; 0x34c <lcd_gotoxy>
     3c4:	08 95       	ret

000003c6 <lcd_clrscr>:
#elif defined SH1106
    uint8_t commandSequence[] = {0xb0+y, 0x21, 0x00+((2+x) & (0x0f)), 0x10+( ((2+x) & (0xf0)) >> 4 ), 0x7f};
#endif
    lcd_command(commandSequence, sizeof(commandSequence));
}
void lcd_clrscr(void){
     3c6:	0f 93       	push	r16
     3c8:	1f 93       	push	r17
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	02 e0       	ldi	r16, 0x02	; 2
     3d0:	11 e0       	ldi	r17, 0x01	; 1
#ifdef GRAPHICMODE
    for (uint8_t i = 0; i < DISPLAY_HEIGHT/8; i++){
     3d2:	c0 e0       	ldi	r28, 0x00	; 0
        memset(displayBuffer[i], 0x00, sizeof(displayBuffer[i]));
     3d4:	d0 e8       	ldi	r29, 0x80	; 128
     3d6:	f8 01       	movw	r30, r16
     3d8:	8d 2f       	mov	r24, r29
     3da:	11 92       	st	Z+, r1
     3dc:	8a 95       	dec	r24
     3de:	e9 f7       	brne	.-6      	; 0x3da <lcd_clrscr+0x14>
        lcd_gotoxy(0,i);
     3e0:	6c 2f       	mov	r22, r28
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	0e 94 a6 01 	call	0x34c	; 0x34c <lcd_gotoxy>
        lcd_data(displayBuffer[i], sizeof(displayBuffer[i]));
     3e8:	60 e8       	ldi	r22, 0x80	; 128
     3ea:	70 e0       	ldi	r23, 0x00	; 0
     3ec:	c8 01       	movw	r24, r16
     3ee:	0e 94 83 01 	call	0x306	; 0x306 <lcd_data>
#endif
    lcd_command(commandSequence, sizeof(commandSequence));
}
void lcd_clrscr(void){
#ifdef GRAPHICMODE
    for (uint8_t i = 0; i < DISPLAY_HEIGHT/8; i++){
     3f2:	cf 5f       	subi	r28, 0xFF	; 255
     3f4:	00 58       	subi	r16, 0x80	; 128
     3f6:	1f 4f       	sbci	r17, 0xFF	; 255
     3f8:	c8 30       	cpi	r28, 0x08	; 8
     3fa:	69 f7       	brne	.-38     	; 0x3d6 <lcd_clrscr+0x10>
    for (uint8_t i = 0; i < DISPLAY_HEIGHT/8; i++){
        lcd_gotoxy(0,i);
        lcd_data(displayBuffer, sizeof(displayBuffer));
    }
#endif
    lcd_home();
     3fc:	0e 94 de 01 	call	0x3bc	; 0x3bc <lcd_home>
}
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	1f 91       	pop	r17
     406:	0f 91       	pop	r16
     408:	08 95       	ret

0000040a <lcd_init>:
    }
    i2c_stop();
}
#pragma mark -
#pragma mark GENERAL FUNCTIONS
void lcd_init(uint8_t dispAttr){
     40a:	1f 93       	push	r17
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
     414:	6c 97       	sbiw	r28, 0x1c	; 28
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	f8 94       	cli
     41a:	de bf       	out	0x3e, r29	; 62
     41c:	0f be       	out	0x3f, r0	; 63
     41e:	cd bf       	out	0x3d, r28	; 61
     420:	18 2f       	mov	r17, r24
    i2c_init();
     422:	0e 94 0f 01 	call	0x21e	; 0x21e <i2c_init>
     426:	e4 ec       	ldi	r30, 0xC4	; 196
     428:	f1 e0       	ldi	r31, 0x01	; 1
     42a:	de 01       	movw	r26, r28
     42c:	11 96       	adiw	r26, 0x01	; 1
     42e:	9e 01       	movw	r18, r28
     430:	24 5e       	subi	r18, 0xE4	; 228
     432:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t commandSequence[sizeof(init_sequence)+1];
    for (uint8_t i = 0; i < sizeof (init_sequence); i++) {
        commandSequence[i] = (pgm_read_byte(&init_sequence[i]));
     434:	84 91       	lpm	r24, Z
     436:	8d 93       	st	X+, r24
     438:	31 96       	adiw	r30, 0x01	; 1
#pragma mark -
#pragma mark GENERAL FUNCTIONS
void lcd_init(uint8_t dispAttr){
    i2c_init();
    uint8_t commandSequence[sizeof(init_sequence)+1];
    for (uint8_t i = 0; i < sizeof (init_sequence); i++) {
     43a:	a2 17       	cp	r26, r18
     43c:	b3 07       	cpc	r27, r19
     43e:	d1 f7       	brne	.-12     	; 0x434 <lcd_init+0x2a>
        commandSequence[i] = (pgm_read_byte(&init_sequence[i]));
    }
    commandSequence[sizeof(init_sequence)]=(dispAttr);
     440:	1c 8f       	std	Y+28, r17	; 0x1c
    lcd_command(commandSequence, sizeof(commandSequence));
     442:	6c e1       	ldi	r22, 0x1C	; 28
     444:	ce 01       	movw	r24, r28
     446:	01 96       	adiw	r24, 0x01	; 1
     448:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_command>
    lcd_clrscr();
     44c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <lcd_clrscr>
}
     450:	6c 96       	adiw	r28, 0x1c	; 28
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	f8 94       	cli
     456:	de bf       	out	0x3e, r29	; 62
     458:	0f be       	out	0x3f, r0	; 63
     45a:	cd bf       	out	0x3d, r28	; 61
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	1f 91       	pop	r17
     462:	08 95       	ret

00000464 <initUART0>:
void uart0_puti16B (uint16_t value)
{
	char _buffer[17];
	itoa( value, _buffer, 2 );	//conversion from integer to char
	uart0_puts(_buffer);
}
     464:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     468:	87 e6       	ldi	r24, 0x67	; 103
     46a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     46e:	e0 ec       	ldi	r30, 0xC0	; 192
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	10 82       	st	Z, r1
     474:	88 e9       	ldi	r24, 0x98	; 152
     476:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     47a:	86 e0       	ldi	r24, 0x06	; 6
     47c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     480:	80 81       	ld	r24, Z
     482:	80 64       	ori	r24, 0x40	; 64
     484:	80 83       	st	Z, r24
     486:	08 95       	ret

00000488 <uart0_putc>:
     488:	e0 ec       	ldi	r30, 0xC0	; 192
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	90 81       	ld	r25, Z
     48e:	95 ff       	sbrs	r25, 5
     490:	fd cf       	rjmp	.-6      	; 0x48c <uart0_putc+0x4>
     492:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     496:	08 95       	ret

00000498 <__vector_18>:
double raw;
uint16_t numuS;
uint8_t hit = 0;
uint8_t obstacle = 0;

ISR(USART_RX_vect) {// Connection receiver interrupt
     498:	1f 92       	push	r1
     49a:	0f 92       	push	r0
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	0f 92       	push	r0
     4a0:	11 24       	eor	r1, r1
     4a2:	8f 93       	push	r24
	commandChar = UDR0;
     4a4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     4a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
     4ac:	8f 91       	pop	r24
     4ae:	0f 90       	pop	r0
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	0f 90       	pop	r0
     4b4:	1f 90       	pop	r1
     4b6:	18 95       	reti

000004b8 <__vector_4>:

ISR(PCINT1_vect) {
     4b8:	1f 92       	push	r1
     4ba:	0f 92       	push	r0
     4bc:	0f b6       	in	r0, 0x3f	; 63
     4be:	0f 92       	push	r0
     4c0:	11 24       	eor	r1, r1
     4c2:	2f 93       	push	r18
     4c4:	3f 93       	push	r19
     4c6:	4f 93       	push	r20
     4c8:	5f 93       	push	r21
     4ca:	6f 93       	push	r22
     4cc:	7f 93       	push	r23
     4ce:	8f 93       	push	r24
     4d0:	9f 93       	push	r25
     4d2:	af 93       	push	r26
     4d4:	bf 93       	push	r27
     4d6:	cf 93       	push	r28
     4d8:	ef 93       	push	r30
     4da:	ff 93       	push	r31
	if (bit_is_set(PINC,PORTC3)) {					// Checks if echo is high
     4dc:	33 9b       	sbis	0x06, 3	; 6
     4de:	05 c0       	rjmp	.+10     	; 0x4ea <__vector_4+0x32>
		TCNT1 = 0;								// Reset Timer
     4e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     4e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     4e8:	39 c0       	rjmp	.+114    	; 0x55c <__vector_4+0xa4>
		} else {
		numuS = TCNT1;					// Save Timer value
     4ea:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     4ee:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     4f2:	90 93 0c 05 	sts	0x050C, r25	; 0x80050c <numuS+0x1>
     4f6:	80 93 0b 05 	sts	0x050B, r24	; 0x80050b <numuS>
		uint8_t oldSREG = SREG;
     4fa:	cf b7       	in	r28, 0x3f	; 63
		cli();	
     4fc:	f8 94       	cli
		//Bounding the distance between 2cm and 30 cm	
		if(numuS < 1863){
     4fe:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <numuS>
     502:	90 91 0c 05 	lds	r25, 0x050C	; 0x80050c <numuS+0x1>
     506:	87 34       	cpi	r24, 0x47	; 71
     508:	27 e0       	ldi	r18, 0x07	; 7
     50a:	92 07       	cpc	r25, r18
     50c:	38 f4       	brcc	.+14     	; 0x51c <__vector_4+0x64>
			numuS = 1863;
     50e:	87 e4       	ldi	r24, 0x47	; 71
     510:	97 e0       	ldi	r25, 0x07	; 7
     512:	90 93 0c 05 	sts	0x050C, r25	; 0x80050c <numuS+0x1>
     516:	80 93 0b 05 	sts	0x050B, r24	; 0x80050b <numuS>
     51a:	09 c0       	rjmp	.+18     	; 0x52e <__vector_4+0x76>
		} else if(numuS > 27936){
     51c:	81 32       	cpi	r24, 0x21	; 33
     51e:	9d 46       	sbci	r25, 0x6D	; 109
     520:	30 f0       	brcs	.+12     	; 0x52e <__vector_4+0x76>
			numuS = 27936;
     522:	80 e2       	ldi	r24, 0x20	; 32
     524:	9d e6       	ldi	r25, 0x6D	; 109
     526:	90 93 0c 05 	sts	0x050C, r25	; 0x80050c <numuS+0x1>
     52a:	80 93 0b 05 	sts	0x050B, r24	; 0x80050b <numuS>
		}	else {}
		
								// Disable Global interrupts
		raw = numuS * 0.00107388316;
     52e:	60 91 0b 05 	lds	r22, 0x050B	; 0x80050b <numuS>
     532:	70 91 0c 05 	lds	r23, 0x050C	; 0x80050c <numuS+0x1>
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	0e 94 20 07 	call	0xe40	; 0xe40 <__floatunsisf>
     53e:	2a e8       	ldi	r18, 0x8A	; 138
     540:	31 ec       	ldi	r19, 0xC1	; 193
     542:	4c e8       	ldi	r20, 0x8C	; 140
     544:	5a e3       	ldi	r21, 0x3A	; 58
     546:	0e 94 d7 07 	call	0xfae	; 0xfae <__mulsf3>
     54a:	60 93 07 05 	sts	0x0507, r22	; 0x800507 <raw>
     54e:	70 93 08 05 	sts	0x0508, r23	; 0x800508 <raw+0x1>
     552:	80 93 09 05 	sts	0x0509, r24	; 0x800509 <raw+0x2>
     556:	90 93 0a 05 	sts	0x050A, r25	; 0x80050a <raw+0x3>

		SREG = oldSREG;							// Enable interrupts
     55a:	cf bf       	out	0x3f, r28	; 63
		// Toggle debugging LED
	}
		
}
     55c:	ff 91       	pop	r31
     55e:	ef 91       	pop	r30
     560:	cf 91       	pop	r28
     562:	bf 91       	pop	r27
     564:	af 91       	pop	r26
     566:	9f 91       	pop	r25
     568:	8f 91       	pop	r24
     56a:	7f 91       	pop	r23
     56c:	6f 91       	pop	r22
     56e:	5f 91       	pop	r21
     570:	4f 91       	pop	r20
     572:	3f 91       	pop	r19
     574:	2f 91       	pop	r18
     576:	0f 90       	pop	r0
     578:	0f be       	out	0x3f, r0	; 63
     57a:	0f 90       	pop	r0
     57c:	1f 90       	pop	r1
     57e:	18 95       	reti

00000580 <initializePWM>:
/* ****************************** End of Main *****************************/

//Changes the contents of the relevant registers to allow for PWM on 2 separate pins that serve as input for the motor-driver module.
void initializePWM(){
		
	DDRD |= (1 << PWM_L) | (1 << PWM_R);
     580:	8a b1       	in	r24, 0x0a	; 10
     582:	80 66       	ori	r24, 0x60	; 96
     584:	8a b9       	out	0x0a, r24	; 10
		
	OCR0A = 0;
     586:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
     588:	18 bc       	out	0x28, r1	; 40

	// set none-inverting mode
	TCCR0A |= (1 << COM0A1);
     58a:	84 b5       	in	r24, 0x24	; 36
     58c:	80 68       	ori	r24, 0x80	; 128
     58e:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0B1);
     590:	84 b5       	in	r24, 0x24	; 36
     592:	80 62       	ori	r24, 0x20	; 32
     594:	84 bd       	out	0x24, r24	; 36

	// set fast PWM Mode
	TCCR0A |= (1 << WGM01) | (1 << WGM00);
     596:	84 b5       	in	r24, 0x24	; 36
     598:	83 60       	ori	r24, 0x03	; 3
     59a:	84 bd       	out	0x24, r24	; 36
		
		
	// set prescaler to 8 and starts PWM
	//Temp disabled prescaler
	TCCR0B |= (1 << CS02) | (1 << CS00);
     59c:	85 b5       	in	r24, 0x25	; 37
     59e:	85 60       	ori	r24, 0x05	; 5
     5a0:	85 bd       	out	0x25, r24	; 37
     5a2:	08 95       	ret

000005a4 <initializeMotors>:
}

//initializeMotors is a convenient subroutine which can be called in order set the required pins to output and initializes PWM with the expectation
//that the motors should not work if PWM has not been initialized.
void initializeMotors(){
	initializePWM();
     5a4:	0e 94 c0 02 	call	0x580	; 0x580 <initializePWM>
		
	DDRD |= (1 << L_CTRL_1) | (1 << L_CTRL_2) | (1 << R_CTRL_1);
     5a8:	8a b1       	in	r24, 0x0a	; 10
     5aa:	84 69       	ori	r24, 0x94	; 148
     5ac:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1 << R_CTRL_2);
     5ae:	20 9a       	sbi	0x04, 0	; 4
     5b0:	08 95       	ret

000005b2 <initializeUltrasonic>:
}
	
//Initialization of pin mask interrupt for the echo to get accurate readings
void initializeUltrasonic() {
		
	DDRC = 0xFF;							// Port C all output. PC0: RW		PC1: RS		PC2: E
     5b2:	8f ef       	ldi	r24, 0xFF	; 255
     5b4:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~(1<<DDC3);						// Set Pin C5 as input to read Echo
     5b6:	3b 98       	cbi	0x07, 3	; 7
	PORTC |= (1<<PORTC3);					// Enable pull up on C5
     5b8:	43 9a       	sbi	0x08, 3	; 8
	PORTC &= ~(1<<PORTC2);						// Init C4 as low (trigger)
     5ba:	42 98       	cbi	0x08, 2	; 8

	PRR &= ~(1<<PRTIM1);					// To activate timer1 module
     5bc:	e4 e6       	ldi	r30, 0x64	; 100
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	80 81       	ld	r24, Z
     5c2:	87 7f       	andi	r24, 0xF7	; 247
     5c4:	80 83       	st	Z, r24
	TCNT1 = 0;								// Initial timer value
     5c6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     5ca:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TCCR1B |= (1<<CS10);					// Timer without prescaller. Since default clock for atmega328p is 1Mhz period is 1uS
     5ce:	e1 e8       	ldi	r30, 0x81	; 129
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	80 81       	ld	r24, Z
     5d4:	81 60       	ori	r24, 0x01	; 1
     5d6:	80 83       	st	Z, r24
	TCCR1B |= (1<<ICES1);					// First capture on rising edge
     5d8:	80 81       	ld	r24, Z
     5da:	80 64       	ori	r24, 0x40	; 64
     5dc:	80 83       	st	Z, r24

	PCICR = (1<<PCIE1);						// Enable PCINT[14:8] we use pin C5 which is PCINT13
     5de:	82 e0       	ldi	r24, 0x02	; 2
     5e0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK1 = (1<<PCINT11);					// Enable C5 interrupt
     5e4:	88 e0       	ldi	r24, 0x08	; 8
     5e6:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
     5ea:	08 95       	ret

000005ec <leftFwd>:
}

//Rotate the leftMotor CW
void leftFwd(uint8_t spd){
	PORTD |= (1 << L_CTRL_1);
     5ec:	5a 9a       	sbi	0x0b, 2	; 11
	PORTD &= ~(1 << L_CTRL_2);
     5ee:	5c 98       	cbi	0x0b, 4	; 11
//This sub-routine defines the dutyCycle of the motors by writing to the respective timer0 registers which will drive the motors.
void analogWrite(uint8_t pin, uint8_t dutyCycle) {
	
	//TODO: Do some checking so that value is between 0-255
	if(pin == PWM_L) {
		OCR0B = dutyCycle;
     5f0:	88 bd       	out	0x28, r24	; 40
     5f2:	08 95       	ret

000005f4 <leftRev>:
		
}

//Rotate the leftMotor CCW
void leftRev(uint8_t spd){
	PORTD &= ~(1 << L_CTRL_1);
     5f4:	5a 98       	cbi	0x0b, 2	; 11
	PORTD |= (1 << L_CTRL_2);
     5f6:	5c 9a       	sbi	0x0b, 4	; 11
//This sub-routine defines the dutyCycle of the motors by writing to the respective timer0 registers which will drive the motors.
void analogWrite(uint8_t pin, uint8_t dutyCycle) {
	
	//TODO: Do some checking so that value is between 0-255
	if(pin == PWM_L) {
		OCR0B = dutyCycle;
     5f8:	88 bd       	out	0x28, r24	; 40
     5fa:	08 95       	ret

000005fc <rightFwd>:
	analogWrite(PWM_L, spd);
}

//Rotate right motor CW
void rightFwd(uint8_t spd){
	PORTD |= (1 << R_CTRL_1);
     5fc:	5f 9a       	sbi	0x0b, 7	; 11
	PORTB &= ~(1 << R_CTRL_2);
     5fe:	28 98       	cbi	0x05, 0	; 5
	
	//TODO: Do some checking so that value is between 0-255
	if(pin == PWM_L) {
		OCR0B = dutyCycle;
	} else if(pin == PWM_R) {
		OCR0A = dutyCycle;
     600:	87 bd       	out	0x27, r24	; 39
     602:	08 95       	ret

00000604 <rightRev>:
	analogWrite(PWM_R, spd);
}

//Rotate right motor CCW
void rightRev(uint8_t spd){
	PORTD &= ~(1 << R_CTRL_1);
     604:	5f 98       	cbi	0x0b, 7	; 11
	PORTB |= (1 << R_CTRL_2);
     606:	28 9a       	sbi	0x05, 0	; 5
	
	//TODO: Do some checking so that value is between 0-255
	if(pin == PWM_L) {
		OCR0B = dutyCycle;
	} else if(pin == PWM_R) {
		OCR0A = dutyCycle;
     608:	87 bd       	out	0x27, r24	; 39
     60a:	08 95       	ret

0000060c <leftStop>:
	analogWrite(PWM_R, spd);
}

//Stop left motor
void leftStop(){
	PORTD &= ~(1 << L_CTRL_1);
     60c:	5a 98       	cbi	0x0b, 2	; 11
	PORTD &= ~(1 << L_CTRL_2);
     60e:	5c 98       	cbi	0x0b, 4	; 11
//This sub-routine defines the dutyCycle of the motors by writing to the respective timer0 registers which will drive the motors.
void analogWrite(uint8_t pin, uint8_t dutyCycle) {
	
	//TODO: Do some checking so that value is between 0-255
	if(pin == PWM_L) {
		OCR0B = dutyCycle;
     610:	18 bc       	out	0x28, r1	; 40
     612:	08 95       	ret

00000614 <rightStop>:
	analogWrite(PWM_L, 0);
}

//Stop right motor
void rightStop(){
	PORTD &= ~(1 << R_CTRL_1);
     614:	5f 98       	cbi	0x0b, 7	; 11
	PORTB &= ~(1 << R_CTRL_2);
     616:	28 98       	cbi	0x05, 0	; 5
	
	//TODO: Do some checking so that value is between 0-255
	if(pin == PWM_L) {
		OCR0B = dutyCycle;
	} else if(pin == PWM_R) {
		OCR0A = dutyCycle;
     618:	17 bc       	out	0x27, r1	; 39
     61a:	08 95       	ret

0000061c <stop>:
	analogWrite(PWM_R, 0);
}

//Stop both motors
void stop(){
	leftStop();
     61c:	0e 94 06 03 	call	0x60c	; 0x60c <leftStop>
	rightStop();
     620:	0e 94 0a 03 	call	0x614	; 0x614 <rightStop>
     624:	08 95       	ret

00000626 <drive>:
}

//Takes in a value either positive or negative that will drive both motors at the same speed. If the value is negative the car will move CCW or in reverse
void drive(int speed) {
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
	if(speed > 0){
     62a:	18 16       	cp	r1, r24
     62c:	19 06       	cpc	r1, r25
     62e:	74 f4       	brge	.+28     	; 0x64c <drive+0x26>
		leftFwd((uint8_t) abs(speed));
     630:	ec 01       	movw	r28, r24
     632:	99 23       	and	r25, r25
     634:	24 f4       	brge	.+8      	; 0x63e <drive+0x18>
     636:	cc 27       	eor	r28, r28
     638:	dd 27       	eor	r29, r29
     63a:	c8 1b       	sub	r28, r24
     63c:	d9 0b       	sbc	r29, r25
     63e:	8c 2f       	mov	r24, r28
     640:	0e 94 f6 02 	call	0x5ec	; 0x5ec <leftFwd>
		rightRev((uint8_t) abs(speed));
     644:	8c 2f       	mov	r24, r28
     646:	0e 94 02 03 	call	0x604	; 0x604 <rightRev>
     64a:	0d c0       	rjmp	.+26     	; 0x666 <drive+0x40>
	} else {
		leftRev((uint8_t) abs(speed));
     64c:	ec 01       	movw	r28, r24
     64e:	99 23       	and	r25, r25
     650:	24 f4       	brge	.+8      	; 0x65a <drive+0x34>
     652:	cc 27       	eor	r28, r28
     654:	dd 27       	eor	r29, r29
     656:	c8 1b       	sub	r28, r24
     658:	d9 0b       	sbc	r29, r25
     65a:	8c 2f       	mov	r24, r28
     65c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <leftRev>
		rightFwd((uint8_t) abs(speed));
     660:	8c 2f       	mov	r24, r28
     662:	0e 94 fe 02 	call	0x5fc	; 0x5fc <rightFwd>
	}
}
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	08 95       	ret

0000066c <rightMotor>:
	rightMotor(speed);
	leftMotor(speed/2);
}

void rightMotor(int speed) {
	if(speed > 0) {
     66c:	18 16       	cp	r1, r24
     66e:	19 06       	cpc	r1, r25
     670:	5c f4       	brge	.+22     	; 0x688 <rightMotor+0x1c>
		rightFwd((uint8_t) abs(speed));
     672:	9c 01       	movw	r18, r24
     674:	99 23       	and	r25, r25
     676:	24 f4       	brge	.+8      	; 0x680 <rightMotor+0x14>
     678:	22 27       	eor	r18, r18
     67a:	33 27       	eor	r19, r19
     67c:	28 1b       	sub	r18, r24
     67e:	39 0b       	sbc	r19, r25
     680:	82 2f       	mov	r24, r18
     682:	0e 94 fe 02 	call	0x5fc	; 0x5fc <rightFwd>
     686:	08 95       	ret
	} else {
		rightRev((uint8_t) abs(speed));
     688:	9c 01       	movw	r18, r24
     68a:	99 23       	and	r25, r25
     68c:	24 f4       	brge	.+8      	; 0x696 <rightMotor+0x2a>
     68e:	22 27       	eor	r18, r18
     690:	33 27       	eor	r19, r19
     692:	28 1b       	sub	r18, r24
     694:	39 0b       	sbc	r19, r25
     696:	82 2f       	mov	r24, r18
     698:	0e 94 02 03 	call	0x604	; 0x604 <rightRev>
     69c:	08 95       	ret

0000069e <leftMotor>:
	}
}

void leftMotor(int speed) {
	if(speed > 0){
     69e:	18 16       	cp	r1, r24
     6a0:	19 06       	cpc	r1, r25
     6a2:	5c f4       	brge	.+22     	; 0x6ba <leftMotor+0x1c>
		//leftFwd((uint8_t) abs(speed));
		leftRev((uint8_t) abs(speed));
     6a4:	9c 01       	movw	r18, r24
     6a6:	99 23       	and	r25, r25
     6a8:	24 f4       	brge	.+8      	; 0x6b2 <leftMotor+0x14>
     6aa:	22 27       	eor	r18, r18
     6ac:	33 27       	eor	r19, r19
     6ae:	28 1b       	sub	r18, r24
     6b0:	39 0b       	sbc	r19, r25
     6b2:	82 2f       	mov	r24, r18
     6b4:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <leftRev>
     6b8:	08 95       	ret
		} else {
		//leftRev((uint8_t) abs(speed));
		leftFwd((uint8_t) abs(speed));
     6ba:	9c 01       	movw	r18, r24
     6bc:	99 23       	and	r25, r25
     6be:	24 f4       	brge	.+8      	; 0x6c8 <leftMotor+0x2a>
     6c0:	22 27       	eor	r18, r18
     6c2:	33 27       	eor	r19, r19
     6c4:	28 1b       	sub	r18, r24
     6c6:	39 0b       	sbc	r19, r25
     6c8:	82 2f       	mov	r24, r18
     6ca:	0e 94 f6 02 	call	0x5ec	; 0x5ec <leftFwd>
     6ce:	08 95       	ret

000006d0 <turnRight>:
		leftRev((uint8_t) abs(speed));
		rightFwd((uint8_t) abs(speed));
	}
}

void turnRight(int speed) {
     6d0:	cf 93       	push	r28
     6d2:	df 93       	push	r29
	speed = -speed;
     6d4:	cc 27       	eor	r28, r28
     6d6:	dd 27       	eor	r29, r29
     6d8:	c8 1b       	sub	r28, r24
     6da:	d9 0b       	sbc	r29, r25
	rightMotor(speed/2);
     6dc:	ce 01       	movw	r24, r28
     6de:	0a f4       	brpl	.+2      	; 0x6e2 <turnRight+0x12>
     6e0:	01 96       	adiw	r24, 0x01	; 1
     6e2:	95 95       	asr	r25
     6e4:	87 95       	ror	r24
     6e6:	0e 94 36 03 	call	0x66c	; 0x66c <rightMotor>
	leftMotor(speed);
     6ea:	ce 01       	movw	r24, r28
     6ec:	0e 94 4f 03 	call	0x69e	; 0x69e <leftMotor>
}
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	08 95       	ret

000006f6 <turnLeft>:

void turnLeft(int speed) {
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
	speed = -speed;
     6fa:	cc 27       	eor	r28, r28
     6fc:	dd 27       	eor	r29, r29
     6fe:	c8 1b       	sub	r28, r24
     700:	d9 0b       	sbc	r29, r25
	rightMotor(speed);
     702:	ce 01       	movw	r24, r28
     704:	0e 94 36 03 	call	0x66c	; 0x66c <rightMotor>
	leftMotor(speed/2);
     708:	ce 01       	movw	r24, r28
     70a:	dd 23       	and	r29, r29
     70c:	0c f4       	brge	.+2      	; 0x710 <turnLeft+0x1a>
     70e:	01 96       	adiw	r24, 0x01	; 1
     710:	95 95       	asr	r25
     712:	87 95       	ror	r24
     714:	0e 94 4f 03 	call	0x69e	; 0x69e <leftMotor>
}
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	08 95       	ret

0000071e <sendUltraSonicSignal>:
		leftFwd((uint8_t) abs(speed));
	}
}
	
void sendUltraSonicSignal(){
	PORTC |= (1<<PORTC2);						// Set trigger high
     71e:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     720:	85 e3       	ldi	r24, 0x35	; 53
     722:	8a 95       	dec	r24
     724:	f1 f7       	brne	.-4      	; 0x722 <sendUltraSonicSignal+0x4>
     726:	00 00       	nop
	_delay_us(10);							// for 10uS
	PORTC &= ~(1<<PORTC2);						// to trigger the ultrasonic module
     728:	42 98       	cbi	0x08, 2	; 8
     72a:	08 95       	ret

0000072c <main>:
	}
		
}

/* ****************************** Start of main *****************************/
int main(void) {
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
     730:	cd b7       	in	r28, 0x3d	; 61
     732:	de b7       	in	r29, 0x3e	; 62
     734:	c0 57       	subi	r28, 0x70	; 112
     736:	d1 09       	sbc	r29, r1
     738:	0f b6       	in	r0, 0x3f	; 63
     73a:	f8 94       	cli
     73c:	de bf       	out	0x3e, r29	; 62
     73e:	0f be       	out	0x3f, r0	; 63
     740:	cd bf       	out	0x3d, r28	; 61
	initUART0();
     742:	0e 94 32 02 	call	0x464	; 0x464 <initUART0>
	initializeMotors();
     746:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <initializeMotors>
	initializeUltrasonic();
     74a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <initializeUltrasonic>
	sei();
     74e:	78 94       	sei
	DDRB =	0xFF;
     750:	8f ef       	ldi	r24, 0xFF	; 255
     752:	84 b9       	out	0x04, r24	; 4
	char distance[100];
	char axg_arr[10];
	char ayg_arr[10];
	char azg_arr[10];
		
	lcd_init(0xAF);    // init lcd and turn on
     754:	8f ea       	ldi	r24, 0xAF	; 175
     756:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_init>
	//init mpu6050
	mpu6050_init();
     75a:	0e 94 d7 05 	call	0xbae	; 0xbae <mpu6050_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     75e:	2f ef       	ldi	r18, 0xFF	; 255
     760:	80 e7       	ldi	r24, 0x70	; 112
     762:	92 e0       	ldi	r25, 0x02	; 2
     764:	21 50       	subi	r18, 0x01	; 1
     766:	80 40       	sbci	r24, 0x00	; 0
     768:	90 40       	sbci	r25, 0x00	; 0
     76a:	e1 f7       	brne	.-8      	; 0x764 <main+0x38>
     76c:	00 c0       	rjmp	.+0      	; 0x76e <main+0x42>
     76e:	00 00       	nop
	int16_t ay = 0;
	int16_t az = 0;
	int16_t gx = 0;
	int16_t gy = 0;
	int16_t gz = 0;
	double axg = 0;
     770:	a9 96       	adiw	r28, 0x29	; 41
     772:	1c ae       	std	Y+60, r1	; 0x3c
     774:	1d ae       	std	Y+61, r1	; 0x3d
     776:	1e ae       	std	Y+62, r1	; 0x3e
     778:	1f ae       	std	Y+63, r1	; 0x3f
     77a:	a9 97       	sbiw	r28, 0x29	; 41
	double ayg = 0;
     77c:	ad 96       	adiw	r28, 0x2d	; 45
     77e:	1c ae       	std	Y+60, r1	; 0x3c
     780:	1d ae       	std	Y+61, r1	; 0x3d
     782:	1e ae       	std	Y+62, r1	; 0x3e
     784:	1f ae       	std	Y+63, r1	; 0x3f
     786:	ad 97       	sbiw	r28, 0x2d	; 45
	double azg = 0;
     788:	e1 96       	adiw	r28, 0x31	; 49
     78a:	1c ae       	std	Y+60, r1	; 0x3c
     78c:	1d ae       	std	Y+61, r1	; 0x3d
     78e:	1e ae       	std	Y+62, r1	; 0x3e
     790:	1f ae       	std	Y+63, r1	; 0x3f
     792:	e1 97       	sbiw	r28, 0x31	; 49
		axg = axg + MPU_AXOFFSET;
		ayg = ayg + MPU_AYOFFSET;
		azg = azg + MPU_AZOFFSET;
		
		if((axg > HIT_THRESHHOLD_LR || axg < -HIT_THRESHHOLD_LR) || (ayg > HIT_THRESHHOLD_FB || ayg < -HIT_THRESHHOLD_FB)){
			hit = 1;
     794:	bb 24       	eor	r11, r11
     796:	b3 94       	inc	r11
     798:	2f ef       	ldi	r18, 0xFF	; 255
     79a:	8d ee       	ldi	r24, 0xED	; 237
     79c:	92 e0       	ldi	r25, 0x02	; 2
     79e:	21 50       	subi	r18, 0x01	; 1
     7a0:	80 40       	sbci	r24, 0x00	; 0
     7a2:	90 40       	sbci	r25, 0x00	; 0
     7a4:	e1 f7       	brne	.-8      	; 0x79e <main+0x72>
     7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <main+0x7c>
     7a8:	00 00       	nop
	
	while(1) {
		_delay_ms(60);

		#if MPU6050_GETATTITUDE == 0
		mpu6050_getConvAccelData(&axg, &ayg, &azg);
     7aa:	ae 01       	movw	r20, r28
     7ac:	43 59       	subi	r20, 0x93	; 147
     7ae:	5f 4f       	sbci	r21, 0xFF	; 255
     7b0:	be 01       	movw	r22, r28
     7b2:	67 59       	subi	r22, 0x97	; 151
     7b4:	7f 4f       	sbci	r23, 0xFF	; 255
     7b6:	ce 01       	movw	r24, r28
     7b8:	8b 59       	subi	r24, 0x9B	; 155
     7ba:	9f 4f       	sbci	r25, 0xFF	; 255
     7bc:	0e 94 34 06 	call	0xc68	; 0xc68 <mpu6050_getConvAccelData>
		axg = axg + MPU_AXOFFSET;
     7c0:	2a e0       	ldi	r18, 0x0A	; 10
     7c2:	37 ed       	ldi	r19, 0xD7	; 215
     7c4:	43 ea       	ldi	r20, 0xA3	; 163
     7c6:	5c e3       	ldi	r21, 0x3C	; 60
     7c8:	a9 96       	adiw	r28, 0x29	; 41
     7ca:	6c ad       	ldd	r22, Y+60	; 0x3c
     7cc:	7d ad       	ldd	r23, Y+61	; 0x3d
     7ce:	8e ad       	ldd	r24, Y+62	; 0x3e
     7d0:	9f ad       	ldd	r25, Y+63	; 0x3f
     7d2:	a9 97       	sbiw	r28, 0x29	; 41
     7d4:	0e 94 af 06 	call	0xd5e	; 0xd5e <__addsf3>
     7d8:	6b 01       	movw	r12, r22
     7da:	7c 01       	movw	r14, r24
     7dc:	a9 96       	adiw	r28, 0x29	; 41
     7de:	6c af       	std	Y+60, r22	; 0x3c
     7e0:	7d af       	std	Y+61, r23	; 0x3d
     7e2:	8e af       	std	Y+62, r24	; 0x3e
     7e4:	9f af       	std	Y+63, r25	; 0x3f
     7e6:	a9 97       	sbiw	r28, 0x29	; 41
		ayg = ayg + MPU_AYOFFSET;
     7e8:	2d ec       	ldi	r18, 0xCD	; 205
     7ea:	3c ec       	ldi	r19, 0xCC	; 204
     7ec:	4c e4       	ldi	r20, 0x4C	; 76
     7ee:	5d e3       	ldi	r21, 0x3D	; 61
     7f0:	ad 96       	adiw	r28, 0x2d	; 45
     7f2:	6c ad       	ldd	r22, Y+60	; 0x3c
     7f4:	7d ad       	ldd	r23, Y+61	; 0x3d
     7f6:	8e ad       	ldd	r24, Y+62	; 0x3e
     7f8:	9f ad       	ldd	r25, Y+63	; 0x3f
     7fa:	ad 97       	sbiw	r28, 0x2d	; 45
     7fc:	0e 94 af 06 	call	0xd5e	; 0xd5e <__addsf3>
     800:	2b 01       	movw	r4, r22
     802:	3c 01       	movw	r6, r24
     804:	ad 96       	adiw	r28, 0x2d	; 45
     806:	6c af       	std	Y+60, r22	; 0x3c
     808:	7d af       	std	Y+61, r23	; 0x3d
     80a:	8e af       	std	Y+62, r24	; 0x3e
     80c:	9f af       	std	Y+63, r25	; 0x3f
     80e:	ad 97       	sbiw	r28, 0x2d	; 45
		azg = azg + MPU_AZOFFSET;
     810:	2d ec       	ldi	r18, 0xCD	; 205
     812:	3c ec       	ldi	r19, 0xCC	; 204
     814:	4c e4       	ldi	r20, 0x4C	; 76
     816:	5e e3       	ldi	r21, 0x3E	; 62
     818:	e1 96       	adiw	r28, 0x31	; 49
     81a:	6c ad       	ldd	r22, Y+60	; 0x3c
     81c:	7d ad       	ldd	r23, Y+61	; 0x3d
     81e:	8e ad       	ldd	r24, Y+62	; 0x3e
     820:	9f ad       	ldd	r25, Y+63	; 0x3f
     822:	e1 97       	sbiw	r28, 0x31	; 49
     824:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__subsf3>
     828:	e1 96       	adiw	r28, 0x31	; 49
     82a:	6c af       	std	Y+60, r22	; 0x3c
     82c:	7d af       	std	Y+61, r23	; 0x3d
     82e:	8e af       	std	Y+62, r24	; 0x3e
     830:	9f af       	std	Y+63, r25	; 0x3f
     832:	e1 97       	sbiw	r28, 0x31	; 49
		
		if((axg > HIT_THRESHHOLD_LR || axg < -HIT_THRESHHOLD_LR) || (ayg > HIT_THRESHHOLD_FB || ayg < -HIT_THRESHHOLD_FB)){
     834:	2d ec       	ldi	r18, 0xCD	; 205
     836:	3c ec       	ldi	r19, 0xCC	; 204
     838:	4c e4       	ldi	r20, 0x4C	; 76
     83a:	5e e3       	ldi	r21, 0x3E	; 62
     83c:	c7 01       	movw	r24, r14
     83e:	b6 01       	movw	r22, r12
     840:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__gesf2>
     844:	18 16       	cp	r1, r24
     846:	f4 f0       	brlt	.+60     	; 0x884 <main+0x158>
     848:	2d ec       	ldi	r18, 0xCD	; 205
     84a:	3c ec       	ldi	r19, 0xCC	; 204
     84c:	4c e4       	ldi	r20, 0x4C	; 76
     84e:	5e eb       	ldi	r21, 0xBE	; 190
     850:	c7 01       	movw	r24, r14
     852:	b6 01       	movw	r22, r12
     854:	0e 94 1b 07 	call	0xe36	; 0xe36 <__cmpsf2>
     858:	88 23       	and	r24, r24
     85a:	a4 f0       	brlt	.+40     	; 0x884 <main+0x158>
     85c:	2a e9       	ldi	r18, 0x9A	; 154
     85e:	39 e9       	ldi	r19, 0x99	; 153
     860:	49 e1       	ldi	r20, 0x19	; 25
     862:	5f e3       	ldi	r21, 0x3F	; 63
     864:	c3 01       	movw	r24, r6
     866:	b2 01       	movw	r22, r4
     868:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__gesf2>
     86c:	18 16       	cp	r1, r24
     86e:	54 f0       	brlt	.+20     	; 0x884 <main+0x158>
     870:	2a e9       	ldi	r18, 0x9A	; 154
     872:	39 e9       	ldi	r19, 0x99	; 153
     874:	49 e1       	ldi	r20, 0x19	; 25
     876:	5f eb       	ldi	r21, 0xBF	; 191
     878:	c3 01       	movw	r24, r6
     87a:	b2 01       	movw	r22, r4
     87c:	0e 94 1b 07 	call	0xe36	; 0xe36 <__cmpsf2>
     880:	88 23       	and	r24, r24
     882:	14 f4       	brge	.+4      	; 0x888 <main+0x15c>
			hit = 1;
     884:	b0 92 05 05 	sts	0x0505, r11	; 0x800505 <hit>
		}
		#endif
		
		sendUltraSonicSignal();
     888:	0e 94 8f 03 	call	0x71e	; 0x71e <sendUltraSonicSignal>
		dtostrf(raw, 3, 1, distance);
     88c:	60 91 07 05 	lds	r22, 0x0507	; 0x800507 <raw>
     890:	70 91 08 05 	lds	r23, 0x0508	; 0x800508 <raw+0x1>
     894:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <raw+0x2>
     898:	90 91 0a 05 	lds	r25, 0x050A	; 0x80050a <raw+0x3>
     89c:	8e 01       	movw	r16, r28
     89e:	0f 5f       	subi	r16, 0xFF	; 255
     8a0:	1f 4f       	sbci	r17, 0xFF	; 255
     8a2:	2b 2d       	mov	r18, r11
     8a4:	43 e0       	ldi	r20, 0x03	; 3
     8a6:	0e 94 4a 08 	call	0x1094	; 0x1094 <dtostrf>
		if(raw < 6){
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	40 ec       	ldi	r20, 0xC0	; 192
     8b0:	50 e4       	ldi	r21, 0x40	; 64
     8b2:	60 91 07 05 	lds	r22, 0x0507	; 0x800507 <raw>
     8b6:	70 91 08 05 	lds	r23, 0x0508	; 0x800508 <raw+0x1>
     8ba:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <raw+0x2>
     8be:	90 91 0a 05 	lds	r25, 0x050A	; 0x80050a <raw+0x3>
     8c2:	0e 94 1b 07 	call	0xe36	; 0xe36 <__cmpsf2>
     8c6:	88 23       	and	r24, r24
     8c8:	3c f4       	brge	.+14     	; 0x8d8 <main+0x1ac>
			obstacle = 1;
     8ca:	b0 92 04 05 	sts	0x0504, r11	; 0x800504 <obstacle>
			obstacle = 0;
		}
		
		
		if(obstacle){
			if(commandChar == 'b' || commandChar == 'B'){
     8ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     8d2:	82 36       	cpi	r24, 0x62	; 98
     8d4:	41 f4       	brne	.+16     	; 0x8e6 <main+0x1ba>
     8d6:	0b c0       	rjmp	.+22     	; 0x8ee <main+0x1c2>
		sendUltraSonicSignal();
		dtostrf(raw, 3, 1, distance);
		if(raw < 6){
			obstacle = 1;
		} else {
			obstacle = 0;
     8d8:	10 92 04 05 	sts	0x0504, r1	; 0x800504 <obstacle>
				
			} else {
				uart0_putc('O');
				stop();
			}
		} else if(hit){
     8dc:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <hit>
     8e0:	81 11       	cpse	r24, r1
     8e2:	10 c0       	rjmp	.+32     	; 0x904 <__stack+0x5>
     8e4:	20 c0       	rjmp	.+64     	; 0x926 <__stack+0x27>
			obstacle = 0;
		}
		
		
		if(obstacle){
			if(commandChar == 'b' || commandChar == 'B'){
     8e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     8ea:	82 34       	cpi	r24, 0x42	; 66
     8ec:	29 f4       	brne	.+10     	; 0x8f8 <main+0x1cc>
				//Let the car back up
				drive(-HALF_SPEED);
     8ee:	81 e8       	ldi	r24, 0x81	; 129
     8f0:	9f ef       	ldi	r25, 0xFF	; 255
     8f2:	0e 94 13 03 	call	0x626	; 0x626 <drive>
     8f6:	50 cf       	rjmp	.-352    	; 0x798 <main+0x6c>
				
			} else {
				uart0_putc('O');
     8f8:	8f e4       	ldi	r24, 0x4F	; 79
     8fa:	0e 94 44 02 	call	0x488	; 0x488 <uart0_putc>
				stop();
     8fe:	0e 94 0e 03 	call	0x61c	; 0x61c <stop>
     902:	4a cf       	rjmp	.-364    	; 0x798 <main+0x6c>
			}
		} else if(hit){
			uart0_putc('H');
     904:	88 e4       	ldi	r24, 0x48	; 72
     906:	0e 94 44 02 	call	0x488	; 0x488 <uart0_putc>
			stop();
     90a:	0e 94 0e 03 	call	0x61c	; 0x61c <stop>
     90e:	2f ef       	ldi	r18, 0xFF	; 255
     910:	83 ed       	ldi	r24, 0xD3	; 211
     912:	90 e3       	ldi	r25, 0x30	; 48
     914:	21 50       	subi	r18, 0x01	; 1
     916:	80 40       	sbci	r24, 0x00	; 0
     918:	90 40       	sbci	r25, 0x00	; 0
     91a:	e1 f7       	brne	.-8      	; 0x914 <__stack+0x15>
     91c:	00 c0       	rjmp	.+0      	; 0x91e <__stack+0x1f>
     91e:	00 00       	nop
			_delay_ms(1000);
			hit=0;	
     920:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <hit>
     924:	39 cf       	rjmp	.-398    	; 0x798 <main+0x6c>
		} else{
			uart0_putc('D');
     926:	84 e4       	ldi	r24, 0x44	; 68
     928:	0e 94 44 02 	call	0x488	; 0x488 <uart0_putc>
			switch(commandChar) {
     92c:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     930:	8e 2f       	mov	r24, r30
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	fc 01       	movw	r30, r24
     936:	e2 54       	subi	r30, 0x42	; 66
     938:	f1 09       	sbc	r31, r1
     93a:	e1 33       	cpi	r30, 0x31	; 49
     93c:	f1 05       	cpc	r31, r1
     93e:	08 f0       	brcs	.+2      	; 0x942 <__stack+0x43>
     940:	2b cf       	rjmp	.-426    	; 0x798 <main+0x6c>
     942:	ec 5c       	subi	r30, 0xCC	; 204
     944:	ff 4f       	sbci	r31, 0xFF	; 255
     946:	0c 94 44 08 	jmp	0x1088	; 0x1088 <__tablejump2__>
				case 'S':
				stop();
     94a:	0e 94 0e 03 	call	0x61c	; 0x61c <stop>
				break;
     94e:	24 cf       	rjmp	.-440    	; 0x798 <main+0x6c>
				case 'L':
				turnLeft(FULL_SPEED);
     950:	8f ef       	ldi	r24, 0xFF	; 255
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <turnLeft>
				break;
     958:	1f cf       	rjmp	.-450    	; 0x798 <main+0x6c>
				case 'l':
				turnLeft(HALF_SPEED);
     95a:	8f e7       	ldi	r24, 0x7F	; 127
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <turnLeft>
				break;
     962:	1a cf       	rjmp	.-460    	; 0x798 <main+0x6c>
				case 'R':
				turnRight(FULL_SPEED);
     964:	8f ef       	ldi	r24, 0xFF	; 255
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	0e 94 68 03 	call	0x6d0	; 0x6d0 <turnRight>
				break;
     96c:	15 cf       	rjmp	.-470    	; 0x798 <main+0x6c>
				case 'r':
				turnRight(HALF_SPEED);
     96e:	8f e7       	ldi	r24, 0x7F	; 127
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	0e 94 68 03 	call	0x6d0	; 0x6d0 <turnRight>
				break;
     976:	10 cf       	rjmp	.-480    	; 0x798 <main+0x6c>
				case 'F':
				drive(FULL_SPEED);
     978:	8f ef       	ldi	r24, 0xFF	; 255
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	0e 94 13 03 	call	0x626	; 0x626 <drive>
				break;
     980:	0b cf       	rjmp	.-490    	; 0x798 <main+0x6c>
				case 'f':
				drive(HALF_SPEED);
     982:	8f e7       	ldi	r24, 0x7F	; 127
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	0e 94 13 03 	call	0x626	; 0x626 <drive>
				break;
     98a:	06 cf       	rjmp	.-500    	; 0x798 <main+0x6c>
				case 'B':
				drive(-FULL_SPEED);
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	9f ef       	ldi	r25, 0xFF	; 255
     990:	0e 94 13 03 	call	0x626	; 0x626 <drive>
				break;
     994:	01 cf       	rjmp	.-510    	; 0x798 <main+0x6c>
				case 'b':
				drive(-HALF_SPEED);
     996:	81 e8       	ldi	r24, 0x81	; 129
     998:	9f ef       	ldi	r25, 0xFF	; 255
     99a:	0e 94 13 03 	call	0x626	; 0x626 <drive>
				break;
     99e:	fc ce       	rjmp	.-520    	; 0x798 <main+0x6c>

000009a0 <mpu6050_readBytes>:
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
}
     9a0:	af 92       	push	r10
     9a2:	bf 92       	push	r11
     9a4:	cf 92       	push	r12
     9a6:	df 92       	push	r13
     9a8:	ff 92       	push	r15
     9aa:	0f 93       	push	r16
     9ac:	1f 93       	push	r17
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	66 23       	and	r22, r22
     9b4:	b9 f1       	breq	.+110    	; 0xa24 <mpu6050_readBytes+0x84>
     9b6:	c5 2f       	mov	r28, r21
     9b8:	d4 2f       	mov	r29, r20
     9ba:	f6 2e       	mov	r15, r22
     9bc:	18 2f       	mov	r17, r24
     9be:	80 ed       	ldi	r24, 0xD0	; 208
     9c0:	0e 94 18 01 	call	0x230	; 0x230 <i2c_start>
     9c4:	81 2f       	mov	r24, r17
     9c6:	0e 94 2f 01 	call	0x25e	; 0x25e <i2c_byte>
     9ca:	83 e0       	ldi	r24, 0x03	; 3
     9cc:	8a 95       	dec	r24
     9ce:	f1 f7       	brne	.-4      	; 0x9cc <mpu6050_readBytes+0x2c>
     9d0:	00 00       	nop
     9d2:	81 ed       	ldi	r24, 0xD1	; 209
     9d4:	0e 94 18 01 	call	0x230	; 0x230 <i2c_start>
     9d8:	0d 2f       	mov	r16, r29
     9da:	1c 2f       	mov	r17, r28
     9dc:	cc 24       	eor	r12, r12
     9de:	ca 94       	dec	r12
     9e0:	cf 0c       	add	r12, r15
     9e2:	d1 2c       	mov	r13, r1
     9e4:	ef ef       	ldi	r30, 0xFF	; 255
     9e6:	ce 1a       	sub	r12, r30
     9e8:	de 0a       	sbc	r13, r30
     9ea:	c0 e0       	ldi	r28, 0x00	; 0
     9ec:	d0 e0       	ldi	r29, 0x00	; 0
     9ee:	af 2c       	mov	r10, r15
     9f0:	b1 2c       	mov	r11, r1
     9f2:	f1 e0       	ldi	r31, 0x01	; 1
     9f4:	af 1a       	sub	r10, r31
     9f6:	b1 08       	sbc	r11, r1
     9f8:	ac 16       	cp	r10, r28
     9fa:	bd 06       	cpc	r11, r29
     9fc:	29 f4       	brne	.+10     	; 0xa08 <mpu6050_readBytes+0x68>
     9fe:	0e 94 51 01 	call	0x2a2	; 0x2a2 <i2c_readNAck>
     a02:	f8 01       	movw	r30, r16
     a04:	80 83       	st	Z, r24
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <mpu6050_readBytes+0x70>
     a08:	0e 94 3a 01 	call	0x274	; 0x274 <i2c_readAck>
     a0c:	f8 01       	movw	r30, r16
     a0e:	80 83       	st	Z, r24
     a10:	21 96       	adiw	r28, 0x01	; 1
     a12:	0f 5f       	subi	r16, 0xFF	; 255
     a14:	1f 4f       	sbci	r17, 0xFF	; 255
     a16:	cc 15       	cp	r28, r12
     a18:	dd 05       	cpc	r29, r13
     a1a:	71 f7       	brne	.-36     	; 0x9f8 <mpu6050_readBytes+0x58>
     a1c:	cf 2d       	mov	r28, r15
     a1e:	0e 94 2b 01 	call	0x256	; 0x256 <i2c_stop>
     a22:	01 c0       	rjmp	.+2      	; 0xa26 <mpu6050_readBytes+0x86>
     a24:	c0 e0       	ldi	r28, 0x00	; 0
     a26:	8c 2f       	mov	r24, r28
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	ff 90       	pop	r15
     a32:	df 90       	pop	r13
     a34:	cf 90       	pop	r12
     a36:	bf 90       	pop	r11
     a38:	af 90       	pop	r10
     a3a:	08 95       	ret

00000a3c <mpu6050_readByte>:
     a3c:	ab 01       	movw	r20, r22
     a3e:	61 e0       	ldi	r22, 0x01	; 1
     a40:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <mpu6050_readBytes>
     a44:	08 95       	ret

00000a46 <mpu6050_writeBytes>:
     a46:	ef 92       	push	r14
     a48:	ff 92       	push	r15
     a4a:	0f 93       	push	r16
     a4c:	1f 93       	push	r17
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	66 23       	and	r22, r22
     a54:	d1 f0       	breq	.+52     	; 0xa8a <mpu6050_writeBytes+0x44>
     a56:	7a 01       	movw	r14, r20
     a58:	16 2f       	mov	r17, r22
     a5a:	c8 2f       	mov	r28, r24
     a5c:	80 ed       	ldi	r24, 0xD0	; 208
     a5e:	0e 94 18 01 	call	0x230	; 0x230 <i2c_start>
     a62:	8c 2f       	mov	r24, r28
     a64:	0e 94 2f 01 	call	0x25e	; 0x25e <i2c_byte>
     a68:	e7 01       	movw	r28, r14
     a6a:	6f ef       	ldi	r22, 0xFF	; 255
     a6c:	61 0f       	add	r22, r17
     a6e:	06 2f       	mov	r16, r22
     a70:	10 e0       	ldi	r17, 0x00	; 0
     a72:	0f 5f       	subi	r16, 0xFF	; 255
     a74:	1f 4f       	sbci	r17, 0xFF	; 255
     a76:	0e 0d       	add	r16, r14
     a78:	1f 1d       	adc	r17, r15
     a7a:	89 91       	ld	r24, Y+
     a7c:	0e 94 2f 01 	call	0x25e	; 0x25e <i2c_byte>
     a80:	c0 17       	cp	r28, r16
     a82:	d1 07       	cpc	r29, r17
     a84:	d1 f7       	brne	.-12     	; 0xa7a <mpu6050_writeBytes+0x34>
     a86:	0e 94 2b 01 	call	0x256	; 0x256 <i2c_stop>
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	1f 91       	pop	r17
     a90:	0f 91       	pop	r16
     a92:	ff 90       	pop	r15
     a94:	ef 90       	pop	r14
     a96:	08 95       	ret

00000a98 <mpu6050_writeByte>:
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	1f 92       	push	r1
     a9e:	cd b7       	in	r28, 0x3d	; 61
     aa0:	de b7       	in	r29, 0x3e	; 62
     aa2:	69 83       	std	Y+1, r22	; 0x01
     aa4:	ae 01       	movw	r20, r28
     aa6:	4f 5f       	subi	r20, 0xFF	; 255
     aa8:	5f 4f       	sbci	r21, 0xFF	; 255
     aaa:	61 e0       	ldi	r22, 0x01	; 1
     aac:	0e 94 23 05 	call	0xa46	; 0xa46 <mpu6050_writeBytes>
     ab0:	0f 90       	pop	r0
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	08 95       	ret

00000ab8 <mpu6050_writeBits>:
     ab8:	ef 92       	push	r14
     aba:	ff 92       	push	r15
     abc:	0f 93       	push	r16
     abe:	1f 93       	push	r17
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	1f 92       	push	r1
     ac6:	cd b7       	in	r28, 0x3d	; 61
     ac8:	de b7       	in	r29, 0x3e	; 62
     aca:	44 23       	and	r20, r20
     acc:	89 f1       	breq	.+98     	; 0xb30 <mpu6050_writeBits+0x78>
     ace:	f2 2e       	mov	r15, r18
     ad0:	14 2f       	mov	r17, r20
     ad2:	06 2f       	mov	r16, r22
     ad4:	e8 2e       	mov	r14, r24
     ad6:	19 82       	std	Y+1, r1	; 0x01
     ad8:	be 01       	movw	r22, r28
     ada:	6f 5f       	subi	r22, 0xFF	; 255
     adc:	7f 4f       	sbci	r23, 0xFF	; 255
     ade:	0e 94 1e 05 	call	0xa3c	; 0xa3c <mpu6050_readByte>
     ae2:	88 23       	and	r24, r24
     ae4:	29 f1       	breq	.+74     	; 0xb30 <mpu6050_writeBits+0x78>
     ae6:	40 2f       	mov	r20, r16
     ae8:	50 e0       	ldi	r21, 0x00	; 0
     aea:	41 1b       	sub	r20, r17
     aec:	51 09       	sbc	r21, r1
     aee:	4f 5f       	subi	r20, 0xFF	; 255
     af0:	5f 4f       	sbci	r21, 0xFF	; 255
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	02 c0       	rjmp	.+4      	; 0xafc <mpu6050_writeBits+0x44>
     af8:	88 0f       	add	r24, r24
     afa:	99 1f       	adc	r25, r25
     afc:	1a 95       	dec	r17
     afe:	e2 f7       	brpl	.-8      	; 0xaf8 <mpu6050_writeBits+0x40>
     b00:	01 97       	sbiw	r24, 0x01	; 1
     b02:	04 2e       	mov	r0, r20
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <mpu6050_writeBits+0x52>
     b06:	88 0f       	add	r24, r24
     b08:	99 1f       	adc	r25, r25
     b0a:	0a 94       	dec	r0
     b0c:	e2 f7       	brpl	.-8      	; 0xb06 <mpu6050_writeBits+0x4e>
     b0e:	2f 2d       	mov	r18, r15
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	02 c0       	rjmp	.+4      	; 0xb18 <mpu6050_writeBits+0x60>
     b14:	22 0f       	add	r18, r18
     b16:	33 1f       	adc	r19, r19
     b18:	4a 95       	dec	r20
     b1a:	e2 f7       	brpl	.-8      	; 0xb14 <mpu6050_writeBits+0x5c>
     b1c:	68 2f       	mov	r22, r24
     b1e:	60 95       	com	r22
     b20:	99 81       	ldd	r25, Y+1	; 0x01
     b22:	69 23       	and	r22, r25
     b24:	82 23       	and	r24, r18
     b26:	68 2b       	or	r22, r24
     b28:	69 83       	std	Y+1, r22	; 0x01
     b2a:	8e 2d       	mov	r24, r14
     b2c:	0e 94 4c 05 	call	0xa98	; 0xa98 <mpu6050_writeByte>
     b30:	0f 90       	pop	r0
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	ff 90       	pop	r15
     b3c:	ef 90       	pop	r14
     b3e:	08 95       	ret

00000b40 <mpu6050_writeBit>:
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	1f 92       	push	r1
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	18 2f       	mov	r17, r24
     b52:	06 2f       	mov	r16, r22
     b54:	f4 2e       	mov	r15, r20
     b56:	be 01       	movw	r22, r28
     b58:	6f 5f       	subi	r22, 0xFF	; 255
     b5a:	7f 4f       	sbci	r23, 0xFF	; 255
     b5c:	0e 94 1e 05 	call	0xa3c	; 0xa3c <mpu6050_readByte>
     b60:	ff 20       	and	r15, r15
     b62:	51 f0       	breq	.+20     	; 0xb78 <mpu6050_writeBit+0x38>
     b64:	61 e0       	ldi	r22, 0x01	; 1
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <mpu6050_writeBit+0x2e>
     b6a:	66 0f       	add	r22, r22
     b6c:	77 1f       	adc	r23, r23
     b6e:	0a 95       	dec	r16
     b70:	e2 f7       	brpl	.-8      	; 0xb6a <mpu6050_writeBit+0x2a>
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	68 2b       	or	r22, r24
     b76:	0a c0       	rjmp	.+20     	; 0xb8c <mpu6050_writeBit+0x4c>
     b78:	61 e0       	ldi	r22, 0x01	; 1
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	02 c0       	rjmp	.+4      	; 0xb82 <mpu6050_writeBit+0x42>
     b7e:	66 0f       	add	r22, r22
     b80:	77 1f       	adc	r23, r23
     b82:	0a 95       	dec	r16
     b84:	e2 f7       	brpl	.-8      	; 0xb7e <mpu6050_writeBit+0x3e>
     b86:	60 95       	com	r22
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	68 23       	and	r22, r24
     b8c:	69 83       	std	Y+1, r22	; 0x01
     b8e:	81 2f       	mov	r24, r17
     b90:	0e 94 4c 05 	call	0xa98	; 0xa98 <mpu6050_writeByte>
     b94:	0f 90       	pop	r0
     b96:	df 91       	pop	r29
     b98:	cf 91       	pop	r28
     b9a:	1f 91       	pop	r17
     b9c:	0f 91       	pop	r16
     b9e:	ff 90       	pop	r15
     ba0:	08 95       	ret

00000ba2 <mpu6050_setSleepDisabled>:
     ba2:	40 e0       	ldi	r20, 0x00	; 0
     ba4:	66 e0       	ldi	r22, 0x06	; 6
     ba6:	8b e6       	ldi	r24, 0x6B	; 107
     ba8:	0e 94 a0 05 	call	0xb40	; 0xb40 <mpu6050_writeBit>
     bac:	08 95       	ret

00000bae <mpu6050_init>:
     bae:	0e 94 0f 01 	call	0x21e	; 0x21e <i2c_init>
     bb2:	83 e0       	ldi	r24, 0x03	; 3
     bb4:	8a 95       	dec	r24
     bb6:	f1 f7       	brne	.-4      	; 0xbb4 <mpu6050_init+0x6>
     bb8:	00 00       	nop
     bba:	87 ea       	ldi	r24, 0xA7	; 167
     bbc:	91 e6       	ldi	r25, 0x61	; 97
     bbe:	01 97       	sbiw	r24, 0x01	; 1
     bc0:	f1 f7       	brne	.-4      	; 0xbbe <mpu6050_init+0x10>
     bc2:	00 c0       	rjmp	.+0      	; 0xbc4 <mpu6050_init+0x16>
     bc4:	00 00       	nop
     bc6:	0e 94 d1 05 	call	0xba2	; 0xba2 <mpu6050_setSleepDisabled>
     bca:	83 ec       	ldi	r24, 0xC3	; 195
     bcc:	99 e0       	ldi	r25, 0x09	; 9
     bce:	01 97       	sbiw	r24, 0x01	; 1
     bd0:	f1 f7       	brne	.-4      	; 0xbce <mpu6050_init+0x20>
     bd2:	00 c0       	rjmp	.+0      	; 0xbd4 <mpu6050_init+0x26>
     bd4:	00 00       	nop
     bd6:	21 e0       	ldi	r18, 0x01	; 1
     bd8:	43 e0       	ldi	r20, 0x03	; 3
     bda:	62 e0       	ldi	r22, 0x02	; 2
     bdc:	8b e6       	ldi	r24, 0x6B	; 107
     bde:	0e 94 5c 05 	call	0xab8	; 0xab8 <mpu6050_writeBits>
     be2:	23 e0       	ldi	r18, 0x03	; 3
     be4:	43 e0       	ldi	r20, 0x03	; 3
     be6:	62 e0       	ldi	r22, 0x02	; 2
     be8:	8a e1       	ldi	r24, 0x1A	; 26
     bea:	0e 94 5c 05 	call	0xab8	; 0xab8 <mpu6050_writeBits>
     bee:	64 e0       	ldi	r22, 0x04	; 4
     bf0:	89 e1       	ldi	r24, 0x19	; 25
     bf2:	0e 94 4c 05 	call	0xa98	; 0xa98 <mpu6050_writeByte>
     bf6:	23 e0       	ldi	r18, 0x03	; 3
     bf8:	42 e0       	ldi	r20, 0x02	; 2
     bfa:	64 e0       	ldi	r22, 0x04	; 4
     bfc:	8b e1       	ldi	r24, 0x1B	; 27
     bfe:	0e 94 5c 05 	call	0xab8	; 0xab8 <mpu6050_writeBits>
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	42 e0       	ldi	r20, 0x02	; 2
     c06:	64 e0       	ldi	r22, 0x04	; 4
     c08:	8c e1       	ldi	r24, 0x1C	; 28
     c0a:	0e 94 5c 05 	call	0xab8	; 0xab8 <mpu6050_writeBits>
     c0e:	08 95       	ret

00000c10 <mpu6050_getRawAccelData>:

//can not accept many request if we alreay have getattitude requests
/*
 * get raw accel data including the x y and z axis
 */
void mpu6050_getRawAccelData(int16_t* ax, int16_t* ay, int16_t* az) {
     c10:	ef 92       	push	r14
     c12:	ff 92       	push	r15
     c14:	0f 93       	push	r16
     c16:	1f 93       	push	r17
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
     c1c:	7c 01       	movw	r14, r24
     c1e:	8b 01       	movw	r16, r22
     c20:	ea 01       	movw	r28, r20
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 6, (uint8_t *)buffer);
     c22:	4d e0       	ldi	r20, 0x0D	; 13
     c24:	55 e0       	ldi	r21, 0x05	; 5
     c26:	66 e0       	ldi	r22, 0x06	; 6
     c28:	8b e3       	ldi	r24, 0x3B	; 59
     c2a:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <mpu6050_readBytes>

    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
     c2e:	ed e0       	ldi	r30, 0x0D	; 13
     c30:	f5 e0       	ldi	r31, 0x05	; 5
     c32:	20 81       	ld	r18, Z
     c34:	81 81       	ldd	r24, Z+1	; 0x01
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	92 2b       	or	r25, r18
     c3a:	d7 01       	movw	r26, r14
     c3c:	8d 93       	st	X+, r24
     c3e:	9c 93       	st	X, r25
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
     c40:	22 81       	ldd	r18, Z+2	; 0x02
     c42:	83 81       	ldd	r24, Z+3	; 0x03
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	92 2b       	or	r25, r18
     c48:	d8 01       	movw	r26, r16
     c4a:	8d 93       	st	X+, r24
     c4c:	9c 93       	st	X, r25
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
     c4e:	24 81       	ldd	r18, Z+4	; 0x04
     c50:	85 81       	ldd	r24, Z+5	; 0x05
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	92 2b       	or	r25, r18
     c56:	99 83       	std	Y+1, r25	; 0x01
     c58:	88 83       	st	Y, r24
}
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	1f 91       	pop	r17
     c60:	0f 91       	pop	r16
     c62:	ff 90       	pop	r15
     c64:	ef 90       	pop	r14
     c66:	08 95       	ret

00000c68 <mpu6050_getConvAccelData>:

/*
 * get raw accel data  converted to g and deg/sec values
 */
void mpu6050_getConvAccelData(double* axg, double* ayg, double* azg) {
     c68:	cf 92       	push	r12
     c6a:	df 92       	push	r13
     c6c:	ef 92       	push	r14
     c6e:	ff 92       	push	r15
     c70:	0f 93       	push	r16
     c72:	1f 93       	push	r17
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	00 d0       	rcall	.+0      	; 0xc7a <mpu6050_getConvAccelData+0x12>
     c7a:	00 d0       	rcall	.+0      	; 0xc7c <mpu6050_getConvAccelData+0x14>
     c7c:	00 d0       	rcall	.+0      	; 0xc7e <mpu6050_getConvAccelData+0x16>
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
     c82:	6c 01       	movw	r12, r24
     c84:	7b 01       	movw	r14, r22
     c86:	8a 01       	movw	r16, r20
	int16_t ax = 0;
     c88:	1a 82       	std	Y+2, r1	; 0x02
     c8a:	19 82       	std	Y+1, r1	; 0x01
	int16_t ay = 0;
     c8c:	1c 82       	std	Y+4, r1	; 0x04
     c8e:	1b 82       	std	Y+3, r1	; 0x03
	int16_t az = 0;
     c90:	1e 82       	std	Y+6, r1	; 0x06
     c92:	1d 82       	std	Y+5, r1	; 0x05
	
	mpu6050_getRawAccelData(&ax, &ay, &az);
     c94:	ae 01       	movw	r20, r28
     c96:	4b 5f       	subi	r20, 0xFB	; 251
     c98:	5f 4f       	sbci	r21, 0xFF	; 255
     c9a:	be 01       	movw	r22, r28
     c9c:	6d 5f       	subi	r22, 0xFD	; 253
     c9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ca0:	ce 01       	movw	r24, r28
     ca2:	01 96       	adiw	r24, 0x01	; 1
     ca4:	0e 94 08 06 	call	0xc10	; 0xc10 <mpu6050_getRawAccelData>

	#if MPU6050_CALIBRATEDACCGYRO == 1
    *axg = (double)(ax-MPU6050_AXOFFSET)/MPU6050_AXGAIN;
     ca8:	69 81       	ldd	r22, Y+1	; 0x01
     caa:	7a 81       	ldd	r23, Y+2	; 0x02
     cac:	07 2e       	mov	r0, r23
     cae:	00 0c       	add	r0, r0
     cb0:	88 0b       	sbc	r24, r24
     cb2:	99 0b       	sbc	r25, r25
     cb4:	0e 94 22 07 	call	0xe44	; 0xe44 <__floatsisf>
     cb8:	2a e0       	ldi	r18, 0x0A	; 10
     cba:	37 ed       	ldi	r19, 0xD7	; 215
     cbc:	43 ea       	ldi	r20, 0xA3	; 163
     cbe:	5c e3       	ldi	r21, 0x3C	; 60
     cc0:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__subsf3>
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	40 e8       	ldi	r20, 0x80	; 128
     cca:	58 e3       	ldi	r21, 0x38	; 56
     ccc:	0e 94 d7 07 	call	0xfae	; 0xfae <__mulsf3>
     cd0:	f6 01       	movw	r30, r12
     cd2:	60 83       	st	Z, r22
     cd4:	71 83       	std	Z+1, r23	; 0x01
     cd6:	82 83       	std	Z+2, r24	; 0x02
     cd8:	93 83       	std	Z+3, r25	; 0x03
    *ayg = (double)(ay-MPU6050_AYOFFSET)/MPU6050_AYGAIN;
     cda:	6b 81       	ldd	r22, Y+3	; 0x03
     cdc:	7c 81       	ldd	r23, Y+4	; 0x04
     cde:	07 2e       	mov	r0, r23
     ce0:	00 0c       	add	r0, r0
     ce2:	88 0b       	sbc	r24, r24
     ce4:	99 0b       	sbc	r25, r25
     ce6:	0e 94 22 07 	call	0xe44	; 0xe44 <__floatsisf>
     cea:	2d ec       	ldi	r18, 0xCD	; 205
     cec:	3c ec       	ldi	r19, 0xCC	; 204
     cee:	4c e4       	ldi	r20, 0x4C	; 76
     cf0:	5d e3       	ldi	r21, 0x3D	; 61
     cf2:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__subsf3>
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e8       	ldi	r20, 0x80	; 128
     cfc:	58 e3       	ldi	r21, 0x38	; 56
     cfe:	0e 94 d7 07 	call	0xfae	; 0xfae <__mulsf3>
     d02:	f7 01       	movw	r30, r14
     d04:	60 83       	st	Z, r22
     d06:	71 83       	std	Z+1, r23	; 0x01
     d08:	82 83       	std	Z+2, r24	; 0x02
     d0a:	93 83       	std	Z+3, r25	; 0x03
    *azg = (double)(az-MPU6050_AZOFFSET)/MPU6050_AZGAIN;
     d0c:	6d 81       	ldd	r22, Y+5	; 0x05
     d0e:	7e 81       	ldd	r23, Y+6	; 0x06
     d10:	07 2e       	mov	r0, r23
     d12:	00 0c       	add	r0, r0
     d14:	88 0b       	sbc	r24, r24
     d16:	99 0b       	sbc	r25, r25
     d18:	0e 94 22 07 	call	0xe44	; 0xe44 <__floatsisf>
     d1c:	2d ec       	ldi	r18, 0xCD	; 205
     d1e:	3c ec       	ldi	r19, 0xCC	; 204
     d20:	4c e4       	ldi	r20, 0x4C	; 76
     d22:	5e e3       	ldi	r21, 0x3E	; 62
     d24:	0e 94 af 06 	call	0xd5e	; 0xd5e <__addsf3>
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	40 e8       	ldi	r20, 0x80	; 128
     d2e:	58 e3       	ldi	r21, 0x38	; 56
     d30:	0e 94 d7 07 	call	0xfae	; 0xfae <__mulsf3>
     d34:	f8 01       	movw	r30, r16
     d36:	60 83       	st	Z, r22
     d38:	71 83       	std	Z+1, r23	; 0x01
     d3a:	82 83       	std	Z+2, r24	; 0x02
     d3c:	93 83       	std	Z+3, r25	; 0x03
	#else
    *axg = (double)(ax)/MPU6050_AGAIN;
    *ayg = (double)(ay)/MPU6050_AGAIN;
    *azg = (double)(az)/MPU6050_AGAIN;
 	#endif
}
     d3e:	26 96       	adiw	r28, 0x06	; 6
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	ff 90       	pop	r15
     d54:	ef 90       	pop	r14
     d56:	df 90       	pop	r13
     d58:	cf 90       	pop	r12
     d5a:	08 95       	ret

00000d5c <__subsf3>:
     d5c:	50 58       	subi	r21, 0x80	; 128

00000d5e <__addsf3>:
     d5e:	bb 27       	eor	r27, r27
     d60:	aa 27       	eor	r26, r26
     d62:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__addsf3x>
     d66:	0c 94 98 07 	jmp	0xf30	; 0xf30 <__fp_round>
     d6a:	0e 94 8a 07 	call	0xf14	; 0xf14 <__fp_pscA>
     d6e:	38 f0       	brcs	.+14     	; 0xd7e <__addsf3+0x20>
     d70:	0e 94 91 07 	call	0xf22	; 0xf22 <__fp_pscB>
     d74:	20 f0       	brcs	.+8      	; 0xd7e <__addsf3+0x20>
     d76:	39 f4       	brne	.+14     	; 0xd86 <__addsf3+0x28>
     d78:	9f 3f       	cpi	r25, 0xFF	; 255
     d7a:	19 f4       	brne	.+6      	; 0xd82 <__addsf3+0x24>
     d7c:	26 f4       	brtc	.+8      	; 0xd86 <__addsf3+0x28>
     d7e:	0c 94 87 07 	jmp	0xf0e	; 0xf0e <__fp_nan>
     d82:	0e f4       	brtc	.+2      	; 0xd86 <__addsf3+0x28>
     d84:	e0 95       	com	r30
     d86:	e7 fb       	bst	r30, 7
     d88:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__fp_inf>

00000d8c <__addsf3x>:
     d8c:	e9 2f       	mov	r30, r25
     d8e:	0e 94 a9 07 	call	0xf52	; 0xf52 <__fp_split3>
     d92:	58 f3       	brcs	.-42     	; 0xd6a <__addsf3+0xc>
     d94:	ba 17       	cp	r27, r26
     d96:	62 07       	cpc	r22, r18
     d98:	73 07       	cpc	r23, r19
     d9a:	84 07       	cpc	r24, r20
     d9c:	95 07       	cpc	r25, r21
     d9e:	20 f0       	brcs	.+8      	; 0xda8 <__addsf3x+0x1c>
     da0:	79 f4       	brne	.+30     	; 0xdc0 <__addsf3x+0x34>
     da2:	a6 f5       	brtc	.+104    	; 0xe0c <__addsf3x+0x80>
     da4:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <__fp_zero>
     da8:	0e f4       	brtc	.+2      	; 0xdac <__addsf3x+0x20>
     daa:	e0 95       	com	r30
     dac:	0b 2e       	mov	r0, r27
     dae:	ba 2f       	mov	r27, r26
     db0:	a0 2d       	mov	r26, r0
     db2:	0b 01       	movw	r0, r22
     db4:	b9 01       	movw	r22, r18
     db6:	90 01       	movw	r18, r0
     db8:	0c 01       	movw	r0, r24
     dba:	ca 01       	movw	r24, r20
     dbc:	a0 01       	movw	r20, r0
     dbe:	11 24       	eor	r1, r1
     dc0:	ff 27       	eor	r31, r31
     dc2:	59 1b       	sub	r21, r25
     dc4:	99 f0       	breq	.+38     	; 0xdec <__addsf3x+0x60>
     dc6:	59 3f       	cpi	r21, 0xF9	; 249
     dc8:	50 f4       	brcc	.+20     	; 0xdde <__addsf3x+0x52>
     dca:	50 3e       	cpi	r21, 0xE0	; 224
     dcc:	68 f1       	brcs	.+90     	; 0xe28 <__addsf3x+0x9c>
     dce:	1a 16       	cp	r1, r26
     dd0:	f0 40       	sbci	r31, 0x00	; 0
     dd2:	a2 2f       	mov	r26, r18
     dd4:	23 2f       	mov	r18, r19
     dd6:	34 2f       	mov	r19, r20
     dd8:	44 27       	eor	r20, r20
     dda:	58 5f       	subi	r21, 0xF8	; 248
     ddc:	f3 cf       	rjmp	.-26     	; 0xdc4 <__addsf3x+0x38>
     dde:	46 95       	lsr	r20
     de0:	37 95       	ror	r19
     de2:	27 95       	ror	r18
     de4:	a7 95       	ror	r26
     de6:	f0 40       	sbci	r31, 0x00	; 0
     de8:	53 95       	inc	r21
     dea:	c9 f7       	brne	.-14     	; 0xdde <__addsf3x+0x52>
     dec:	7e f4       	brtc	.+30     	; 0xe0c <__addsf3x+0x80>
     dee:	1f 16       	cp	r1, r31
     df0:	ba 0b       	sbc	r27, r26
     df2:	62 0b       	sbc	r22, r18
     df4:	73 0b       	sbc	r23, r19
     df6:	84 0b       	sbc	r24, r20
     df8:	ba f0       	brmi	.+46     	; 0xe28 <__addsf3x+0x9c>
     dfa:	91 50       	subi	r25, 0x01	; 1
     dfc:	a1 f0       	breq	.+40     	; 0xe26 <__addsf3x+0x9a>
     dfe:	ff 0f       	add	r31, r31
     e00:	bb 1f       	adc	r27, r27
     e02:	66 1f       	adc	r22, r22
     e04:	77 1f       	adc	r23, r23
     e06:	88 1f       	adc	r24, r24
     e08:	c2 f7       	brpl	.-16     	; 0xdfa <__addsf3x+0x6e>
     e0a:	0e c0       	rjmp	.+28     	; 0xe28 <__addsf3x+0x9c>
     e0c:	ba 0f       	add	r27, r26
     e0e:	62 1f       	adc	r22, r18
     e10:	73 1f       	adc	r23, r19
     e12:	84 1f       	adc	r24, r20
     e14:	48 f4       	brcc	.+18     	; 0xe28 <__addsf3x+0x9c>
     e16:	87 95       	ror	r24
     e18:	77 95       	ror	r23
     e1a:	67 95       	ror	r22
     e1c:	b7 95       	ror	r27
     e1e:	f7 95       	ror	r31
     e20:	9e 3f       	cpi	r25, 0xFE	; 254
     e22:	08 f0       	brcs	.+2      	; 0xe26 <__addsf3x+0x9a>
     e24:	b0 cf       	rjmp	.-160    	; 0xd86 <__addsf3+0x28>
     e26:	93 95       	inc	r25
     e28:	88 0f       	add	r24, r24
     e2a:	08 f0       	brcs	.+2      	; 0xe2e <__addsf3x+0xa2>
     e2c:	99 27       	eor	r25, r25
     e2e:	ee 0f       	add	r30, r30
     e30:	97 95       	ror	r25
     e32:	87 95       	ror	r24
     e34:	08 95       	ret

00000e36 <__cmpsf2>:
     e36:	0e 94 5d 07 	call	0xeba	; 0xeba <__fp_cmp>
     e3a:	08 f4       	brcc	.+2      	; 0xe3e <__cmpsf2+0x8>
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	08 95       	ret

00000e40 <__floatunsisf>:
     e40:	e8 94       	clt
     e42:	09 c0       	rjmp	.+18     	; 0xe56 <__floatsisf+0x12>

00000e44 <__floatsisf>:
     e44:	97 fb       	bst	r25, 7
     e46:	3e f4       	brtc	.+14     	; 0xe56 <__floatsisf+0x12>
     e48:	90 95       	com	r25
     e4a:	80 95       	com	r24
     e4c:	70 95       	com	r23
     e4e:	61 95       	neg	r22
     e50:	7f 4f       	sbci	r23, 0xFF	; 255
     e52:	8f 4f       	sbci	r24, 0xFF	; 255
     e54:	9f 4f       	sbci	r25, 0xFF	; 255
     e56:	99 23       	and	r25, r25
     e58:	a9 f0       	breq	.+42     	; 0xe84 <__floatsisf+0x40>
     e5a:	f9 2f       	mov	r31, r25
     e5c:	96 e9       	ldi	r25, 0x96	; 150
     e5e:	bb 27       	eor	r27, r27
     e60:	93 95       	inc	r25
     e62:	f6 95       	lsr	r31
     e64:	87 95       	ror	r24
     e66:	77 95       	ror	r23
     e68:	67 95       	ror	r22
     e6a:	b7 95       	ror	r27
     e6c:	f1 11       	cpse	r31, r1
     e6e:	f8 cf       	rjmp	.-16     	; 0xe60 <__floatsisf+0x1c>
     e70:	fa f4       	brpl	.+62     	; 0xeb0 <__floatsisf+0x6c>
     e72:	bb 0f       	add	r27, r27
     e74:	11 f4       	brne	.+4      	; 0xe7a <__floatsisf+0x36>
     e76:	60 ff       	sbrs	r22, 0
     e78:	1b c0       	rjmp	.+54     	; 0xeb0 <__floatsisf+0x6c>
     e7a:	6f 5f       	subi	r22, 0xFF	; 255
     e7c:	7f 4f       	sbci	r23, 0xFF	; 255
     e7e:	8f 4f       	sbci	r24, 0xFF	; 255
     e80:	9f 4f       	sbci	r25, 0xFF	; 255
     e82:	16 c0       	rjmp	.+44     	; 0xeb0 <__floatsisf+0x6c>
     e84:	88 23       	and	r24, r24
     e86:	11 f0       	breq	.+4      	; 0xe8c <__floatsisf+0x48>
     e88:	96 e9       	ldi	r25, 0x96	; 150
     e8a:	11 c0       	rjmp	.+34     	; 0xeae <__floatsisf+0x6a>
     e8c:	77 23       	and	r23, r23
     e8e:	21 f0       	breq	.+8      	; 0xe98 <__floatsisf+0x54>
     e90:	9e e8       	ldi	r25, 0x8E	; 142
     e92:	87 2f       	mov	r24, r23
     e94:	76 2f       	mov	r23, r22
     e96:	05 c0       	rjmp	.+10     	; 0xea2 <__floatsisf+0x5e>
     e98:	66 23       	and	r22, r22
     e9a:	71 f0       	breq	.+28     	; 0xeb8 <__floatsisf+0x74>
     e9c:	96 e8       	ldi	r25, 0x86	; 134
     e9e:	86 2f       	mov	r24, r22
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	2a f0       	brmi	.+10     	; 0xeb0 <__floatsisf+0x6c>
     ea6:	9a 95       	dec	r25
     ea8:	66 0f       	add	r22, r22
     eaa:	77 1f       	adc	r23, r23
     eac:	88 1f       	adc	r24, r24
     eae:	da f7       	brpl	.-10     	; 0xea6 <__floatsisf+0x62>
     eb0:	88 0f       	add	r24, r24
     eb2:	96 95       	lsr	r25
     eb4:	87 95       	ror	r24
     eb6:	97 f9       	bld	r25, 7
     eb8:	08 95       	ret

00000eba <__fp_cmp>:
     eba:	99 0f       	add	r25, r25
     ebc:	00 08       	sbc	r0, r0
     ebe:	55 0f       	add	r21, r21
     ec0:	aa 0b       	sbc	r26, r26
     ec2:	e0 e8       	ldi	r30, 0x80	; 128
     ec4:	fe ef       	ldi	r31, 0xFE	; 254
     ec6:	16 16       	cp	r1, r22
     ec8:	17 06       	cpc	r1, r23
     eca:	e8 07       	cpc	r30, r24
     ecc:	f9 07       	cpc	r31, r25
     ece:	c0 f0       	brcs	.+48     	; 0xf00 <__fp_cmp+0x46>
     ed0:	12 16       	cp	r1, r18
     ed2:	13 06       	cpc	r1, r19
     ed4:	e4 07       	cpc	r30, r20
     ed6:	f5 07       	cpc	r31, r21
     ed8:	98 f0       	brcs	.+38     	; 0xf00 <__fp_cmp+0x46>
     eda:	62 1b       	sub	r22, r18
     edc:	73 0b       	sbc	r23, r19
     ede:	84 0b       	sbc	r24, r20
     ee0:	95 0b       	sbc	r25, r21
     ee2:	39 f4       	brne	.+14     	; 0xef2 <__fp_cmp+0x38>
     ee4:	0a 26       	eor	r0, r26
     ee6:	61 f0       	breq	.+24     	; 0xf00 <__fp_cmp+0x46>
     ee8:	23 2b       	or	r18, r19
     eea:	24 2b       	or	r18, r20
     eec:	25 2b       	or	r18, r21
     eee:	21 f4       	brne	.+8      	; 0xef8 <__fp_cmp+0x3e>
     ef0:	08 95       	ret
     ef2:	0a 26       	eor	r0, r26
     ef4:	09 f4       	brne	.+2      	; 0xef8 <__fp_cmp+0x3e>
     ef6:	a1 40       	sbci	r26, 0x01	; 1
     ef8:	a6 95       	lsr	r26
     efa:	8f ef       	ldi	r24, 0xFF	; 255
     efc:	81 1d       	adc	r24, r1
     efe:	81 1d       	adc	r24, r1
     f00:	08 95       	ret

00000f02 <__fp_inf>:
     f02:	97 f9       	bld	r25, 7
     f04:	9f 67       	ori	r25, 0x7F	; 127
     f06:	80 e8       	ldi	r24, 0x80	; 128
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	60 e0       	ldi	r22, 0x00	; 0
     f0c:	08 95       	ret

00000f0e <__fp_nan>:
     f0e:	9f ef       	ldi	r25, 0xFF	; 255
     f10:	80 ec       	ldi	r24, 0xC0	; 192
     f12:	08 95       	ret

00000f14 <__fp_pscA>:
     f14:	00 24       	eor	r0, r0
     f16:	0a 94       	dec	r0
     f18:	16 16       	cp	r1, r22
     f1a:	17 06       	cpc	r1, r23
     f1c:	18 06       	cpc	r1, r24
     f1e:	09 06       	cpc	r0, r25
     f20:	08 95       	ret

00000f22 <__fp_pscB>:
     f22:	00 24       	eor	r0, r0
     f24:	0a 94       	dec	r0
     f26:	12 16       	cp	r1, r18
     f28:	13 06       	cpc	r1, r19
     f2a:	14 06       	cpc	r1, r20
     f2c:	05 06       	cpc	r0, r21
     f2e:	08 95       	ret

00000f30 <__fp_round>:
     f30:	09 2e       	mov	r0, r25
     f32:	03 94       	inc	r0
     f34:	00 0c       	add	r0, r0
     f36:	11 f4       	brne	.+4      	; 0xf3c <__fp_round+0xc>
     f38:	88 23       	and	r24, r24
     f3a:	52 f0       	brmi	.+20     	; 0xf50 <__fp_round+0x20>
     f3c:	bb 0f       	add	r27, r27
     f3e:	40 f4       	brcc	.+16     	; 0xf50 <__fp_round+0x20>
     f40:	bf 2b       	or	r27, r31
     f42:	11 f4       	brne	.+4      	; 0xf48 <__fp_round+0x18>
     f44:	60 ff       	sbrs	r22, 0
     f46:	04 c0       	rjmp	.+8      	; 0xf50 <__fp_round+0x20>
     f48:	6f 5f       	subi	r22, 0xFF	; 255
     f4a:	7f 4f       	sbci	r23, 0xFF	; 255
     f4c:	8f 4f       	sbci	r24, 0xFF	; 255
     f4e:	9f 4f       	sbci	r25, 0xFF	; 255
     f50:	08 95       	ret

00000f52 <__fp_split3>:
     f52:	57 fd       	sbrc	r21, 7
     f54:	90 58       	subi	r25, 0x80	; 128
     f56:	44 0f       	add	r20, r20
     f58:	55 1f       	adc	r21, r21
     f5a:	59 f0       	breq	.+22     	; 0xf72 <__fp_splitA+0x10>
     f5c:	5f 3f       	cpi	r21, 0xFF	; 255
     f5e:	71 f0       	breq	.+28     	; 0xf7c <__fp_splitA+0x1a>
     f60:	47 95       	ror	r20

00000f62 <__fp_splitA>:
     f62:	88 0f       	add	r24, r24
     f64:	97 fb       	bst	r25, 7
     f66:	99 1f       	adc	r25, r25
     f68:	61 f0       	breq	.+24     	; 0xf82 <__fp_splitA+0x20>
     f6a:	9f 3f       	cpi	r25, 0xFF	; 255
     f6c:	79 f0       	breq	.+30     	; 0xf8c <__fp_splitA+0x2a>
     f6e:	87 95       	ror	r24
     f70:	08 95       	ret
     f72:	12 16       	cp	r1, r18
     f74:	13 06       	cpc	r1, r19
     f76:	14 06       	cpc	r1, r20
     f78:	55 1f       	adc	r21, r21
     f7a:	f2 cf       	rjmp	.-28     	; 0xf60 <__fp_split3+0xe>
     f7c:	46 95       	lsr	r20
     f7e:	f1 df       	rcall	.-30     	; 0xf62 <__fp_splitA>
     f80:	08 c0       	rjmp	.+16     	; 0xf92 <__fp_splitA+0x30>
     f82:	16 16       	cp	r1, r22
     f84:	17 06       	cpc	r1, r23
     f86:	18 06       	cpc	r1, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	f1 cf       	rjmp	.-30     	; 0xf6e <__fp_splitA+0xc>
     f8c:	86 95       	lsr	r24
     f8e:	71 05       	cpc	r23, r1
     f90:	61 05       	cpc	r22, r1
     f92:	08 94       	sec
     f94:	08 95       	ret

00000f96 <__fp_zero>:
     f96:	e8 94       	clt

00000f98 <__fp_szero>:
     f98:	bb 27       	eor	r27, r27
     f9a:	66 27       	eor	r22, r22
     f9c:	77 27       	eor	r23, r23
     f9e:	cb 01       	movw	r24, r22
     fa0:	97 f9       	bld	r25, 7
     fa2:	08 95       	ret

00000fa4 <__gesf2>:
     fa4:	0e 94 5d 07 	call	0xeba	; 0xeba <__fp_cmp>
     fa8:	08 f4       	brcc	.+2      	; 0xfac <__gesf2+0x8>
     faa:	8f ef       	ldi	r24, 0xFF	; 255
     fac:	08 95       	ret

00000fae <__mulsf3>:
     fae:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__mulsf3x>
     fb2:	0c 94 98 07 	jmp	0xf30	; 0xf30 <__fp_round>
     fb6:	0e 94 8a 07 	call	0xf14	; 0xf14 <__fp_pscA>
     fba:	38 f0       	brcs	.+14     	; 0xfca <__mulsf3+0x1c>
     fbc:	0e 94 91 07 	call	0xf22	; 0xf22 <__fp_pscB>
     fc0:	20 f0       	brcs	.+8      	; 0xfca <__mulsf3+0x1c>
     fc2:	95 23       	and	r25, r21
     fc4:	11 f0       	breq	.+4      	; 0xfca <__mulsf3+0x1c>
     fc6:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__fp_inf>
     fca:	0c 94 87 07 	jmp	0xf0e	; 0xf0e <__fp_nan>
     fce:	11 24       	eor	r1, r1
     fd0:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <__fp_szero>

00000fd4 <__mulsf3x>:
     fd4:	0e 94 a9 07 	call	0xf52	; 0xf52 <__fp_split3>
     fd8:	70 f3       	brcs	.-36     	; 0xfb6 <__mulsf3+0x8>

00000fda <__mulsf3_pse>:
     fda:	95 9f       	mul	r25, r21
     fdc:	c1 f3       	breq	.-16     	; 0xfce <__mulsf3+0x20>
     fde:	95 0f       	add	r25, r21
     fe0:	50 e0       	ldi	r21, 0x00	; 0
     fe2:	55 1f       	adc	r21, r21
     fe4:	62 9f       	mul	r22, r18
     fe6:	f0 01       	movw	r30, r0
     fe8:	72 9f       	mul	r23, r18
     fea:	bb 27       	eor	r27, r27
     fec:	f0 0d       	add	r31, r0
     fee:	b1 1d       	adc	r27, r1
     ff0:	63 9f       	mul	r22, r19
     ff2:	aa 27       	eor	r26, r26
     ff4:	f0 0d       	add	r31, r0
     ff6:	b1 1d       	adc	r27, r1
     ff8:	aa 1f       	adc	r26, r26
     ffa:	64 9f       	mul	r22, r20
     ffc:	66 27       	eor	r22, r22
     ffe:	b0 0d       	add	r27, r0
    1000:	a1 1d       	adc	r26, r1
    1002:	66 1f       	adc	r22, r22
    1004:	82 9f       	mul	r24, r18
    1006:	22 27       	eor	r18, r18
    1008:	b0 0d       	add	r27, r0
    100a:	a1 1d       	adc	r26, r1
    100c:	62 1f       	adc	r22, r18
    100e:	73 9f       	mul	r23, r19
    1010:	b0 0d       	add	r27, r0
    1012:	a1 1d       	adc	r26, r1
    1014:	62 1f       	adc	r22, r18
    1016:	83 9f       	mul	r24, r19
    1018:	a0 0d       	add	r26, r0
    101a:	61 1d       	adc	r22, r1
    101c:	22 1f       	adc	r18, r18
    101e:	74 9f       	mul	r23, r20
    1020:	33 27       	eor	r19, r19
    1022:	a0 0d       	add	r26, r0
    1024:	61 1d       	adc	r22, r1
    1026:	23 1f       	adc	r18, r19
    1028:	84 9f       	mul	r24, r20
    102a:	60 0d       	add	r22, r0
    102c:	21 1d       	adc	r18, r1
    102e:	82 2f       	mov	r24, r18
    1030:	76 2f       	mov	r23, r22
    1032:	6a 2f       	mov	r22, r26
    1034:	11 24       	eor	r1, r1
    1036:	9f 57       	subi	r25, 0x7F	; 127
    1038:	50 40       	sbci	r21, 0x00	; 0
    103a:	9a f0       	brmi	.+38     	; 0x1062 <__mulsf3_pse+0x88>
    103c:	f1 f0       	breq	.+60     	; 0x107a <__mulsf3_pse+0xa0>
    103e:	88 23       	and	r24, r24
    1040:	4a f0       	brmi	.+18     	; 0x1054 <__mulsf3_pse+0x7a>
    1042:	ee 0f       	add	r30, r30
    1044:	ff 1f       	adc	r31, r31
    1046:	bb 1f       	adc	r27, r27
    1048:	66 1f       	adc	r22, r22
    104a:	77 1f       	adc	r23, r23
    104c:	88 1f       	adc	r24, r24
    104e:	91 50       	subi	r25, 0x01	; 1
    1050:	50 40       	sbci	r21, 0x00	; 0
    1052:	a9 f7       	brne	.-22     	; 0x103e <__mulsf3_pse+0x64>
    1054:	9e 3f       	cpi	r25, 0xFE	; 254
    1056:	51 05       	cpc	r21, r1
    1058:	80 f0       	brcs	.+32     	; 0x107a <__mulsf3_pse+0xa0>
    105a:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__fp_inf>
    105e:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <__fp_szero>
    1062:	5f 3f       	cpi	r21, 0xFF	; 255
    1064:	e4 f3       	brlt	.-8      	; 0x105e <__mulsf3_pse+0x84>
    1066:	98 3e       	cpi	r25, 0xE8	; 232
    1068:	d4 f3       	brlt	.-12     	; 0x105e <__mulsf3_pse+0x84>
    106a:	86 95       	lsr	r24
    106c:	77 95       	ror	r23
    106e:	67 95       	ror	r22
    1070:	b7 95       	ror	r27
    1072:	f7 95       	ror	r31
    1074:	e7 95       	ror	r30
    1076:	9f 5f       	subi	r25, 0xFF	; 255
    1078:	c1 f7       	brne	.-16     	; 0x106a <__mulsf3_pse+0x90>
    107a:	fe 2b       	or	r31, r30
    107c:	88 0f       	add	r24, r24
    107e:	91 1d       	adc	r25, r1
    1080:	96 95       	lsr	r25
    1082:	87 95       	ror	r24
    1084:	97 f9       	bld	r25, 7
    1086:	08 95       	ret

00001088 <__tablejump2__>:
    1088:	ee 0f       	add	r30, r30
    108a:	ff 1f       	adc	r31, r31
    108c:	05 90       	lpm	r0, Z+
    108e:	f4 91       	lpm	r31, Z
    1090:	e0 2d       	mov	r30, r0
    1092:	09 94       	ijmp

00001094 <dtostrf>:
    1094:	ef 92       	push	r14
    1096:	0f 93       	push	r16
    1098:	1f 93       	push	r17
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	e8 01       	movw	r28, r16
    10a0:	47 fd       	sbrc	r20, 7
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <dtostrf+0x14>
    10a4:	34 e0       	ldi	r19, 0x04	; 4
    10a6:	01 c0       	rjmp	.+2      	; 0x10aa <dtostrf+0x16>
    10a8:	34 e1       	ldi	r19, 0x14	; 20
    10aa:	04 2e       	mov	r0, r20
    10ac:	00 0c       	add	r0, r0
    10ae:	55 0b       	sbc	r21, r21
    10b0:	57 ff       	sbrs	r21, 7
    10b2:	03 c0       	rjmp	.+6      	; 0x10ba <dtostrf+0x26>
    10b4:	51 95       	neg	r21
    10b6:	41 95       	neg	r20
    10b8:	51 09       	sbc	r21, r1
    10ba:	e3 2e       	mov	r14, r19
    10bc:	02 2f       	mov	r16, r18
    10be:	24 2f       	mov	r18, r20
    10c0:	ae 01       	movw	r20, r28
    10c2:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <dtoa_prf>
    10c6:	ce 01       	movw	r24, r28
    10c8:	df 91       	pop	r29
    10ca:	cf 91       	pop	r28
    10cc:	1f 91       	pop	r17
    10ce:	0f 91       	pop	r16
    10d0:	ef 90       	pop	r14
    10d2:	08 95       	ret

000010d4 <dtoa_prf>:
    10d4:	a9 e0       	ldi	r26, 0x09	; 9
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e0 e7       	ldi	r30, 0x70	; 112
    10da:	f8 e0       	ldi	r31, 0x08	; 8
    10dc:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <__prologue_saves__+0xc>
    10e0:	6a 01       	movw	r12, r20
    10e2:	12 2f       	mov	r17, r18
    10e4:	b0 2e       	mov	r11, r16
    10e6:	2b e3       	ldi	r18, 0x3B	; 59
    10e8:	20 17       	cp	r18, r16
    10ea:	20 f0       	brcs	.+8      	; 0x10f4 <dtoa_prf+0x20>
    10ec:	ff 24       	eor	r15, r15
    10ee:	f3 94       	inc	r15
    10f0:	f0 0e       	add	r15, r16
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <dtoa_prf+0x24>
    10f4:	2c e3       	ldi	r18, 0x3C	; 60
    10f6:	f2 2e       	mov	r15, r18
    10f8:	0f 2d       	mov	r16, r15
    10fa:	27 e0       	ldi	r18, 0x07	; 7
    10fc:	ae 01       	movw	r20, r28
    10fe:	4f 5f       	subi	r20, 0xFF	; 255
    1100:	5f 4f       	sbci	r21, 0xFF	; 255
    1102:	0e 94 c4 09 	call	0x1388	; 0x1388 <__ftoa_engine>
    1106:	bc 01       	movw	r22, r24
    1108:	49 81       	ldd	r20, Y+1	; 0x01
    110a:	84 2f       	mov	r24, r20
    110c:	89 70       	andi	r24, 0x09	; 9
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	31 f0       	breq	.+12     	; 0x111e <dtoa_prf+0x4a>
    1112:	e1 fc       	sbrc	r14, 1
    1114:	06 c0       	rjmp	.+12     	; 0x1122 <dtoa_prf+0x4e>
    1116:	e0 fe       	sbrs	r14, 0
    1118:	06 c0       	rjmp	.+12     	; 0x1126 <dtoa_prf+0x52>
    111a:	90 e2       	ldi	r25, 0x20	; 32
    111c:	05 c0       	rjmp	.+10     	; 0x1128 <dtoa_prf+0x54>
    111e:	9d e2       	ldi	r25, 0x2D	; 45
    1120:	03 c0       	rjmp	.+6      	; 0x1128 <dtoa_prf+0x54>
    1122:	9b e2       	ldi	r25, 0x2B	; 43
    1124:	01 c0       	rjmp	.+2      	; 0x1128 <dtoa_prf+0x54>
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	5e 2d       	mov	r21, r14
    112a:	50 71       	andi	r21, 0x10	; 16
    112c:	43 ff       	sbrs	r20, 3
    112e:	3c c0       	rjmp	.+120    	; 0x11a8 <dtoa_prf+0xd4>
    1130:	91 11       	cpse	r25, r1
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <dtoa_prf+0x64>
    1134:	83 e0       	ldi	r24, 0x03	; 3
    1136:	01 c0       	rjmp	.+2      	; 0x113a <dtoa_prf+0x66>
    1138:	84 e0       	ldi	r24, 0x04	; 4
    113a:	81 17       	cp	r24, r17
    113c:	18 f4       	brcc	.+6      	; 0x1144 <dtoa_prf+0x70>
    113e:	21 2f       	mov	r18, r17
    1140:	28 1b       	sub	r18, r24
    1142:	01 c0       	rjmp	.+2      	; 0x1146 <dtoa_prf+0x72>
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	51 11       	cpse	r21, r1
    1148:	0b c0       	rjmp	.+22     	; 0x1160 <dtoa_prf+0x8c>
    114a:	f6 01       	movw	r30, r12
    114c:	82 2f       	mov	r24, r18
    114e:	30 e2       	ldi	r19, 0x20	; 32
    1150:	88 23       	and	r24, r24
    1152:	19 f0       	breq	.+6      	; 0x115a <dtoa_prf+0x86>
    1154:	31 93       	st	Z+, r19
    1156:	81 50       	subi	r24, 0x01	; 1
    1158:	fb cf       	rjmp	.-10     	; 0x1150 <dtoa_prf+0x7c>
    115a:	c2 0e       	add	r12, r18
    115c:	d1 1c       	adc	r13, r1
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	99 23       	and	r25, r25
    1162:	29 f0       	breq	.+10     	; 0x116e <dtoa_prf+0x9a>
    1164:	d6 01       	movw	r26, r12
    1166:	9c 93       	st	X, r25
    1168:	f6 01       	movw	r30, r12
    116a:	31 96       	adiw	r30, 0x01	; 1
    116c:	6f 01       	movw	r12, r30
    116e:	c6 01       	movw	r24, r12
    1170:	03 96       	adiw	r24, 0x03	; 3
    1172:	e2 fe       	sbrs	r14, 2
    1174:	0a c0       	rjmp	.+20     	; 0x118a <dtoa_prf+0xb6>
    1176:	3e e4       	ldi	r19, 0x4E	; 78
    1178:	d6 01       	movw	r26, r12
    117a:	3c 93       	st	X, r19
    117c:	41 e4       	ldi	r20, 0x41	; 65
    117e:	11 96       	adiw	r26, 0x01	; 1
    1180:	4c 93       	st	X, r20
    1182:	11 97       	sbiw	r26, 0x01	; 1
    1184:	12 96       	adiw	r26, 0x02	; 2
    1186:	3c 93       	st	X, r19
    1188:	06 c0       	rjmp	.+12     	; 0x1196 <dtoa_prf+0xc2>
    118a:	3e e6       	ldi	r19, 0x6E	; 110
    118c:	f6 01       	movw	r30, r12
    118e:	30 83       	st	Z, r19
    1190:	41 e6       	ldi	r20, 0x61	; 97
    1192:	41 83       	std	Z+1, r20	; 0x01
    1194:	32 83       	std	Z+2, r19	; 0x02
    1196:	fc 01       	movw	r30, r24
    1198:	32 2f       	mov	r19, r18
    119a:	40 e2       	ldi	r20, 0x20	; 32
    119c:	33 23       	and	r19, r19
    119e:	09 f4       	brne	.+2      	; 0x11a2 <dtoa_prf+0xce>
    11a0:	42 c0       	rjmp	.+132    	; 0x1226 <dtoa_prf+0x152>
    11a2:	41 93       	st	Z+, r20
    11a4:	31 50       	subi	r19, 0x01	; 1
    11a6:	fa cf       	rjmp	.-12     	; 0x119c <dtoa_prf+0xc8>
    11a8:	42 ff       	sbrs	r20, 2
    11aa:	44 c0       	rjmp	.+136    	; 0x1234 <dtoa_prf+0x160>
    11ac:	91 11       	cpse	r25, r1
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <dtoa_prf+0xe0>
    11b0:	83 e0       	ldi	r24, 0x03	; 3
    11b2:	01 c0       	rjmp	.+2      	; 0x11b6 <dtoa_prf+0xe2>
    11b4:	84 e0       	ldi	r24, 0x04	; 4
    11b6:	81 17       	cp	r24, r17
    11b8:	18 f4       	brcc	.+6      	; 0x11c0 <dtoa_prf+0xec>
    11ba:	21 2f       	mov	r18, r17
    11bc:	28 1b       	sub	r18, r24
    11be:	01 c0       	rjmp	.+2      	; 0x11c2 <dtoa_prf+0xee>
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	51 11       	cpse	r21, r1
    11c4:	0b c0       	rjmp	.+22     	; 0x11dc <dtoa_prf+0x108>
    11c6:	f6 01       	movw	r30, r12
    11c8:	82 2f       	mov	r24, r18
    11ca:	30 e2       	ldi	r19, 0x20	; 32
    11cc:	88 23       	and	r24, r24
    11ce:	19 f0       	breq	.+6      	; 0x11d6 <dtoa_prf+0x102>
    11d0:	31 93       	st	Z+, r19
    11d2:	81 50       	subi	r24, 0x01	; 1
    11d4:	fb cf       	rjmp	.-10     	; 0x11cc <dtoa_prf+0xf8>
    11d6:	c2 0e       	add	r12, r18
    11d8:	d1 1c       	adc	r13, r1
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	99 23       	and	r25, r25
    11de:	29 f0       	breq	.+10     	; 0x11ea <dtoa_prf+0x116>
    11e0:	d6 01       	movw	r26, r12
    11e2:	9c 93       	st	X, r25
    11e4:	f6 01       	movw	r30, r12
    11e6:	31 96       	adiw	r30, 0x01	; 1
    11e8:	6f 01       	movw	r12, r30
    11ea:	c6 01       	movw	r24, r12
    11ec:	03 96       	adiw	r24, 0x03	; 3
    11ee:	e2 fe       	sbrs	r14, 2
    11f0:	0b c0       	rjmp	.+22     	; 0x1208 <dtoa_prf+0x134>
    11f2:	39 e4       	ldi	r19, 0x49	; 73
    11f4:	d6 01       	movw	r26, r12
    11f6:	3c 93       	st	X, r19
    11f8:	3e e4       	ldi	r19, 0x4E	; 78
    11fa:	11 96       	adiw	r26, 0x01	; 1
    11fc:	3c 93       	st	X, r19
    11fe:	11 97       	sbiw	r26, 0x01	; 1
    1200:	36 e4       	ldi	r19, 0x46	; 70
    1202:	12 96       	adiw	r26, 0x02	; 2
    1204:	3c 93       	st	X, r19
    1206:	07 c0       	rjmp	.+14     	; 0x1216 <dtoa_prf+0x142>
    1208:	39 e6       	ldi	r19, 0x69	; 105
    120a:	f6 01       	movw	r30, r12
    120c:	30 83       	st	Z, r19
    120e:	3e e6       	ldi	r19, 0x6E	; 110
    1210:	31 83       	std	Z+1, r19	; 0x01
    1212:	36 e6       	ldi	r19, 0x66	; 102
    1214:	32 83       	std	Z+2, r19	; 0x02
    1216:	fc 01       	movw	r30, r24
    1218:	32 2f       	mov	r19, r18
    121a:	40 e2       	ldi	r20, 0x20	; 32
    121c:	33 23       	and	r19, r19
    121e:	19 f0       	breq	.+6      	; 0x1226 <dtoa_prf+0x152>
    1220:	41 93       	st	Z+, r20
    1222:	31 50       	subi	r19, 0x01	; 1
    1224:	fb cf       	rjmp	.-10     	; 0x121c <dtoa_prf+0x148>
    1226:	fc 01       	movw	r30, r24
    1228:	e2 0f       	add	r30, r18
    122a:	f1 1d       	adc	r31, r1
    122c:	10 82       	st	Z, r1
    122e:	8e ef       	ldi	r24, 0xFE	; 254
    1230:	9f ef       	ldi	r25, 0xFF	; 255
    1232:	a6 c0       	rjmp	.+332    	; 0x1380 <dtoa_prf+0x2ac>
    1234:	21 e0       	ldi	r18, 0x01	; 1
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	91 11       	cpse	r25, r1
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <dtoa_prf+0x16c>
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	16 16       	cp	r1, r22
    1242:	17 06       	cpc	r1, r23
    1244:	1c f4       	brge	.+6      	; 0x124c <dtoa_prf+0x178>
    1246:	fb 01       	movw	r30, r22
    1248:	31 96       	adiw	r30, 0x01	; 1
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <dtoa_prf+0x17c>
    124c:	e1 e0       	ldi	r30, 0x01	; 1
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	2e 0f       	add	r18, r30
    1252:	3f 1f       	adc	r19, r31
    1254:	bb 20       	and	r11, r11
    1256:	21 f0       	breq	.+8      	; 0x1260 <dtoa_prf+0x18c>
    1258:	eb 2d       	mov	r30, r11
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	31 96       	adiw	r30, 0x01	; 1
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <dtoa_prf+0x190>
    1260:	e0 e0       	ldi	r30, 0x00	; 0
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	2e 0f       	add	r18, r30
    1266:	3f 1f       	adc	r19, r31
    1268:	e1 2f       	mov	r30, r17
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	2e 17       	cp	r18, r30
    126e:	3f 07       	cpc	r19, r31
    1270:	1c f4       	brge	.+6      	; 0x1278 <dtoa_prf+0x1a4>
    1272:	12 1b       	sub	r17, r18
    1274:	21 2f       	mov	r18, r17
    1276:	01 c0       	rjmp	.+2      	; 0x127a <dtoa_prf+0x1a6>
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	8e 2d       	mov	r24, r14
    127c:	88 71       	andi	r24, 0x18	; 24
    127e:	59 f4       	brne	.+22     	; 0x1296 <dtoa_prf+0x1c2>
    1280:	f6 01       	movw	r30, r12
    1282:	82 2f       	mov	r24, r18
    1284:	30 e2       	ldi	r19, 0x20	; 32
    1286:	88 23       	and	r24, r24
    1288:	19 f0       	breq	.+6      	; 0x1290 <dtoa_prf+0x1bc>
    128a:	31 93       	st	Z+, r19
    128c:	81 50       	subi	r24, 0x01	; 1
    128e:	fb cf       	rjmp	.-10     	; 0x1286 <dtoa_prf+0x1b2>
    1290:	c2 0e       	add	r12, r18
    1292:	d1 1c       	adc	r13, r1
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	99 23       	and	r25, r25
    1298:	29 f0       	breq	.+10     	; 0x12a4 <dtoa_prf+0x1d0>
    129a:	d6 01       	movw	r26, r12
    129c:	9c 93       	st	X, r25
    129e:	f6 01       	movw	r30, r12
    12a0:	31 96       	adiw	r30, 0x01	; 1
    12a2:	6f 01       	movw	r12, r30
    12a4:	51 11       	cpse	r21, r1
    12a6:	0b c0       	rjmp	.+22     	; 0x12be <dtoa_prf+0x1ea>
    12a8:	f6 01       	movw	r30, r12
    12aa:	82 2f       	mov	r24, r18
    12ac:	90 e3       	ldi	r25, 0x30	; 48
    12ae:	88 23       	and	r24, r24
    12b0:	19 f0       	breq	.+6      	; 0x12b8 <dtoa_prf+0x1e4>
    12b2:	91 93       	st	Z+, r25
    12b4:	81 50       	subi	r24, 0x01	; 1
    12b6:	fb cf       	rjmp	.-10     	; 0x12ae <dtoa_prf+0x1da>
    12b8:	c2 0e       	add	r12, r18
    12ba:	d1 1c       	adc	r13, r1
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	0f 2d       	mov	r16, r15
    12c0:	06 0f       	add	r16, r22
    12c2:	9a 81       	ldd	r25, Y+2	; 0x02
    12c4:	34 2f       	mov	r19, r20
    12c6:	30 71       	andi	r19, 0x10	; 16
    12c8:	44 ff       	sbrs	r20, 4
    12ca:	03 c0       	rjmp	.+6      	; 0x12d2 <dtoa_prf+0x1fe>
    12cc:	91 33       	cpi	r25, 0x31	; 49
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <dtoa_prf+0x1fe>
    12d0:	01 50       	subi	r16, 0x01	; 1
    12d2:	10 16       	cp	r1, r16
    12d4:	24 f4       	brge	.+8      	; 0x12de <dtoa_prf+0x20a>
    12d6:	09 30       	cpi	r16, 0x09	; 9
    12d8:	18 f0       	brcs	.+6      	; 0x12e0 <dtoa_prf+0x20c>
    12da:	08 e0       	ldi	r16, 0x08	; 8
    12dc:	01 c0       	rjmp	.+2      	; 0x12e0 <dtoa_prf+0x20c>
    12de:	01 e0       	ldi	r16, 0x01	; 1
    12e0:	ab 01       	movw	r20, r22
    12e2:	77 ff       	sbrs	r23, 7
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <dtoa_prf+0x216>
    12e6:	40 e0       	ldi	r20, 0x00	; 0
    12e8:	50 e0       	ldi	r21, 0x00	; 0
    12ea:	fb 01       	movw	r30, r22
    12ec:	e4 1b       	sub	r30, r20
    12ee:	f5 0b       	sbc	r31, r21
    12f0:	a1 e0       	ldi	r26, 0x01	; 1
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	ac 0f       	add	r26, r28
    12f6:	bd 1f       	adc	r27, r29
    12f8:	ea 0f       	add	r30, r26
    12fa:	fb 1f       	adc	r31, r27
    12fc:	8e e2       	ldi	r24, 0x2E	; 46
    12fe:	a8 2e       	mov	r10, r24
    1300:	4b 01       	movw	r8, r22
    1302:	80 1a       	sub	r8, r16
    1304:	91 08       	sbc	r9, r1
    1306:	0b 2d       	mov	r16, r11
    1308:	10 e0       	ldi	r17, 0x00	; 0
    130a:	11 95       	neg	r17
    130c:	01 95       	neg	r16
    130e:	11 09       	sbc	r17, r1
    1310:	4f 3f       	cpi	r20, 0xFF	; 255
    1312:	bf ef       	ldi	r27, 0xFF	; 255
    1314:	5b 07       	cpc	r21, r27
    1316:	21 f4       	brne	.+8      	; 0x1320 <dtoa_prf+0x24c>
    1318:	d6 01       	movw	r26, r12
    131a:	ac 92       	st	X, r10
    131c:	11 96       	adiw	r26, 0x01	; 1
    131e:	6d 01       	movw	r12, r26
    1320:	64 17       	cp	r22, r20
    1322:	75 07       	cpc	r23, r21
    1324:	2c f0       	brlt	.+10     	; 0x1330 <dtoa_prf+0x25c>
    1326:	84 16       	cp	r8, r20
    1328:	95 06       	cpc	r9, r21
    132a:	14 f4       	brge	.+4      	; 0x1330 <dtoa_prf+0x25c>
    132c:	81 81       	ldd	r24, Z+1	; 0x01
    132e:	01 c0       	rjmp	.+2      	; 0x1332 <dtoa_prf+0x25e>
    1330:	80 e3       	ldi	r24, 0x30	; 48
    1332:	41 50       	subi	r20, 0x01	; 1
    1334:	51 09       	sbc	r21, r1
    1336:	31 96       	adiw	r30, 0x01	; 1
    1338:	d6 01       	movw	r26, r12
    133a:	11 96       	adiw	r26, 0x01	; 1
    133c:	7d 01       	movw	r14, r26
    133e:	40 17       	cp	r20, r16
    1340:	51 07       	cpc	r21, r17
    1342:	24 f0       	brlt	.+8      	; 0x134c <dtoa_prf+0x278>
    1344:	d6 01       	movw	r26, r12
    1346:	8c 93       	st	X, r24
    1348:	67 01       	movw	r12, r14
    134a:	e2 cf       	rjmp	.-60     	; 0x1310 <dtoa_prf+0x23c>
    134c:	64 17       	cp	r22, r20
    134e:	75 07       	cpc	r23, r21
    1350:	39 f4       	brne	.+14     	; 0x1360 <dtoa_prf+0x28c>
    1352:	96 33       	cpi	r25, 0x36	; 54
    1354:	20 f4       	brcc	.+8      	; 0x135e <dtoa_prf+0x28a>
    1356:	95 33       	cpi	r25, 0x35	; 53
    1358:	19 f4       	brne	.+6      	; 0x1360 <dtoa_prf+0x28c>
    135a:	31 11       	cpse	r19, r1
    135c:	01 c0       	rjmp	.+2      	; 0x1360 <dtoa_prf+0x28c>
    135e:	81 e3       	ldi	r24, 0x31	; 49
    1360:	f6 01       	movw	r30, r12
    1362:	80 83       	st	Z, r24
    1364:	f7 01       	movw	r30, r14
    1366:	82 2f       	mov	r24, r18
    1368:	90 e2       	ldi	r25, 0x20	; 32
    136a:	88 23       	and	r24, r24
    136c:	19 f0       	breq	.+6      	; 0x1374 <dtoa_prf+0x2a0>
    136e:	91 93       	st	Z+, r25
    1370:	81 50       	subi	r24, 0x01	; 1
    1372:	fb cf       	rjmp	.-10     	; 0x136a <dtoa_prf+0x296>
    1374:	f7 01       	movw	r30, r14
    1376:	e2 0f       	add	r30, r18
    1378:	f1 1d       	adc	r31, r1
    137a:	10 82       	st	Z, r1
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	29 96       	adiw	r28, 0x09	; 9
    1382:	ec e0       	ldi	r30, 0x0C	; 12
    1384:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__epilogue_restores__+0xc>

00001388 <__ftoa_engine>:
    1388:	28 30       	cpi	r18, 0x08	; 8
    138a:	08 f0       	brcs	.+2      	; 0x138e <__ftoa_engine+0x6>
    138c:	27 e0       	ldi	r18, 0x07	; 7
    138e:	33 27       	eor	r19, r19
    1390:	da 01       	movw	r26, r20
    1392:	99 0f       	add	r25, r25
    1394:	31 1d       	adc	r19, r1
    1396:	87 fd       	sbrc	r24, 7
    1398:	91 60       	ori	r25, 0x01	; 1
    139a:	00 96       	adiw	r24, 0x00	; 0
    139c:	61 05       	cpc	r22, r1
    139e:	71 05       	cpc	r23, r1
    13a0:	39 f4       	brne	.+14     	; 0x13b0 <__ftoa_engine+0x28>
    13a2:	32 60       	ori	r19, 0x02	; 2
    13a4:	2e 5f       	subi	r18, 0xFE	; 254
    13a6:	3d 93       	st	X+, r19
    13a8:	30 e3       	ldi	r19, 0x30	; 48
    13aa:	2a 95       	dec	r18
    13ac:	e1 f7       	brne	.-8      	; 0x13a6 <__ftoa_engine+0x1e>
    13ae:	08 95       	ret
    13b0:	9f 3f       	cpi	r25, 0xFF	; 255
    13b2:	30 f0       	brcs	.+12     	; 0x13c0 <__ftoa_engine+0x38>
    13b4:	80 38       	cpi	r24, 0x80	; 128
    13b6:	71 05       	cpc	r23, r1
    13b8:	61 05       	cpc	r22, r1
    13ba:	09 f0       	breq	.+2      	; 0x13be <__ftoa_engine+0x36>
    13bc:	3c 5f       	subi	r19, 0xFC	; 252
    13be:	3c 5f       	subi	r19, 0xFC	; 252
    13c0:	3d 93       	st	X+, r19
    13c2:	91 30       	cpi	r25, 0x01	; 1
    13c4:	08 f0       	brcs	.+2      	; 0x13c8 <__ftoa_engine+0x40>
    13c6:	80 68       	ori	r24, 0x80	; 128
    13c8:	91 1d       	adc	r25, r1
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	1f 93       	push	r17
    13d0:	0f 93       	push	r16
    13d2:	ff 92       	push	r15
    13d4:	ef 92       	push	r14
    13d6:	19 2f       	mov	r17, r25
    13d8:	98 7f       	andi	r25, 0xF8	; 248
    13da:	96 95       	lsr	r25
    13dc:	e9 2f       	mov	r30, r25
    13de:	96 95       	lsr	r25
    13e0:	96 95       	lsr	r25
    13e2:	e9 0f       	add	r30, r25
    13e4:	ff 27       	eor	r31, r31
    13e6:	ec 5d       	subi	r30, 0xDC	; 220
    13e8:	fe 4f       	sbci	r31, 0xFE	; 254
    13ea:	99 27       	eor	r25, r25
    13ec:	33 27       	eor	r19, r19
    13ee:	ee 24       	eor	r14, r14
    13f0:	ff 24       	eor	r15, r15
    13f2:	a7 01       	movw	r20, r14
    13f4:	e7 01       	movw	r28, r14
    13f6:	05 90       	lpm	r0, Z+
    13f8:	08 94       	sec
    13fa:	07 94       	ror	r0
    13fc:	28 f4       	brcc	.+10     	; 0x1408 <__ftoa_engine+0x80>
    13fe:	36 0f       	add	r19, r22
    1400:	e7 1e       	adc	r14, r23
    1402:	f8 1e       	adc	r15, r24
    1404:	49 1f       	adc	r20, r25
    1406:	51 1d       	adc	r21, r1
    1408:	66 0f       	add	r22, r22
    140a:	77 1f       	adc	r23, r23
    140c:	88 1f       	adc	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	06 94       	lsr	r0
    1412:	a1 f7       	brne	.-24     	; 0x13fc <__ftoa_engine+0x74>
    1414:	05 90       	lpm	r0, Z+
    1416:	07 94       	ror	r0
    1418:	28 f4       	brcc	.+10     	; 0x1424 <__ftoa_engine+0x9c>
    141a:	e7 0e       	add	r14, r23
    141c:	f8 1e       	adc	r15, r24
    141e:	49 1f       	adc	r20, r25
    1420:	56 1f       	adc	r21, r22
    1422:	c1 1d       	adc	r28, r1
    1424:	77 0f       	add	r23, r23
    1426:	88 1f       	adc	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	66 1f       	adc	r22, r22
    142c:	06 94       	lsr	r0
    142e:	a1 f7       	brne	.-24     	; 0x1418 <__ftoa_engine+0x90>
    1430:	05 90       	lpm	r0, Z+
    1432:	07 94       	ror	r0
    1434:	28 f4       	brcc	.+10     	; 0x1440 <__ftoa_engine+0xb8>
    1436:	f8 0e       	add	r15, r24
    1438:	49 1f       	adc	r20, r25
    143a:	56 1f       	adc	r21, r22
    143c:	c7 1f       	adc	r28, r23
    143e:	d1 1d       	adc	r29, r1
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	66 1f       	adc	r22, r22
    1446:	77 1f       	adc	r23, r23
    1448:	06 94       	lsr	r0
    144a:	a1 f7       	brne	.-24     	; 0x1434 <__ftoa_engine+0xac>
    144c:	05 90       	lpm	r0, Z+
    144e:	07 94       	ror	r0
    1450:	20 f4       	brcc	.+8      	; 0x145a <__ftoa_engine+0xd2>
    1452:	49 0f       	add	r20, r25
    1454:	56 1f       	adc	r21, r22
    1456:	c7 1f       	adc	r28, r23
    1458:	d8 1f       	adc	r29, r24
    145a:	99 0f       	add	r25, r25
    145c:	66 1f       	adc	r22, r22
    145e:	77 1f       	adc	r23, r23
    1460:	88 1f       	adc	r24, r24
    1462:	06 94       	lsr	r0
    1464:	a9 f7       	brne	.-22     	; 0x1450 <__ftoa_engine+0xc8>
    1466:	84 91       	lpm	r24, Z
    1468:	10 95       	com	r17
    146a:	17 70       	andi	r17, 0x07	; 7
    146c:	41 f0       	breq	.+16     	; 0x147e <__ftoa_engine+0xf6>
    146e:	d6 95       	lsr	r29
    1470:	c7 95       	ror	r28
    1472:	57 95       	ror	r21
    1474:	47 95       	ror	r20
    1476:	f7 94       	ror	r15
    1478:	e7 94       	ror	r14
    147a:	1a 95       	dec	r17
    147c:	c1 f7       	brne	.-16     	; 0x146e <__ftoa_engine+0xe6>
    147e:	ea ec       	ldi	r30, 0xCA	; 202
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	68 94       	set
    1484:	15 90       	lpm	r1, Z+
    1486:	15 91       	lpm	r17, Z+
    1488:	35 91       	lpm	r19, Z+
    148a:	65 91       	lpm	r22, Z+
    148c:	95 91       	lpm	r25, Z+
    148e:	05 90       	lpm	r0, Z+
    1490:	7f e2       	ldi	r23, 0x2F	; 47
    1492:	73 95       	inc	r23
    1494:	e1 18       	sub	r14, r1
    1496:	f1 0a       	sbc	r15, r17
    1498:	43 0b       	sbc	r20, r19
    149a:	56 0b       	sbc	r21, r22
    149c:	c9 0b       	sbc	r28, r25
    149e:	d0 09       	sbc	r29, r0
    14a0:	c0 f7       	brcc	.-16     	; 0x1492 <__ftoa_engine+0x10a>
    14a2:	e1 0c       	add	r14, r1
    14a4:	f1 1e       	adc	r15, r17
    14a6:	43 1f       	adc	r20, r19
    14a8:	56 1f       	adc	r21, r22
    14aa:	c9 1f       	adc	r28, r25
    14ac:	d0 1d       	adc	r29, r0
    14ae:	7e f4       	brtc	.+30     	; 0x14ce <__ftoa_engine+0x146>
    14b0:	70 33       	cpi	r23, 0x30	; 48
    14b2:	11 f4       	brne	.+4      	; 0x14b8 <__ftoa_engine+0x130>
    14b4:	8a 95       	dec	r24
    14b6:	e6 cf       	rjmp	.-52     	; 0x1484 <__ftoa_engine+0xfc>
    14b8:	e8 94       	clt
    14ba:	01 50       	subi	r16, 0x01	; 1
    14bc:	30 f0       	brcs	.+12     	; 0x14ca <__ftoa_engine+0x142>
    14be:	08 0f       	add	r16, r24
    14c0:	0a f4       	brpl	.+2      	; 0x14c4 <__ftoa_engine+0x13c>
    14c2:	00 27       	eor	r16, r16
    14c4:	02 17       	cp	r16, r18
    14c6:	08 f4       	brcc	.+2      	; 0x14ca <__ftoa_engine+0x142>
    14c8:	20 2f       	mov	r18, r16
    14ca:	23 95       	inc	r18
    14cc:	02 2f       	mov	r16, r18
    14ce:	7a 33       	cpi	r23, 0x3A	; 58
    14d0:	28 f0       	brcs	.+10     	; 0x14dc <__ftoa_engine+0x154>
    14d2:	79 e3       	ldi	r23, 0x39	; 57
    14d4:	7d 93       	st	X+, r23
    14d6:	2a 95       	dec	r18
    14d8:	e9 f7       	brne	.-6      	; 0x14d4 <__ftoa_engine+0x14c>
    14da:	10 c0       	rjmp	.+32     	; 0x14fc <__ftoa_engine+0x174>
    14dc:	7d 93       	st	X+, r23
    14de:	2a 95       	dec	r18
    14e0:	89 f6       	brne	.-94     	; 0x1484 <__ftoa_engine+0xfc>
    14e2:	06 94       	lsr	r0
    14e4:	97 95       	ror	r25
    14e6:	67 95       	ror	r22
    14e8:	37 95       	ror	r19
    14ea:	17 95       	ror	r17
    14ec:	17 94       	ror	r1
    14ee:	e1 18       	sub	r14, r1
    14f0:	f1 0a       	sbc	r15, r17
    14f2:	43 0b       	sbc	r20, r19
    14f4:	56 0b       	sbc	r21, r22
    14f6:	c9 0b       	sbc	r28, r25
    14f8:	d0 09       	sbc	r29, r0
    14fa:	98 f0       	brcs	.+38     	; 0x1522 <__ftoa_engine+0x19a>
    14fc:	23 95       	inc	r18
    14fe:	7e 91       	ld	r23, -X
    1500:	73 95       	inc	r23
    1502:	7a 33       	cpi	r23, 0x3A	; 58
    1504:	08 f0       	brcs	.+2      	; 0x1508 <__ftoa_engine+0x180>
    1506:	70 e3       	ldi	r23, 0x30	; 48
    1508:	7c 93       	st	X, r23
    150a:	20 13       	cpse	r18, r16
    150c:	b8 f7       	brcc	.-18     	; 0x14fc <__ftoa_engine+0x174>
    150e:	7e 91       	ld	r23, -X
    1510:	70 61       	ori	r23, 0x10	; 16
    1512:	7d 93       	st	X+, r23
    1514:	30 f0       	brcs	.+12     	; 0x1522 <__ftoa_engine+0x19a>
    1516:	83 95       	inc	r24
    1518:	71 e3       	ldi	r23, 0x31	; 49
    151a:	7d 93       	st	X+, r23
    151c:	70 e3       	ldi	r23, 0x30	; 48
    151e:	2a 95       	dec	r18
    1520:	e1 f7       	brne	.-8      	; 0x151a <__ftoa_engine+0x192>
    1522:	11 24       	eor	r1, r1
    1524:	ef 90       	pop	r14
    1526:	ff 90       	pop	r15
    1528:	0f 91       	pop	r16
    152a:	1f 91       	pop	r17
    152c:	cf 91       	pop	r28
    152e:	df 91       	pop	r29
    1530:	99 27       	eor	r25, r25
    1532:	87 fd       	sbrc	r24, 7
    1534:	90 95       	com	r25
    1536:	08 95       	ret

00001538 <__prologue_saves__>:
    1538:	2f 92       	push	r2
    153a:	3f 92       	push	r3
    153c:	4f 92       	push	r4
    153e:	5f 92       	push	r5
    1540:	6f 92       	push	r6
    1542:	7f 92       	push	r7
    1544:	8f 92       	push	r8
    1546:	9f 92       	push	r9
    1548:	af 92       	push	r10
    154a:	bf 92       	push	r11
    154c:	cf 92       	push	r12
    154e:	df 92       	push	r13
    1550:	ef 92       	push	r14
    1552:	ff 92       	push	r15
    1554:	0f 93       	push	r16
    1556:	1f 93       	push	r17
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	ca 1b       	sub	r28, r26
    1562:	db 0b       	sbc	r29, r27
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	cd bf       	out	0x3d, r28	; 61
    156e:	09 94       	ijmp

00001570 <__epilogue_restores__>:
    1570:	2a 88       	ldd	r2, Y+18	; 0x12
    1572:	39 88       	ldd	r3, Y+17	; 0x11
    1574:	48 88       	ldd	r4, Y+16	; 0x10
    1576:	5f 84       	ldd	r5, Y+15	; 0x0f
    1578:	6e 84       	ldd	r6, Y+14	; 0x0e
    157a:	7d 84       	ldd	r7, Y+13	; 0x0d
    157c:	8c 84       	ldd	r8, Y+12	; 0x0c
    157e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1580:	aa 84       	ldd	r10, Y+10	; 0x0a
    1582:	b9 84       	ldd	r11, Y+9	; 0x09
    1584:	c8 84       	ldd	r12, Y+8	; 0x08
    1586:	df 80       	ldd	r13, Y+7	; 0x07
    1588:	ee 80       	ldd	r14, Y+6	; 0x06
    158a:	fd 80       	ldd	r15, Y+5	; 0x05
    158c:	0c 81       	ldd	r16, Y+4	; 0x04
    158e:	1b 81       	ldd	r17, Y+3	; 0x03
    1590:	aa 81       	ldd	r26, Y+2	; 0x02
    1592:	b9 81       	ldd	r27, Y+1	; 0x01
    1594:	ce 0f       	add	r28, r30
    1596:	d1 1d       	adc	r29, r1
    1598:	0f b6       	in	r0, 0x3f	; 63
    159a:	f8 94       	cli
    159c:	de bf       	out	0x3e, r29	; 62
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	cd bf       	out	0x3d, r28	; 61
    15a2:	ed 01       	movw	r28, r26
    15a4:	08 95       	ret

000015a6 <_exit>:
    15a6:	f8 94       	cli

000015a8 <__stop_program>:
    15a8:	ff cf       	rjmp	.-2      	; 0x15a8 <__stop_program>
